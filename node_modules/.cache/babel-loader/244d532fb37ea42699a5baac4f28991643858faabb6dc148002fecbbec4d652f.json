{"ast":null,"code":"import { create } from 'ipfs-http-client';\n\n// Configuration du client IPFS pour se connecter au daemon IPFS local\nconst ipfs = create({\n  host: 'localhost',\n  port: 5001,\n  protocol: 'http'\n});\n\n/**\n * Télécharge un fichier sur IPFS\n * @param {File} file - Le fichier à télécharger\n * @returns {Promise<string>} - Le hash IPFS du fichier téléchargé\n */\nexport const uploadToIPFS = async file => {\n  try {\n    // Vérification que le fichier est valide\n    if (!file) {\n      throw new Error('Aucun fichier fourni');\n    }\n\n    // Lecture du fichier\n    const fileBuffer = await file.arrayBuffer();\n\n    // Téléchargement du fichier sur IPFS\n    const result = await ipfs.add(new Uint8Array(fileBuffer));\n\n    // Retourne le hash IPFS (CID)\n    return result.path;\n  } catch (error) {\n    console.error('Erreur lors du téléchargement sur IPFS:', error);\n    throw error;\n  }\n};\n\n/**\n * Génère l'URL pour accéder au fichier sur la passerelle IPFS locale\n * @param {string} ipfsHash - Le hash IPFS du fichier\n * @returns {string} - L'URL complète pour accéder au fichier\n */\nexport const getIPFSGatewayURL = ipfsHash => {\n  if (!ipfsHash) return '';\n  return `http://localhost:8080/ipfs/${ipfsHash}`;\n};\nexport default {\n  uploadToIPFS,\n  getIPFSGatewayURL\n};","map":{"version":3,"names":["create","ipfs","host","port","protocol","uploadToIPFS","file","Error","fileBuffer","arrayBuffer","result","add","Uint8Array","path","error","console","getIPFSGatewayURL","ipfsHash"],"sources":["C:/Users/yassi/OneDrive/Desktop/tp_9/Certification-de-Diplomes/src/utils/ipfs.js"],"sourcesContent":["import { create } from 'ipfs-http-client';\n\n// Configuration du client IPFS pour se connecter au daemon IPFS local\nconst ipfs = create({\n  host: 'localhost',\n  port: 5001,\n  protocol: 'http'\n});\n\n/**\n * Télécharge un fichier sur IPFS\n * @param {File} file - Le fichier à télécharger\n * @returns {Promise<string>} - Le hash IPFS du fichier téléchargé\n */\nexport const uploadToIPFS = async (file) => {\n  try {\n    // Vérification que le fichier est valide\n    if (!file) {\n      throw new Error('Aucun fichier fourni');\n    }\n    \n    // Lecture du fichier\n    const fileBuffer = await file.arrayBuffer();\n    \n    // Téléchargement du fichier sur IPFS\n    const result = await ipfs.add(new Uint8Array(fileBuffer));\n    \n    // Retourne le hash IPFS (CID)\n    return result.path;\n  } catch (error) {\n    console.error('Erreur lors du téléchargement sur IPFS:', error);\n    throw error;\n  }\n};\n\n/**\n * Génère l'URL pour accéder au fichier sur la passerelle IPFS locale\n * @param {string} ipfsHash - Le hash IPFS du fichier\n * @returns {string} - L'URL complète pour accéder au fichier\n */\nexport const getIPFSGatewayURL = (ipfsHash) => {\n  if (!ipfsHash) return '';\n  return `http://localhost:8080/ipfs/${ipfsHash}`;\n};\n\nexport default {\n  uploadToIPFS,\n  getIPFSGatewayURL\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,kBAAkB;;AAEzC;AACA,MAAMC,IAAI,GAAGD,MAAM,CAAC;EAClBE,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,IAAI;EACVC,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,IAAI,IAAK;EAC1C,IAAI;IACF;IACA,IAAI,CAACA,IAAI,EAAE;MACT,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;;IAEA;IACA,MAAMC,UAAU,GAAG,MAAMF,IAAI,CAACG,WAAW,CAAC,CAAC;;IAE3C;IACA,MAAMC,MAAM,GAAG,MAAMT,IAAI,CAACU,GAAG,CAAC,IAAIC,UAAU,CAACJ,UAAU,CAAC,CAAC;;IAEzD;IACA,OAAOE,MAAM,CAACG,IAAI;EACpB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAC/D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,iBAAiB,GAAIC,QAAQ,IAAK;EAC7C,IAAI,CAACA,QAAQ,EAAE,OAAO,EAAE;EACxB,OAAO,8BAA8BA,QAAQ,EAAE;AACjD,CAAC;AAED,eAAe;EACbZ,YAAY;EACZW;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}