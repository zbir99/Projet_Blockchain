{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yassi\\\\OneDrive\\\\Desktop\\\\tp_9\\\\Certification-de-Diplomes\\\\src\\\\components\\\\WalletConnect.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\n\n/**\n * Composant pour la connexion au portefeuille MetaMask\n * @param {Object} props - Les propriétés du composant\n * @param {Function} props.onConnect - Fonction appelée lorsque le portefeuille est connecté\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletConnect = ({\n  onConnect\n}) => {\n  _s();\n  const [account, setAccount] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [provider, setProvider] = useState(null);\n  const [error, setError] = useState('');\n\n  // Vérifier si MetaMask est installé et se connecter au changement de compte\n  useEffect(() => {\n    const checkMetaMask = async () => {\n      try {\n        // Vérifier si window.ethereum existe (MetaMask ou autre portefeuille compatible)\n        if (window.ethereum) {\n          // Créer un fournisseur ethers avec window.ethereum\n          const ethersProvider = new ethers.BrowserProvider(window.ethereum);\n          setProvider(ethersProvider);\n\n          // Écouter les changements de compte\n          window.ethereum.on('accountsChanged', handleAccountsChanged);\n\n          // Vérifier si déjà connecté\n          const accounts = await ethersProvider.listAccounts();\n          if (accounts.length > 0) {\n            handleAccountsChanged(accounts);\n          }\n        } else {\n          setError('Veuillez installer MetaMask pour utiliser cette application');\n        }\n      } catch (err) {\n        console.error('Erreur lors de la vérification de MetaMask:', err);\n        setError('Erreur lors de la connexion à MetaMask');\n      }\n    };\n    checkMetaMask();\n\n    // Nettoyer les écouteurs d'événements\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      }\n    };\n  }, []);\n\n  // Gérer le changement de compte\n  const handleAccountsChanged = async accounts => {\n    if (accounts.length === 0) {\n      setAccount('');\n      setIsAdmin(false);\n      setError('Veuillez vous connecter à MetaMask');\n    } else {\n      const currentAccount = accounts[0].address || accounts[0];\n      setAccount(currentAccount);\n      setError('');\n\n      // Appeler la fonction de callback avec le compte et le fournisseur\n      if (onConnect && provider) {\n        onConnect(currentAccount, provider);\n      }\n    }\n  };\n\n  // Fonction pour se connecter à MetaMask\n  const connectWallet = async () => {\n    try {\n      if (!window.ethereum) {\n        setError('Veuillez installer MetaMask pour utiliser cette application');\n        return;\n      }\n      setError('');\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      handleAccountsChanged(accounts);\n    } catch (err) {\n      console.error('Erreur lors de la connexion au portefeuille:', err);\n      if (err.code === 4001) {\n        // L'utilisateur a refusé la connexion\n        setError(\"Connexion refusée par l'utilisateur\");\n      } else {\n        setError('Erreur lors de la connexion au portefeuille');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wallet-connect\",\n    children: !account ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: connectWallet,\n        className: \"connect-button\",\n        children: \"Connecter avec MetaMask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"account-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Compte connect\\xE9: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"account-address\",\n          children: account\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), isAdmin && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"admin-badge\",\n        children: \"Administrateur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(WalletConnect, \"MMAkEqSKek5bhkG3gRqgzNSbfT4=\");\n_c = WalletConnect;\nexport default WalletConnect;\nvar _c;\n$RefreshReg$(_c, \"WalletConnect\");","map":{"version":3,"names":["React","useState","useEffect","ethers","jsxDEV","_jsxDEV","WalletConnect","onConnect","_s","account","setAccount","isAdmin","setIsAdmin","provider","setProvider","error","setError","checkMetaMask","window","ethereum","ethersProvider","BrowserProvider","on","handleAccountsChanged","accounts","listAccounts","length","err","console","removeListener","currentAccount","address","connectWallet","request","method","code","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/yassi/OneDrive/Desktop/tp_9/Certification-de-Diplomes/src/components/WalletConnect.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\n\n/**\n * Composant pour la connexion au portefeuille MetaMask\n * @param {Object} props - Les propriétés du composant\n * @param {Function} props.onConnect - Fonction appelée lorsque le portefeuille est connecté\n */\nconst WalletConnect = ({ onConnect }) => {\n  const [account, setAccount] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [provider, setProvider] = useState(null);\n  const [error, setError] = useState('');\n\n  // Vérifier si MetaMask est installé et se connecter au changement de compte\n  useEffect(() => {\n    const checkMetaMask = async () => {\n      try {\n        // Vérifier si window.ethereum existe (MetaMask ou autre portefeuille compatible)\n        if (window.ethereum) {\n          // Créer un fournisseur ethers avec window.ethereum\n          const ethersProvider = new ethers.BrowserProvider(window.ethereum);\n          setProvider(ethersProvider);\n\n          // Écouter les changements de compte\n          window.ethereum.on('accountsChanged', handleAccountsChanged);\n          \n          // Vérifier si déjà connecté\n          const accounts = await ethersProvider.listAccounts();\n          if (accounts.length > 0) {\n            handleAccountsChanged(accounts);\n          }\n        } else {\n          setError('Veuillez installer MetaMask pour utiliser cette application');\n        }\n      } catch (err) {\n        console.error('Erreur lors de la vérification de MetaMask:', err);\n        setError('Erreur lors de la connexion à MetaMask');\n      }\n    };\n\n    checkMetaMask();\n\n    // Nettoyer les écouteurs d'événements\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      }\n    };\n  }, []);\n\n  // Gérer le changement de compte\n  const handleAccountsChanged = async (accounts) => {\n    if (accounts.length === 0) {\n      setAccount('');\n      setIsAdmin(false);\n      setError('Veuillez vous connecter à MetaMask');\n    } else {\n      const currentAccount = accounts[0].address || accounts[0];\n      setAccount(currentAccount);\n      setError('');\n      \n      // Appeler la fonction de callback avec le compte et le fournisseur\n      if (onConnect && provider) {\n        onConnect(currentAccount, provider);\n      }\n    }\n  };\n\n  // Fonction pour se connecter à MetaMask\n  const connectWallet = async () => {\n    try {\n      if (!window.ethereum) {\n        setError('Veuillez installer MetaMask pour utiliser cette application');\n        return;\n      }\n\n      setError('');\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      handleAccountsChanged(accounts);\n    } catch (err) {\n      console.error('Erreur lors de la connexion au portefeuille:', err);\n      if (err.code === 4001) {\n        // L'utilisateur a refusé la connexion\n        setError(\"Connexion refusée par l'utilisateur\");\n      } else {\n        setError('Erreur lors de la connexion au portefeuille');\n      }\n    }\n  };\n\n  return (\n    <div className=\"wallet-connect\">\n      {!account ? (\n        <div>\n          <button onClick={connectWallet} className=\"connect-button\">\n            Connecter avec MetaMask\n          </button>\n          {error && <p className=\"error-message\">{error}</p>}\n        </div>\n      ) : (\n        <div className=\"account-info\">\n          <p>\n            Compte connecté: <span className=\"account-address\">{account}</span>\n          </p>\n          {isAdmin && <span className=\"admin-badge\">Administrateur</span>}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WalletConnect;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}