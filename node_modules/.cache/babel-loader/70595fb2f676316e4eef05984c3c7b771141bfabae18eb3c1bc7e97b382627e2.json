{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\yassi\\OneDrive\\Desktop\\tp_9\\Certification-de-Diplomes\\node_modules\\@ipld\\dag-cbor\\node_modules\\multiformats\\src\\link\\interface.ts"],"sourcesContent":["import type { MultibaseEncoder, MultibaseDecoder, Multibase } from '../bases/interface.js'\nimport type { Phantom, ByteView } from '../block/interface.js'\nimport type { MultihashDigest } from '../hashes/interface.js'\n\nexport type { MultihashDigest, MultibaseEncoder, MultibaseDecoder }\nexport type Version = 0 | 1\n\nexport type DAG_PB = 0x70\nexport type SHA_256 = 0x12\n\n/**\n * Represents an IPLD link to a specific data of type `T`.\n *\n * @template T - Logical type of the data being linked to.\n * @template C - multicodec code corresponding to a codec linked data is encoded with\n * @template A - multicodec code corresponding to the hashing algorithm of the CID\n * @template V - CID version\n */\nexport interface Link<\n  Data extends unknown = unknown,\n  Format extends number = number,\n  Alg extends number = number,\n  V extends Version = 1\n  > extends Phantom<Data> {\n  readonly version: V\n  readonly code: Format\n  readonly multihash: MultihashDigest<Alg>\n\n  readonly byteOffset: number\n  readonly byteLength: number\n  readonly bytes: ByteView<Link<Data, Format, Alg, V>>\n\n  equals(other: unknown): other is Link<Data, Format, Alg, Version>\n\n  toString<Prefix extends string>(base?: MultibaseEncoder<Prefix>): ToString<Link<Data, Format, Alg, Version>, Prefix>\n  link(): Link<Data, Format, Alg, V>\n\n  toV1(): Link<Data, Format, Alg, 1>\n}\n\nexport interface LinkJSON<T extends UnknownLink = UnknownLink> {\n  '/': ToString<T>\n}\n\nexport interface LegacyLink<T extends unknown = unknown> extends Link<T, DAG_PB, SHA_256, 0> {\n}\n\nexport type UnknownLink =\n  | LegacyLink<unknown>\n  | Link<unknown, number, number, Version>\n\nexport type ToString<T, Prefix extends string = string> = Multibase<Prefix> & Phantom<T>\n\nexport type { ByteView }\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}