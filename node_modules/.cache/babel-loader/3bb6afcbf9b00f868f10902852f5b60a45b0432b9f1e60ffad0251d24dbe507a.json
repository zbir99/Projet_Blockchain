{"ast":null,"code":"/**\n * @packageDocumentation\n *\n * Allows treating a browser readable stream as an async iterator.\n *\n * @example\n *\n * ```javascript\n * import toIt from 'browser-readablestream-to-it'\n * import all from 'it-all'\n *\n * const content = [0, 1, 2, 3, 4]\n *\n * const stream = new ReadableStream({\n *   start(controller) {\n *     for (let i = 0; i < content.length; i++) {\n *       controller.enqueue(content[i])\n *     }\n *\n *     controller.close()\n *   }\n * })\n *\n * const arr = await all(toIt(stream))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n *\n * ## preventCancel\n *\n * By default a readable stream will have [.cancel](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/cancel) called on it once it has ended or\n * reading has stopped prematurely.\n *\n * To prevent this behaviour, pass `preventCancel: true` as an option:\n *\n * ```javascript\n * const arr = await all(toIt(stream, { preventCancel: true }))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n */\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nexport default async function* browserReadableStreamToIt(stream, options = {}) {\n  const reader = stream.getReader();\n  try {\n    while (true) {\n      const result = await reader.read();\n      if (result.done) {\n        return;\n      }\n      yield result.value;\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      await reader.cancel();\n    }\n    reader.releaseLock();\n  }\n}","map":{"version":3,"names":["browserReadableStreamToIt","stream","options","reader","getReader","result","read","done","value","preventCancel","cancel","releaseLock"],"sources":["C:\\Users\\yassi\\OneDrive\\Desktop\\tp_9\\Certification-de-Diplomes\\node_modules\\browser-readablestream-to-it\\src\\index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * Allows treating a browser readable stream as an async iterator.\n *\n * @example\n *\n * ```javascript\n * import toIt from 'browser-readablestream-to-it'\n * import all from 'it-all'\n *\n * const content = [0, 1, 2, 3, 4]\n *\n * const stream = new ReadableStream({\n *   start(controller) {\n *     for (let i = 0; i < content.length; i++) {\n *       controller.enqueue(content[i])\n *     }\n *\n *     controller.close()\n *   }\n * })\n *\n * const arr = await all(toIt(stream))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n *\n * ## preventCancel\n *\n * By default a readable stream will have [.cancel](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/cancel) called on it once it has ended or\n * reading has stopped prematurely.\n *\n * To prevent this behaviour, pass `preventCancel: true` as an option:\n *\n * ```javascript\n * const arr = await all(toIt(stream, { preventCancel: true }))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n */\n\nexport interface BrowserReadableStreamToItOptions {\n  preventCancel?: boolean\n}\n\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nexport default async function * browserReadableStreamToIt <T> (stream: ReadableStream<T>, options: BrowserReadableStreamToItOptions = {}): AsyncGenerator<T, void, undefined> {\n  const reader = stream.getReader()\n\n  try {\n    while (true) {\n      const result = await reader.read()\n\n      if (result.done) {\n        return\n      }\n\n      yield result.value\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      await reader.cancel()\n    }\n\n    reader.releaseLock()\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;;;;;;;AAOA,eAAe,gBAAiBA,yBAAyBA,CAAMC,MAAyB,EAAEC,OAAA,GAA4C,EAAE;EACtI,MAAMC,MAAM,GAAGF,MAAM,CAACG,SAAS,EAAE;EAEjC,IAAI;IACF,OAAO,IAAI,EAAE;MACX,MAAMC,MAAM,GAAG,MAAMF,MAAM,CAACG,IAAI,EAAE;MAElC,IAAID,MAAM,CAACE,IAAI,EAAE;QACf;MACF;MAEA,MAAMF,MAAM,CAACG,KAAK;IACpB;EACF,CAAC,SAAS;IACR,IAAIN,OAAO,CAACO,aAAa,KAAK,IAAI,EAAE;MAClC,MAAMN,MAAM,CAACO,MAAM,EAAE;IACvB;IAEAP,MAAM,CAACQ,WAAW,EAAE;EACtB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}