{"ast":null,"code":"/**\n * Utilitaire pour interagir avec IPFS via Docker\n */\n\n/**\n * Télécharge un fichier sur IPFS en utilisant l'API HTTP directement\n * @param {File} file - Le fichier à télécharger\n * @returns {Promise<string>} - Le hash IPFS du fichier téléchargé\n */\nexport const uploadToIPFS = async file => {\n  // Vérification que le fichier est valide\n  if (!file) {\n    throw new Error('Aucun fichier fourni');\n  }\n  console.log('Début du téléchargement sur IPFS...');\n\n  // Créer un objet FormData pour l'envoi du fichier\n  const formData = new FormData();\n  formData.append('file', file);\n\n  // Utiliser l'API IPFS locale via Docker\n  const response = await fetch('http://localhost:5001/api/v0/add?pin=true', {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error(`Erreur HTTP: ${response.status}`);\n  }\n  const data = await response.json();\n  console.log(`Fichier \"${file.name}\" téléchargé sur IPFS avec succès`);\n  console.log(`Hash IPFS: ${data.Hash}`);\n  return data.Hash;\n};\n\n/**\n * Génère l'URL pour accéder au fichier sur IPFS\n * @param {string} ipfsHash - Le hash IPFS du fichier\n * @returns {string} - L'URL complète pour accéder au fichier\n */\nexport const getIPFSGatewayURL = ipfsHash => {\n  if (!ipfsHash) return '';\n\n  // Utiliser la passerelle IPFS locale via Docker\n  return `http://localhost:8080/ipfs/${ipfsHash}`;\n};\nexport default {\n  uploadToIPFS,\n  getIPFSGatewayURL\n};","map":{"version":3,"names":["uploadToIPFS","file","Error","console","log","formData","FormData","append","response","fetch","method","body","ok","status","data","json","name","Hash","getIPFSGatewayURL","ipfsHash"],"sources":["C:/Users/yassi/OneDrive/Desktop/tp_9/Certification-de-Diplomes/src/utils/ipfs.js"],"sourcesContent":["/**\n * Utilitaire pour interagir avec IPFS via Docker\n */\n\n/**\n * Télécharge un fichier sur IPFS en utilisant l'API HTTP directement\n * @param {File} file - Le fichier à télécharger\n * @returns {Promise<string>} - Le hash IPFS du fichier téléchargé\n */\nexport const uploadToIPFS = async (file) => {\n  // Vérification que le fichier est valide\n  if (!file) {\n    throw new Error('Aucun fichier fourni');\n  }\n  \n  console.log('Début du téléchargement sur IPFS...');\n  \n  // Créer un objet FormData pour l'envoi du fichier\n  const formData = new FormData();\n  formData.append('file', file);\n  \n  // Utiliser l'API IPFS locale via Docker\n  const response = await fetch('http://localhost:5001/api/v0/add?pin=true', {\n    method: 'POST',\n    body: formData\n  });\n  \n  if (!response.ok) {\n    throw new Error(`Erreur HTTP: ${response.status}`);\n  }\n  \n  const data = await response.json();\n  console.log(`Fichier \"${file.name}\" téléchargé sur IPFS avec succès`);\n  console.log(`Hash IPFS: ${data.Hash}`);\n  \n  return data.Hash;\n};\n\n/**\n * Génère l'URL pour accéder au fichier sur IPFS\n * @param {string} ipfsHash - Le hash IPFS du fichier\n * @returns {string} - L'URL complète pour accéder au fichier\n */\nexport const getIPFSGatewayURL = (ipfsHash) => {\n  if (!ipfsHash) return '';\n  \n  // Utiliser la passerelle IPFS locale via Docker\n  return `http://localhost:8080/ipfs/${ipfsHash}`;\n};\n\nexport default {\n  uploadToIPFS,\n  getIPFSGatewayURL\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,YAAY,GAAG,MAAOC,IAAI,IAAK;EAC1C;EACA,IAAI,CAACA,IAAI,EAAE;IACT,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EACzC;EAEAC,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;;EAElD;EACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEN,IAAI,CAAC;;EAE7B;EACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;IACxEC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEN;EACR,CAAC,CAAC;EAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIV,KAAK,CAAC,gBAAgBM,QAAQ,CAACK,MAAM,EAAE,CAAC;EACpD;EAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EAClCZ,OAAO,CAACC,GAAG,CAAC,YAAYH,IAAI,CAACe,IAAI,mCAAmC,CAAC;EACrEb,OAAO,CAACC,GAAG,CAAC,cAAcU,IAAI,CAACG,IAAI,EAAE,CAAC;EAEtC,OAAOH,IAAI,CAACG,IAAI;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,QAAQ,IAAK;EAC7C,IAAI,CAACA,QAAQ,EAAE,OAAO,EAAE;;EAExB;EACA,OAAO,8BAA8BA,QAAQ,EAAE;AACjD,CAAC;AAED,eAAe;EACbnB,YAAY;EACZkB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}