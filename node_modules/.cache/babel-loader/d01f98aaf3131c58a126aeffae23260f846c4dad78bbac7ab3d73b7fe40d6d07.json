{"ast":null,"code":"/**\n * Solution de stockage local de fichiers pour démonstration\n * Cette version simule IPFS en stockant les fichiers dans le navigateur\n */\n\n// Stockage pour les fichiers\nconst localFileStorage = new Map();\n\n/**\n * Génère un identifiant unique\n */\nconst generateId = () => {\n  return 'doc-' + Math.random().toString(36).substring(2, 15);\n};\n\n/**\n * Stocke un fichier et retourne un identifiant\n * @param {File} file - Le fichier à stocker\n * @returns {Promise<string>} - L'identifiant du fichier\n */\nexport const uploadToIPFS = async file => {\n  try {\n    if (!file) {\n      throw new Error('Aucun fichier fourni');\n    }\n    console.log('Stockage du fichier...');\n\n    // Générer un ID simple\n    const fileId = generateId();\n\n    // Créer une URL d'objet pour le fichier\n    const blobUrl = URL.createObjectURL(file);\n\n    // Stocker l'URL et les informations du fichier\n    fileUrlMap.set(fileId, {\n      url: blobUrl,\n      name: file.name,\n      type: file.type,\n      size: file.size\n    });\n\n    // Enregistrer l'association ID-nom dans sessionStorage pour la persistance\n    sessionStorage.setItem(`file-info-${fileId}`, JSON.stringify({\n      name: file.name,\n      type: file.type,\n      size: file.size\n    }));\n    console.log(`Fichier \"${file.name}\" stocké avec succès`);\n    console.log(`ID: ${fileId}`);\n    return fileId;\n  } catch (error) {\n    console.error('Erreur lors du stockage du fichier:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupère l'URL d'un fichier à partir de son identifiant\n * @param {string} fileId - L'identifiant du fichier\n * @returns {string} - L'URL pour accéder au fichier\n */\nexport const getIPFSGatewayURL = fileId => {\n  if (!fileId) return '';\n\n  // Vérifier si l'ID est dans notre Map\n  if (fileUrlMap.has(fileId)) {\n    return fileUrlMap.get(fileId).url;\n  }\n  console.warn(`Fichier avec l'ID ${fileId} non trouvé - la page a peut-être été rechargée`);\n  return '';\n};\nexport default {\n  uploadToIPFS,\n  getIPFSGatewayURL\n};","map":{"version":3,"names":["localFileStorage","Map","generateId","Math","random","toString","substring","uploadToIPFS","file","Error","console","log","fileId","blobUrl","URL","createObjectURL","fileUrlMap","set","url","name","type","size","sessionStorage","setItem","JSON","stringify","error","getIPFSGatewayURL","has","get","warn"],"sources":["C:/Users/yassi/OneDrive/Desktop/tp_9/Certification-de-Diplomes/src/utils/ipfs.js"],"sourcesContent":["/**\n * Solution de stockage local de fichiers pour démonstration\n * Cette version simule IPFS en stockant les fichiers dans le navigateur\n */\n\n// Stockage pour les fichiers\nconst localFileStorage = new Map();\n\n/**\n * Génère un identifiant unique\n */\nconst generateId = () => {\n  return 'doc-' + Math.random().toString(36).substring(2, 15);\n};\n\n/**\n * Stocke un fichier et retourne un identifiant\n * @param {File} file - Le fichier à stocker\n * @returns {Promise<string>} - L'identifiant du fichier\n */\nexport const uploadToIPFS = async (file) => {\n  try {\n    if (!file) {\n      throw new Error('Aucun fichier fourni');\n    }\n    \n    console.log('Stockage du fichier...');\n    \n    // Générer un ID simple\n    const fileId = generateId();\n    \n    // Créer une URL d'objet pour le fichier\n    const blobUrl = URL.createObjectURL(file);\n    \n    // Stocker l'URL et les informations du fichier\n    fileUrlMap.set(fileId, {\n      url: blobUrl,\n      name: file.name,\n      type: file.type,\n      size: file.size\n    });\n    \n    // Enregistrer l'association ID-nom dans sessionStorage pour la persistance\n    sessionStorage.setItem(`file-info-${fileId}`, JSON.stringify({\n      name: file.name,\n      type: file.type,\n      size: file.size\n    }));\n    \n    console.log(`Fichier \"${file.name}\" stocké avec succès`);\n    console.log(`ID: ${fileId}`);\n    \n    return fileId;\n  } catch (error) {\n    console.error('Erreur lors du stockage du fichier:', error);\n    throw error;\n  }\n};\n\n/**\n * Récupère l'URL d'un fichier à partir de son identifiant\n * @param {string} fileId - L'identifiant du fichier\n * @returns {string} - L'URL pour accéder au fichier\n */\nexport const getIPFSGatewayURL = (fileId) => {\n  if (!fileId) return '';\n  \n  // Vérifier si l'ID est dans notre Map\n  if (fileUrlMap.has(fileId)) {\n    return fileUrlMap.get(fileId).url;\n  }\n  \n  console.warn(`Fichier avec l'ID ${fileId} non trouvé - la page a peut-être été rechargée`);\n  return '';\n};\n\nexport default {\n  uploadToIPFS,\n  getIPFSGatewayURL\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,gBAAgB,GAAG,IAAIC,GAAG,CAAC,CAAC;;AAElC;AACA;AACA;AACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;EACvB,OAAO,MAAM,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;AAC7D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,IAAI,IAAK;EAC1C,IAAI;IACF,IAAI,CAACA,IAAI,EAAE;MACT,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IAEAC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;;IAErC;IACA,MAAMC,MAAM,GAAGV,UAAU,CAAC,CAAC;;IAE3B;IACA,MAAMW,OAAO,GAAGC,GAAG,CAACC,eAAe,CAACP,IAAI,CAAC;;IAEzC;IACAQ,UAAU,CAACC,GAAG,CAACL,MAAM,EAAE;MACrBM,GAAG,EAAEL,OAAO;MACZM,IAAI,EAAEX,IAAI,CAACW,IAAI;MACfC,IAAI,EAAEZ,IAAI,CAACY,IAAI;MACfC,IAAI,EAAEb,IAAI,CAACa;IACb,CAAC,CAAC;;IAEF;IACAC,cAAc,CAACC,OAAO,CAAC,aAAaX,MAAM,EAAE,EAAEY,IAAI,CAACC,SAAS,CAAC;MAC3DN,IAAI,EAAEX,IAAI,CAACW,IAAI;MACfC,IAAI,EAAEZ,IAAI,CAACY,IAAI;MACfC,IAAI,EAAEb,IAAI,CAACa;IACb,CAAC,CAAC,CAAC;IAEHX,OAAO,CAACC,GAAG,CAAC,YAAYH,IAAI,CAACW,IAAI,sBAAsB,CAAC;IACxDT,OAAO,CAACC,GAAG,CAAC,OAAOC,MAAM,EAAE,CAAC;IAE5B,OAAOA,MAAM;EACf,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdhB,OAAO,CAACgB,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIf,MAAM,IAAK;EAC3C,IAAI,CAACA,MAAM,EAAE,OAAO,EAAE;;EAEtB;EACA,IAAII,UAAU,CAACY,GAAG,CAAChB,MAAM,CAAC,EAAE;IAC1B,OAAOI,UAAU,CAACa,GAAG,CAACjB,MAAM,CAAC,CAACM,GAAG;EACnC;EAEAR,OAAO,CAACoB,IAAI,CAAC,qBAAqBlB,MAAM,iDAAiD,CAAC;EAC1F,OAAO,EAAE;AACX,CAAC;AAED,eAAe;EACbL,YAAY;EACZoB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}