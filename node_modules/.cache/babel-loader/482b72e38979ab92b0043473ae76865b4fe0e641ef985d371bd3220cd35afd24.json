{"ast":null,"code":"/* eslint-disable complexity */\nimport { base58btc } from 'multiformats/bases/base58';\nimport { CID } from 'multiformats/cid';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { bytesToMultiaddrParts, stringToMultiaddrParts, tuplesToBytes } from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport { isMultiaddr, multiaddr, resolvers } from './index.js';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nexport const symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\nconst DNS_CODES = [getProtocol('dns').code, getProtocol('dns4').code, getProtocol('dns6').code, getProtocol('dnsaddr').code];\nclass NoAvailableResolverError extends Error {\n  constructor(message = 'No available resolver') {\n    super(message);\n    this.name = 'NoAvailableResolverError';\n  }\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nexport class Multiaddr {\n  bytes;\n  #string;\n  #tuples;\n  #stringTuples;\n  #path;\n  [symbol] = true;\n  constructor(addr) {\n    // default\n    if (addr == null) {\n      addr = '';\n    }\n    let parts;\n    if (addr instanceof Uint8Array) {\n      parts = bytesToMultiaddrParts(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n      }\n      parts = stringToMultiaddrParts(addr);\n    } else if (isMultiaddr(addr)) {\n      // Multiaddr\n      parts = bytesToMultiaddrParts(addr.bytes);\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n    this.bytes = parts.bytes;\n    this.#string = parts.string;\n    this.#tuples = parts.tuples;\n    this.#stringTuples = parts.stringTuples;\n    this.#path = parts.path;\n  }\n  toString() {\n    return this.#string;\n  }\n  toJSON() {\n    return this.toString();\n  }\n  toOptions() {\n    let family;\n    let transport;\n    let host;\n    let port;\n    let zone = '';\n    const tcp = getProtocol('tcp');\n    const udp = getProtocol('udp');\n    const ip4 = getProtocol('ip4');\n    const ip6 = getProtocol('ip6');\n    const dns6 = getProtocol('dns6');\n    const ip6zone = getProtocol('ip6zone');\n    for (const [code, value] of this.stringTuples()) {\n      if (code === ip6zone.code) {\n        zone = `%${value ?? ''}`;\n      }\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(code)) {\n        transport = tcp.name === 'tcp' ? 'tcp' : 'udp';\n        port = 443;\n        host = `${value ?? ''}${zone}`;\n        family = code === dns6.code ? 6 : 4;\n      }\n      if (code === tcp.code || code === udp.code) {\n        transport = getProtocol(code).name === 'tcp' ? 'tcp' : 'udp';\n        port = parseInt(value ?? '');\n      }\n      if (code === ip4.code || code === ip6.code) {\n        transport = getProtocol(code).name === 'tcp' ? 'tcp' : 'udp';\n        host = `${value ?? ''}${zone}`;\n        family = code === ip6.code ? 6 : 4;\n      }\n    }\n    if (family == null || transport == null || host == null || port == null) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n    }\n    const opts = {\n      family,\n      host,\n      transport,\n      port\n    };\n    return opts;\n  }\n  protos() {\n    return this.#tuples.map(([code]) => Object.assign({}, getProtocol(code)));\n  }\n  protoCodes() {\n    return this.#tuples.map(([code]) => code);\n  }\n  protoNames() {\n    return this.#tuples.map(([code]) => getProtocol(code).name);\n  }\n  tuples() {\n    return this.#tuples.map(([code, value]) => {\n      if (value == null) {\n        return [code];\n      }\n      return [code, value];\n    });\n  }\n  stringTuples() {\n    return this.#stringTuples.map(([code, value]) => {\n      if (value == null) {\n        return [code];\n      }\n      return [code, value];\n    });\n  }\n  encapsulate(addr) {\n    addr = new Multiaddr(addr);\n    return new Multiaddr(this.toString() + addr.toString());\n  }\n  decapsulate(addr) {\n    const addrString = addr.toString();\n    const s = this.toString();\n    const i = s.lastIndexOf(addrString);\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n    }\n    return new Multiaddr(s.slice(0, i));\n  }\n  decapsulateCode(code) {\n    const tuples = this.tuples();\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(tuplesToBytes(tuples.slice(0, i)));\n      }\n    }\n    return this;\n  }\n  getPeerId() {\n    try {\n      let tuples = [];\n      this.stringTuples().forEach(([code, name]) => {\n        if (code === names.p2p.code) {\n          tuples.push([code, name]);\n        }\n        // if this is a p2p-circuit address, return the target peer id if present\n        // not the peer id of the relay\n        if (code === names['p2p-circuit'].code) {\n          tuples = [];\n        }\n      });\n      // Get the last ipfs tuple ['p2p', 'peerid string']\n      const tuple = tuples.pop();\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1];\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n        }\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n      }\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n  getPath() {\n    return this.#path;\n  }\n  equals(addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes);\n  }\n  async resolve(options) {\n    const resolvableProto = this.protos().find(p => p.resolvable);\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this];\n    }\n    const resolver = resolvers.get(resolvableProto.name);\n    if (resolver == null) {\n      throw new NoAvailableResolverError(`no available resolver for ${resolvableProto.name}`);\n    }\n    const result = await resolver(this, options);\n    return result.map(str => multiaddr(str));\n  }\n  nodeAddress() {\n    const options = this.toOptions();\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n    }\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    };\n  }\n  isThinWaistAddress(addr) {\n    const protos = (addr ?? this).protos();\n    if (protos.length !== 2) {\n      return false;\n    }\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false;\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Returns Multiaddr as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n   * ```\n   */\n  [inspect]() {\n    return `Multiaddr(${this.#string})`;\n  }\n}","map":{"version":3,"names":["base58btc","CID","equals","uint8ArrayEquals","toString","uint8ArrayToString","bytesToMultiaddrParts","stringToMultiaddrParts","tuplesToBytes","getProtocol","names","isMultiaddr","multiaddr","resolvers","inspect","Symbol","for","symbol","DNS_CODES","code","NoAvailableResolverError","Error","constructor","message","name","Multiaddr","bytes","string","tuples","stringTuples","path","addr","parts","Uint8Array","length","charAt","toJSON","toOptions","family","transport","host","port","zone","tcp","udp","ip4","ip6","dns6","ip6zone","value","includes","parseInt","opts","protos","map","Object","assign","protoCodes","protoNames","encapsulate","decapsulate","addrString","s","i","lastIndexOf","slice","decapsulateCode","getPeerId","forEach","p2p","push","tuple","pop","peerIdStr","decode","parse","multihash","e","getPath","resolve","options","resolvableProto","find","p","resolvable","resolver","get","result","str","nodeAddress","address","isThinWaistAddress"],"sources":["C:\\Users\\yassi\\OneDrive\\Desktop\\tp_9\\Certification-de-Diplomes\\node_modules\\@multiformats\\multiaddr-to-uri\\node_modules\\@multiformats\\multiaddr\\src\\multiaddr.ts"],"sourcesContent":["/* eslint-disable complexity */\nimport { base58btc } from 'multiformats/bases/base58'\nimport { CID } from 'multiformats/cid'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { bytesToMultiaddrParts, stringToMultiaddrParts, type MultiaddrParts, tuplesToBytes } from './codec.js'\nimport { getProtocol, names } from './protocols-table.js'\nimport { isMultiaddr, multiaddr, resolvers } from './index.js'\nimport type { MultiaddrInput, Multiaddr as MultiaddrInterface, MultiaddrObject, Protocol, StringTuple, Tuple, NodeAddress, ResolveOptions } from './index.js'\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\nexport const symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\nconst DNS_CODES = [\n  getProtocol('dns').code,\n  getProtocol('dns4').code,\n  getProtocol('dns6').code,\n  getProtocol('dnsaddr').code\n]\n\nclass NoAvailableResolverError extends Error {\n  constructor (message = 'No available resolver') {\n    super(message)\n    this.name = 'NoAvailableResolverError'\n  }\n}\n\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nexport class Multiaddr implements MultiaddrInterface {\n  public bytes: Uint8Array\n  readonly #string: string\n  readonly #tuples: Tuple[]\n  readonly #stringTuples: StringTuple[]\n  readonly #path: string | null\n\n  [symbol]: boolean = true\n\n  constructor (addr?: MultiaddrInput) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    let parts: MultiaddrParts\n    if (addr instanceof Uint8Array) {\n      parts = bytesToMultiaddrParts(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      parts = stringToMultiaddrParts(addr)\n    } else if (isMultiaddr(addr)) { // Multiaddr\n      parts = bytesToMultiaddrParts(addr.bytes)\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n\n    this.bytes = parts.bytes\n    this.#string = parts.string\n    this.#tuples = parts.tuples\n    this.#stringTuples = parts.stringTuples\n    this.#path = parts.path\n  }\n\n  toString (): string {\n    return this.#string\n  }\n\n  toJSON (): string {\n    return this.toString()\n  }\n\n  toOptions (): MultiaddrObject {\n    let family: 4 | 6 | undefined\n    let transport: 'tcp' | 'udp' | undefined\n    let host: string | undefined\n    let port: number | undefined\n    let zone = ''\n\n    const tcp = getProtocol('tcp')\n    const udp = getProtocol('udp')\n    const ip4 = getProtocol('ip4')\n    const ip6 = getProtocol('ip6')\n    const dns6 = getProtocol('dns6')\n    const ip6zone = getProtocol('ip6zone')\n\n    for (const [code, value] of this.stringTuples()) {\n      if (code === ip6zone.code) {\n        zone = `%${value ?? ''}`\n      }\n\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(code)) {\n        transport = tcp.name === 'tcp' ? 'tcp' : 'udp'\n        port = 443\n        host = `${value ?? ''}${zone}`\n        family = code === dns6.code ? 6 : 4\n      }\n\n      if (code === tcp.code || code === udp.code) {\n        transport = getProtocol(code).name === 'tcp' ? 'tcp' : 'udp'\n        port = parseInt(value ?? '')\n      }\n\n      if (code === ip4.code || code === ip6.code) {\n        transport = getProtocol(code).name === 'tcp' ? 'tcp' : 'udp'\n        host = `${value ?? ''}${zone}`\n        family = code === ip6.code ? 6 : 4\n      }\n    }\n\n    if (family == null || transport == null || host == null || port == null) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".')\n    }\n\n    const opts: MultiaddrObject = {\n      family,\n      host,\n      transport,\n      port\n    }\n\n    return opts\n  }\n\n  protos (): Protocol[] {\n    return this.#tuples.map(([code]) => Object.assign({}, getProtocol(code)))\n  }\n\n  protoCodes (): number[] {\n    return this.#tuples.map(([code]) => code)\n  }\n\n  protoNames (): string[] {\n    return this.#tuples.map(([code]) => getProtocol(code).name)\n  }\n\n  tuples (): Array<[number, Uint8Array?]> {\n    return this.#tuples.map(([code, value]) => {\n      if (value == null) {\n        return [code]\n      }\n\n      return [code, value]\n    })\n  }\n\n  stringTuples (): Array<[number, string?]> {\n    return this.#stringTuples.map(([code, value]) => {\n      if (value == null) {\n        return [code]\n      }\n\n      return [code, value]\n    })\n  }\n\n  encapsulate (addr: MultiaddrInput): Multiaddr {\n    addr = new Multiaddr(addr)\n    return new Multiaddr(this.toString() + addr.toString())\n  }\n\n  decapsulate (addr: Multiaddr | string): Multiaddr {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`)\n    }\n    return new Multiaddr(s.slice(0, i))\n  }\n\n  decapsulateCode (code: number): Multiaddr {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  getPeerId (): string | null {\n    try {\n      let tuples: Array<[number, string | undefined]> = []\n\n      this.stringTuples().forEach(([code, name]) => {\n        if (code === names.p2p.code) {\n          tuples.push([code, name])\n        }\n\n        // if this is a p2p-circuit address, return the target peer id if present\n        // not the peer id of the relay\n        if (code === names['p2p-circuit'].code) {\n          tuples = []\n        }\n      })\n\n      // Get the last ipfs tuple ['p2p', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  getPath (): string | null {\n    return this.#path\n  }\n\n  equals (addr: { bytes: Uint8Array }): boolean {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  async resolve (options?: ResolveOptions): Promise<MultiaddrInterface[]> {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (resolver == null) {\n      throw new NoAvailableResolverError(`no available resolver for ${resolvableProto.name}`)\n    }\n\n    const result = await resolver(this, options)\n\n    return result.map(str => multiaddr(str))\n  }\n\n  nodeAddress (): NodeAddress {\n    const options = this.toOptions()\n\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`)\n    }\n\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    }\n  }\n\n  isThinWaistAddress (addr?: Multiaddr): boolean {\n    const protos = (addr ?? this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n   * ```\n   */\n  [inspect] (): string {\n    return `Multiaddr(${this.#string})`\n  }\n}\n"],"mappings":"AAAA;AACA,SAASA,SAAS,QAAQ,2BAA2B;AACrD,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,MAAM,IAAIC,gBAAgB,QAAQ,oBAAoB;AAC/D,SAASC,QAAQ,IAAIC,kBAAkB,QAAQ,uBAAuB;AACtE,SAASC,qBAAqB,EAAEC,sBAAsB,EAAuBC,aAAa,QAAQ,YAAY;AAC9G,SAASC,WAAW,EAAEC,KAAK,QAAQ,sBAAsB;AACzD,SAASC,WAAW,EAAEC,SAAS,EAAEC,SAAS,QAAQ,YAAY;AAG9D,MAAMC,OAAO,GAAGC,MAAM,CAACC,GAAG,CAAC,4BAA4B,CAAC;AACxD,OAAO,MAAMC,MAAM,GAAGF,MAAM,CAACC,GAAG,CAAC,sCAAsC,CAAC;AAExE,MAAME,SAAS,GAAG,CAChBT,WAAW,CAAC,KAAK,CAAC,CAACU,IAAI,EACvBV,WAAW,CAAC,MAAM,CAAC,CAACU,IAAI,EACxBV,WAAW,CAAC,MAAM,CAAC,CAACU,IAAI,EACxBV,WAAW,CAAC,SAAS,CAAC,CAACU,IAAI,CAC5B;AAED,MAAMC,wBAAyB,SAAQC,KAAK;EAC1CC,YAAaC,OAAO,GAAG,uBAAuB;IAC5C,KAAK,CAACA,OAAO,CAAC;IACd,IAAI,CAACC,IAAI,GAAG,0BAA0B;EACxC;;AAGF;;;AAGA,OAAM,MAAOC,SAAS;EACbC,KAAK;EACH,CAAAC,MAAO;EACP,CAAAC,MAAO;EACP,CAAAC,YAAa;EACb,CAAAC,IAAK;EAEd,CAACb,MAAM,IAAa,IAAI;EAExBK,YAAaS,IAAqB;IAChC;IACA,IAAIA,IAAI,IAAI,IAAI,EAAE;MAChBA,IAAI,GAAG,EAAE;IACX;IAEA,IAAIC,KAAqB;IACzB,IAAID,IAAI,YAAYE,UAAU,EAAE;MAC9BD,KAAK,GAAG1B,qBAAqB,CAACyB,IAAI,CAAC;IACrC,CAAC,MAAM,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MACnC,IAAIA,IAAI,CAACG,MAAM,GAAG,CAAC,IAAIH,IAAI,CAACI,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QAC7C,MAAM,IAAId,KAAK,CAAC,cAAcU,IAAI,yBAAyB,CAAC;MAC9D;MACAC,KAAK,GAAGzB,sBAAsB,CAACwB,IAAI,CAAC;IACtC,CAAC,MAAM,IAAIpB,WAAW,CAACoB,IAAI,CAAC,EAAE;MAAE;MAC9BC,KAAK,GAAG1B,qBAAqB,CAACyB,IAAI,CAACL,KAAK,CAAC;IAC3C,CAAC,MAAM;MACL,MAAM,IAAIL,KAAK,CAAC,qDAAqD,CAAC;IACxE;IAEA,IAAI,CAACK,KAAK,GAAGM,KAAK,CAACN,KAAK;IACxB,IAAI,CAAC,CAAAC,MAAO,GAAGK,KAAK,CAACL,MAAM;IAC3B,IAAI,CAAC,CAAAC,MAAO,GAAGI,KAAK,CAACJ,MAAM;IAC3B,IAAI,CAAC,CAAAC,YAAa,GAAGG,KAAK,CAACH,YAAY;IACvC,IAAI,CAAC,CAAAC,IAAK,GAAGE,KAAK,CAACF,IAAI;EACzB;EAEA1B,QAAQA,CAAA;IACN,OAAO,IAAI,CAAC,CAAAuB,MAAO;EACrB;EAEAS,MAAMA,CAAA;IACJ,OAAO,IAAI,CAAChC,QAAQ,EAAE;EACxB;EAEAiC,SAASA,CAAA;IACP,IAAIC,MAAyB;IAC7B,IAAIC,SAAoC;IACxC,IAAIC,IAAwB;IAC5B,IAAIC,IAAwB;IAC5B,IAAIC,IAAI,GAAG,EAAE;IAEb,MAAMC,GAAG,GAAGlC,WAAW,CAAC,KAAK,CAAC;IAC9B,MAAMmC,GAAG,GAAGnC,WAAW,CAAC,KAAK,CAAC;IAC9B,MAAMoC,GAAG,GAAGpC,WAAW,CAAC,KAAK,CAAC;IAC9B,MAAMqC,GAAG,GAAGrC,WAAW,CAAC,KAAK,CAAC;IAC9B,MAAMsC,IAAI,GAAGtC,WAAW,CAAC,MAAM,CAAC;IAChC,MAAMuC,OAAO,GAAGvC,WAAW,CAAC,SAAS,CAAC;IAEtC,KAAK,MAAM,CAACU,IAAI,EAAE8B,KAAK,CAAC,IAAI,IAAI,CAACpB,YAAY,EAAE,EAAE;MAC/C,IAAIV,IAAI,KAAK6B,OAAO,CAAC7B,IAAI,EAAE;QACzBuB,IAAI,GAAG,IAAIO,KAAK,IAAI,EAAE,EAAE;MAC1B;MAEA;MACA,IAAI/B,SAAS,CAACgC,QAAQ,CAAC/B,IAAI,CAAC,EAAE;QAC5BoB,SAAS,GAAGI,GAAG,CAACnB,IAAI,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK;QAC9CiB,IAAI,GAAG,GAAG;QACVD,IAAI,GAAG,GAAGS,KAAK,IAAI,EAAE,GAAGP,IAAI,EAAE;QAC9BJ,MAAM,GAAGnB,IAAI,KAAK4B,IAAI,CAAC5B,IAAI,GAAG,CAAC,GAAG,CAAC;MACrC;MAEA,IAAIA,IAAI,KAAKwB,GAAG,CAACxB,IAAI,IAAIA,IAAI,KAAKyB,GAAG,CAACzB,IAAI,EAAE;QAC1CoB,SAAS,GAAG9B,WAAW,CAACU,IAAI,CAAC,CAACK,IAAI,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK;QAC5DiB,IAAI,GAAGU,QAAQ,CAACF,KAAK,IAAI,EAAE,CAAC;MAC9B;MAEA,IAAI9B,IAAI,KAAK0B,GAAG,CAAC1B,IAAI,IAAIA,IAAI,KAAK2B,GAAG,CAAC3B,IAAI,EAAE;QAC1CoB,SAAS,GAAG9B,WAAW,CAACU,IAAI,CAAC,CAACK,IAAI,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK;QAC5DgB,IAAI,GAAG,GAAGS,KAAK,IAAI,EAAE,GAAGP,IAAI,EAAE;QAC9BJ,MAAM,GAAGnB,IAAI,KAAK2B,GAAG,CAAC3B,IAAI,GAAG,CAAC,GAAG,CAAC;MACpC;IACF;IAEA,IAAImB,MAAM,IAAI,IAAI,IAAIC,SAAS,IAAI,IAAI,IAAIC,IAAI,IAAI,IAAI,IAAIC,IAAI,IAAI,IAAI,EAAE;MACvE,MAAM,IAAIpB,KAAK,CAAC,qGAAqG,CAAC;IACxH;IAEA,MAAM+B,IAAI,GAAoB;MAC5Bd,MAAM;MACNE,IAAI;MACJD,SAAS;MACTE;KACD;IAED,OAAOW,IAAI;EACb;EAEAC,MAAMA,CAAA;IACJ,OAAO,IAAI,CAAC,CAAAzB,MAAO,CAAC0B,GAAG,CAAC,CAAC,CAACnC,IAAI,CAAC,KAAKoC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE/C,WAAW,CAACU,IAAI,CAAC,CAAC,CAAC;EAC3E;EAEAsC,UAAUA,CAAA;IACR,OAAO,IAAI,CAAC,CAAA7B,MAAO,CAAC0B,GAAG,CAAC,CAAC,CAACnC,IAAI,CAAC,KAAKA,IAAI,CAAC;EAC3C;EAEAuC,UAAUA,CAAA;IACR,OAAO,IAAI,CAAC,CAAA9B,MAAO,CAAC0B,GAAG,CAAC,CAAC,CAACnC,IAAI,CAAC,KAAKV,WAAW,CAACU,IAAI,CAAC,CAACK,IAAI,CAAC;EAC7D;EAEAI,MAAMA,CAAA;IACJ,OAAO,IAAI,CAAC,CAAAA,MAAO,CAAC0B,GAAG,CAAC,CAAC,CAACnC,IAAI,EAAE8B,KAAK,CAAC,KAAI;MACxC,IAAIA,KAAK,IAAI,IAAI,EAAE;QACjB,OAAO,CAAC9B,IAAI,CAAC;MACf;MAEA,OAAO,CAACA,IAAI,EAAE8B,KAAK,CAAC;IACtB,CAAC,CAAC;EACJ;EAEApB,YAAYA,CAAA;IACV,OAAO,IAAI,CAAC,CAAAA,YAAa,CAACyB,GAAG,CAAC,CAAC,CAACnC,IAAI,EAAE8B,KAAK,CAAC,KAAI;MAC9C,IAAIA,KAAK,IAAI,IAAI,EAAE;QACjB,OAAO,CAAC9B,IAAI,CAAC;MACf;MAEA,OAAO,CAACA,IAAI,EAAE8B,KAAK,CAAC;IACtB,CAAC,CAAC;EACJ;EAEAU,WAAWA,CAAE5B,IAAoB;IAC/BA,IAAI,GAAG,IAAIN,SAAS,CAACM,IAAI,CAAC;IAC1B,OAAO,IAAIN,SAAS,CAAC,IAAI,CAACrB,QAAQ,EAAE,GAAG2B,IAAI,CAAC3B,QAAQ,EAAE,CAAC;EACzD;EAEAwD,WAAWA,CAAE7B,IAAwB;IACnC,MAAM8B,UAAU,GAAG9B,IAAI,CAAC3B,QAAQ,EAAE;IAClC,MAAM0D,CAAC,GAAG,IAAI,CAAC1D,QAAQ,EAAE;IACzB,MAAM2D,CAAC,GAAGD,CAAC,CAACE,WAAW,CAACH,UAAU,CAAC;IACnC,IAAIE,CAAC,GAAG,CAAC,EAAE;MACT,MAAM,IAAI1C,KAAK,CAAC,WAAW,IAAI,CAACjB,QAAQ,EAAE,iCAAiC2B,IAAI,CAAC3B,QAAQ,EAAE,EAAE,CAAC;IAC/F;IACA,OAAO,IAAIqB,SAAS,CAACqC,CAAC,CAACG,KAAK,CAAC,CAAC,EAAEF,CAAC,CAAC,CAAC;EACrC;EAEAG,eAAeA,CAAE/C,IAAY;IAC3B,MAAMS,MAAM,GAAG,IAAI,CAACA,MAAM,EAAE;IAC5B,KAAK,IAAImC,CAAC,GAAGnC,MAAM,CAACM,MAAM,GAAG,CAAC,EAAE6B,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3C,IAAInC,MAAM,CAACmC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK5C,IAAI,EAAE;QACzB,OAAO,IAAIM,SAAS,CAACjB,aAAa,CAACoB,MAAM,CAACqC,KAAK,CAAC,CAAC,EAAEF,CAAC,CAAC,CAAC,CAAC;MACzD;IACF;IACA,OAAO,IAAI;EACb;EAEAI,SAASA,CAAA;IACP,IAAI;MACF,IAAIvC,MAAM,GAAwC,EAAE;MAEpD,IAAI,CAACC,YAAY,EAAE,CAACuC,OAAO,CAAC,CAAC,CAACjD,IAAI,EAAEK,IAAI,CAAC,KAAI;QAC3C,IAAIL,IAAI,KAAKT,KAAK,CAAC2D,GAAG,CAAClD,IAAI,EAAE;UAC3BS,MAAM,CAAC0C,IAAI,CAAC,CAACnD,IAAI,EAAEK,IAAI,CAAC,CAAC;QAC3B;QAEA;QACA;QACA,IAAIL,IAAI,KAAKT,KAAK,CAAC,aAAa,CAAC,CAACS,IAAI,EAAE;UACtCS,MAAM,GAAG,EAAE;QACb;MACF,CAAC,CAAC;MAEF;MACA,MAAM2C,KAAK,GAAG3C,MAAM,CAAC4C,GAAG,EAAE;MAC1B,IAAID,KAAK,GAAG,CAAC,CAAC,IAAI,IAAI,EAAE;QACtB,MAAME,SAAS,GAAGF,KAAK,CAAC,CAAC,CAAC;QAE1B;QACA;QACA,IAAIE,SAAS,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIA,SAAS,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;UAChD,OAAOpE,kBAAkB,CAACL,SAAS,CAAC0E,MAAM,CAAC,IAAID,SAAS,EAAE,CAAC,EAAE,WAAW,CAAC;QAC3E;QAEA;QACA,OAAOpE,kBAAkB,CAACJ,GAAG,CAAC0E,KAAK,CAACF,SAAS,CAAC,CAACG,SAAS,CAAClD,KAAK,EAAE,WAAW,CAAC;MAC9E;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOmD,CAAC,EAAE;MACV,OAAO,IAAI;IACb;EACF;EAEAC,OAAOA,CAAA;IACL,OAAO,IAAI,CAAC,CAAAhD,IAAK;EACnB;EAEA5B,MAAMA,CAAE6B,IAA2B;IACjC,OAAO5B,gBAAgB,CAAC,IAAI,CAACuB,KAAK,EAAEK,IAAI,CAACL,KAAK,CAAC;EACjD;EAEA,MAAMqD,OAAOA,CAAEC,OAAwB;IACrC,MAAMC,eAAe,GAAG,IAAI,CAAC5B,MAAM,EAAE,CAAC6B,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,UAAU,CAAC;IAE/D;IACA,IAAIH,eAAe,IAAI,IAAI,EAAE;MAC3B,OAAO,CAAC,IAAI,CAAC;IACf;IAEA,MAAMI,QAAQ,GAAGxE,SAAS,CAACyE,GAAG,CAACL,eAAe,CAACzD,IAAI,CAAC;IACpD,IAAI6D,QAAQ,IAAI,IAAI,EAAE;MACpB,MAAM,IAAIjE,wBAAwB,CAAC,6BAA6B6D,eAAe,CAACzD,IAAI,EAAE,CAAC;IACzF;IAEA,MAAM+D,MAAM,GAAG,MAAMF,QAAQ,CAAC,IAAI,EAAEL,OAAO,CAAC;IAE5C,OAAOO,MAAM,CAACjC,GAAG,CAACkC,GAAG,IAAI5E,SAAS,CAAC4E,GAAG,CAAC,CAAC;EAC1C;EAEAC,WAAWA,CAAA;IACT,MAAMT,OAAO,GAAG,IAAI,CAAC3C,SAAS,EAAE;IAEhC,IAAI2C,OAAO,CAACzC,SAAS,KAAK,KAAK,IAAIyC,OAAO,CAACzC,SAAS,KAAK,KAAK,EAAE;MAC9D,MAAM,IAAIlB,KAAK,CAAC,gEAAgE2D,OAAO,CAACzC,SAAS,uDAAuD,CAAC;IAC3J;IAEA,OAAO;MACLD,MAAM,EAAE0C,OAAO,CAAC1C,MAAM;MACtBoD,OAAO,EAAEV,OAAO,CAACxC,IAAI;MACrBC,IAAI,EAAEuC,OAAO,CAACvC;KACf;EACH;EAEAkD,kBAAkBA,CAAE5D,IAAgB;IAClC,MAAMsB,MAAM,GAAG,CAACtB,IAAI,IAAI,IAAI,EAAEsB,MAAM,EAAE;IAEtC,IAAIA,MAAM,CAACnB,MAAM,KAAK,CAAC,EAAE;MACvB,OAAO,KAAK;IACd;IAEA,IAAImB,MAAM,CAAC,CAAC,CAAC,CAAClC,IAAI,KAAK,CAAC,IAAIkC,MAAM,CAAC,CAAC,CAAC,CAAClC,IAAI,KAAK,EAAE,EAAE;MACjD,OAAO,KAAK;IACd;IACA,IAAIkC,MAAM,CAAC,CAAC,CAAC,CAAClC,IAAI,KAAK,CAAC,IAAIkC,MAAM,CAAC,CAAC,CAAC,CAAClC,IAAI,KAAK,GAAG,EAAE;MAClD,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;EAYA,CAACL,OAAO,IAAC;IACP,OAAO,aAAa,IAAI,CAAC,CAAAa,MAAO,GAAG;EACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}