{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { decodeNode } from './pb-decode.js';\nimport { encodeNode } from './pb-encode.js';\nimport { prepare, validate, createNode, createLink, toByteView } from './util.js';\n\n/**\n * @template T\n * @typedef {import('multiformats/codecs/interface').ByteView<T>} ByteView\n */\n\n/**\n * @template T\n * @typedef {import('multiformats/codecs/interface').ArrayBufferView<T>} ArrayBufferView\n */\n\n/**\n * @typedef {import('./interface.js').PBLink} PBLink\n * @typedef {import('./interface.js').PBNode} PBNode\n */\n\nexport const name = 'dag-pb';\nexport const code = 0x70;\n\n/**\n * @param {PBNode} node\n * @returns {ByteView<PBNode>}\n */\nexport function encode(node) {\n  validate(node);\n  const pbn = {};\n  if (node.Links) {\n    pbn.Links = node.Links.map(l => {\n      const link = {};\n      if (l.Hash) {\n        link.Hash = l.Hash.bytes; // cid -> bytes\n      }\n      if (l.Name !== undefined) {\n        link.Name = l.Name;\n      }\n      if (l.Tsize !== undefined) {\n        link.Tsize = l.Tsize;\n      }\n      return link;\n    });\n  }\n  if (node.Data) {\n    pbn.Data = node.Data;\n  }\n  return encodeNode(pbn);\n}\n\n/**\n * @param {ByteView<PBNode> | ArrayBufferView<PBNode>} bytes\n * @returns {PBNode}\n */\nexport function decode(bytes) {\n  const buf = toByteView(bytes);\n  const pbn = decodeNode(buf);\n  const node = {};\n  if (pbn.Data) {\n    node.Data = pbn.Data;\n  }\n  if (pbn.Links) {\n    node.Links = pbn.Links.map(l => {\n      const link = {};\n      try {\n        link.Hash = CID.decode(l.Hash);\n      } catch {\n        // ignore parse fail\n      }\n      if (!link.Hash) {\n        throw new Error('Invalid Hash field found in link, expected CID');\n      }\n      if (l.Name !== undefined) {\n        link.Name = l.Name;\n      }\n      if (l.Tsize !== undefined) {\n        link.Tsize = l.Tsize;\n      }\n      return link;\n    });\n  }\n  return node;\n}\nexport { prepare, validate, createNode, createLink };","map":{"version":3,"names":["CID","decodeNode","encodeNode","prepare","validate","createNode","createLink","toByteView","name","code","encode","node","pbn","Links","map","l","link","Hash","bytes","Name","undefined","Tsize","Data","decode","buf","Error"],"sources":["C:/Users/yassi/OneDrive/Desktop/tp_9/Certification-de-Diplomes/node_modules/@ipld/dag-pb/src/index.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { decodeNode } from './pb-decode.js'\nimport { encodeNode } from './pb-encode.js'\nimport { prepare, validate, createNode, createLink, toByteView } from './util.js'\n\n/**\n * @template T\n * @typedef {import('multiformats/codecs/interface').ByteView<T>} ByteView\n */\n\n/**\n * @template T\n * @typedef {import('multiformats/codecs/interface').ArrayBufferView<T>} ArrayBufferView\n */\n\n/**\n * @typedef {import('./interface.js').PBLink} PBLink\n * @typedef {import('./interface.js').PBNode} PBNode\n */\n\nexport const name = 'dag-pb'\nexport const code = 0x70\n\n/**\n * @param {PBNode} node\n * @returns {ByteView<PBNode>}\n */\nexport function encode (node) {\n  validate(node)\n\n  const pbn = {}\n  if (node.Links) {\n    pbn.Links = node.Links.map((l) => {\n      const link = {}\n      if (l.Hash) {\n        link.Hash = l.Hash.bytes // cid -> bytes\n      }\n      if (l.Name !== undefined) {\n        link.Name = l.Name\n      }\n      if (l.Tsize !== undefined) {\n        link.Tsize = l.Tsize\n      }\n      return link\n    })\n  }\n  if (node.Data) {\n    pbn.Data = node.Data\n  }\n\n  return encodeNode(pbn)\n}\n\n/**\n * @param {ByteView<PBNode> | ArrayBufferView<PBNode>} bytes\n * @returns {PBNode}\n */\nexport function decode (bytes) {\n  const buf = toByteView(bytes)\n  const pbn = decodeNode(buf)\n\n  const node = {}\n\n  if (pbn.Data) {\n    node.Data = pbn.Data\n  }\n\n  if (pbn.Links) {\n    node.Links = pbn.Links.map((l) => {\n      const link = {}\n      try {\n        link.Hash = CID.decode(l.Hash)\n      } catch {\n        // ignore parse fail\n      }\n      if (!link.Hash) {\n        throw new Error('Invalid Hash field found in link, expected CID')\n      }\n      if (l.Name !== undefined) {\n        link.Name = l.Name\n      }\n      if (l.Tsize !== undefined) {\n        link.Tsize = l.Tsize\n      }\n      return link\n    })\n  }\n\n  return node\n}\n\nexport { prepare, validate, createNode, createLink }\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAAEC,UAAU,QAAQ,WAAW;;AAEjF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,IAAI,GAAG,QAAQ;AAC5B,OAAO,MAAMC,IAAI,GAAG,IAAI;;AAExB;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAAEC,IAAI,EAAE;EAC5BP,QAAQ,CAACO,IAAI,CAAC;EAEd,MAAMC,GAAG,GAAG,CAAC,CAAC;EACd,IAAID,IAAI,CAACE,KAAK,EAAE;IACdD,GAAG,CAACC,KAAK,GAAGF,IAAI,CAACE,KAAK,CAACC,GAAG,CAAEC,CAAC,IAAK;MAChC,MAAMC,IAAI,GAAG,CAAC,CAAC;MACf,IAAID,CAAC,CAACE,IAAI,EAAE;QACVD,IAAI,CAACC,IAAI,GAAGF,CAAC,CAACE,IAAI,CAACC,KAAK,EAAC;MAC3B;MACA,IAAIH,CAAC,CAACI,IAAI,KAAKC,SAAS,EAAE;QACxBJ,IAAI,CAACG,IAAI,GAAGJ,CAAC,CAACI,IAAI;MACpB;MACA,IAAIJ,CAAC,CAACM,KAAK,KAAKD,SAAS,EAAE;QACzBJ,IAAI,CAACK,KAAK,GAAGN,CAAC,CAACM,KAAK;MACtB;MACA,OAAOL,IAAI;IACb,CAAC,CAAC;EACJ;EACA,IAAIL,IAAI,CAACW,IAAI,EAAE;IACbV,GAAG,CAACU,IAAI,GAAGX,IAAI,CAACW,IAAI;EACtB;EAEA,OAAOpB,UAAU,CAACU,GAAG,CAAC;AACxB;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASW,MAAMA,CAAEL,KAAK,EAAE;EAC7B,MAAMM,GAAG,GAAGjB,UAAU,CAACW,KAAK,CAAC;EAC7B,MAAMN,GAAG,GAAGX,UAAU,CAACuB,GAAG,CAAC;EAE3B,MAAMb,IAAI,GAAG,CAAC,CAAC;EAEf,IAAIC,GAAG,CAACU,IAAI,EAAE;IACZX,IAAI,CAACW,IAAI,GAAGV,GAAG,CAACU,IAAI;EACtB;EAEA,IAAIV,GAAG,CAACC,KAAK,EAAE;IACbF,IAAI,CAACE,KAAK,GAAGD,GAAG,CAACC,KAAK,CAACC,GAAG,CAAEC,CAAC,IAAK;MAChC,MAAMC,IAAI,GAAG,CAAC,CAAC;MACf,IAAI;QACFA,IAAI,CAACC,IAAI,GAAGjB,GAAG,CAACuB,MAAM,CAACR,CAAC,CAACE,IAAI,CAAC;MAChC,CAAC,CAAC,MAAM;QACN;MAAA;MAEF,IAAI,CAACD,IAAI,CAACC,IAAI,EAAE;QACd,MAAM,IAAIQ,KAAK,CAAC,gDAAgD,CAAC;MACnE;MACA,IAAIV,CAAC,CAACI,IAAI,KAAKC,SAAS,EAAE;QACxBJ,IAAI,CAACG,IAAI,GAAGJ,CAAC,CAACI,IAAI;MACpB;MACA,IAAIJ,CAAC,CAACM,KAAK,KAAKD,SAAS,EAAE;QACzBJ,IAAI,CAACK,KAAK,GAAGN,CAAC,CAACM,KAAK;MACtB;MACA,OAAOL,IAAI;IACb,CAAC,CAAC;EACJ;EAEA,OAAOL,IAAI;AACb;AAEA,SAASR,OAAO,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}