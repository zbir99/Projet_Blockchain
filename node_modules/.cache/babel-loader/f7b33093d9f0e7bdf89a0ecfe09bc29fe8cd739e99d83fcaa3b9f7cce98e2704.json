{"ast":null,"code":"import { create } from 'ipfs-http-client';\n\n/**\n * Utilitaire pour interagir avec IPFS local\n */\n\n// Fonction pour télécharger un fichier sur IPFS en utilisant directement l'API HTTP\nasync function uploadViaFetch(file) {\n  const formData = new FormData();\n  formData.append('file', file);\n  const response = await fetch('http://localhost:5001/api/v0/add?pin=true', {\n    method: 'POST',\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error(`Erreur HTTP: ${response.status}`);\n  }\n  const data = await response.json();\n  return data.Hash;\n}\n\n/**\n * Télécharge un fichier sur IPFS\n * @param {File} file - Le fichier à télécharger\n * @returns {Promise<string>} - Le hash IPFS du fichier téléchargé\n */\nexport const uploadToIPFS = async file => {\n  try {\n    // Vérification que le fichier est valide\n    if (!file) {\n      throw new Error('Aucun fichier fourni');\n    }\n    console.log('Début du téléchargement sur IPFS...');\n\n    // Méthode directe avec fetch\n    const hash = await uploadViaFetch(file);\n    console.log(`Fichier \"${file.name}\" téléchargé sur IPFS avec succès`);\n    console.log(`Hash IPFS: ${hash}`);\n    return hash;\n  } catch (error) {\n    console.error('Erreur lors du téléchargement sur IPFS:', error);\n    throw error;\n  }\n};\n\n/**\n * Génère l'URL pour accéder au fichier sur la passerelle IPFS locale\n * @param {string} ipfsHash - Le hash IPFS du fichier\n * @returns {string} - L'URL complète pour accéder au fichier\n */\nexport const getIPFSGatewayURL = ipfsHash => {\n  if (!ipfsHash) return '';\n  return `http://localhost:8080/ipfs/${ipfsHash}`;\n};\nexport default {\n  uploadToIPFS,\n  getIPFSGatewayURL\n};","map":{"version":3,"names":["create","uploadViaFetch","file","formData","FormData","append","response","fetch","method","body","ok","Error","status","data","json","Hash","uploadToIPFS","console","log","hash","name","error","getIPFSGatewayURL","ipfsHash"],"sources":["C:/Users/yassi/OneDrive/Desktop/tp_9/Certification-de-Diplomes/src/utils/ipfs.js"],"sourcesContent":["import { create } from 'ipfs-http-client';\n\n/**\n * Utilitaire pour interagir avec IPFS local\n */\n\n// Fonction pour télécharger un fichier sur IPFS en utilisant directement l'API HTTP\nasync function uploadViaFetch(file) {\n  const formData = new FormData();\n  formData.append('file', file);\n  \n  const response = await fetch('http://localhost:5001/api/v0/add?pin=true', {\n    method: 'POST',\n    body: formData\n  });\n  \n  if (!response.ok) {\n    throw new Error(`Erreur HTTP: ${response.status}`);\n  }\n  \n  const data = await response.json();\n  return data.Hash;\n}\n\n/**\n * Télécharge un fichier sur IPFS\n * @param {File} file - Le fichier à télécharger\n * @returns {Promise<string>} - Le hash IPFS du fichier téléchargé\n */\nexport const uploadToIPFS = async (file) => {\n  try {\n    // Vérification que le fichier est valide\n    if (!file) {\n      throw new Error('Aucun fichier fourni');\n    }\n    \n    console.log('Début du téléchargement sur IPFS...');\n    \n    // Méthode directe avec fetch\n    const hash = await uploadViaFetch(file);\n    \n    console.log(`Fichier \"${file.name}\" téléchargé sur IPFS avec succès`);\n    console.log(`Hash IPFS: ${hash}`);\n    \n    return hash;\n  } catch (error) {\n    console.error('Erreur lors du téléchargement sur IPFS:', error);\n    throw error;\n  }\n};\n\n/**\n * Génère l'URL pour accéder au fichier sur la passerelle IPFS locale\n * @param {string} ipfsHash - Le hash IPFS du fichier\n * @returns {string} - L'URL complète pour accéder au fichier\n */\nexport const getIPFSGatewayURL = (ipfsHash) => {\n  if (!ipfsHash) return '';\n  return `http://localhost:8080/ipfs/${ipfsHash}`;\n};\n\nexport default {\n  uploadToIPFS,\n  getIPFSGatewayURL\n};\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,kBAAkB;;AAEzC;AACA;AACA;;AAEA;AACA,eAAeC,cAAcA,CAACC,IAAI,EAAE;EAClC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EAE7B,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;IACxEC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEN;EACR,CAAC,CAAC;EAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,gBAAgBL,QAAQ,CAACM,MAAM,EAAE,CAAC;EACpD;EAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACE,IAAI;AAClB;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOd,IAAI,IAAK;EAC1C,IAAI;IACF;IACA,IAAI,CAACA,IAAI,EAAE;MACT,MAAM,IAAIS,KAAK,CAAC,sBAAsB,CAAC;IACzC;IAEAM,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;;IAElD;IACA,MAAMC,IAAI,GAAG,MAAMlB,cAAc,CAACC,IAAI,CAAC;IAEvCe,OAAO,CAACC,GAAG,CAAC,YAAYhB,IAAI,CAACkB,IAAI,mCAAmC,CAAC;IACrEH,OAAO,CAACC,GAAG,CAAC,cAAcC,IAAI,EAAE,CAAC;IAEjC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAC/D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAIC,QAAQ,IAAK;EAC7C,IAAI,CAACA,QAAQ,EAAE,OAAO,EAAE;EACxB,OAAO,8BAA8BA,QAAQ,EAAE;AACjD,CAAC;AAED,eAAe;EACbP,YAAY;EACZM;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}