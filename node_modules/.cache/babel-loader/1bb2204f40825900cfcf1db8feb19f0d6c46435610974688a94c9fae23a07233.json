{"ast":null,"code":"/* eslint-disable no-fallthrough */\nimport { allocUnsafe } from 'uint8arrays/alloc';\nconst N1 = Math.pow(2, 7);\nconst N2 = Math.pow(2, 14);\nconst N3 = Math.pow(2, 21);\nconst N4 = Math.pow(2, 28);\nconst N5 = Math.pow(2, 35);\nconst N6 = Math.pow(2, 42);\nconst N7 = Math.pow(2, 49);\n/** Most significant bit of a byte */\nconst MSB = 0x80;\n/** Rest of the bits in a byte */\nconst REST = 0x7f;\nexport function encodingLength(value) {\n  if (value < N1) {\n    return 1;\n  }\n  if (value < N2) {\n    return 2;\n  }\n  if (value < N3) {\n    return 3;\n  }\n  if (value < N4) {\n    return 4;\n  }\n  if (value < N5) {\n    return 5;\n  }\n  if (value < N6) {\n    return 6;\n  }\n  if (value < N7) {\n    return 7;\n  }\n  if (Number.MAX_SAFE_INTEGER != null && value > Number.MAX_SAFE_INTEGER) {\n    throw new RangeError('Could not encode varint');\n  }\n  return 8;\n}\nexport function encodeUint8Array(value, buf, offset = 0) {\n  switch (encodingLength(value)) {\n    case 8:\n      {\n        buf[offset++] = value & 0xFF | MSB;\n        value /= 128;\n      }\n    case 7:\n      {\n        buf[offset++] = value & 0xFF | MSB;\n        value /= 128;\n      }\n    case 6:\n      {\n        buf[offset++] = value & 0xFF | MSB;\n        value /= 128;\n      }\n    case 5:\n      {\n        buf[offset++] = value & 0xFF | MSB;\n        value /= 128;\n      }\n    case 4:\n      {\n        buf[offset++] = value & 0xFF | MSB;\n        value >>>= 7;\n      }\n    case 3:\n      {\n        buf[offset++] = value & 0xFF | MSB;\n        value >>>= 7;\n      }\n    case 2:\n      {\n        buf[offset++] = value & 0xFF | MSB;\n        value >>>= 7;\n      }\n    case 1:\n      {\n        buf[offset++] = value & 0xFF;\n        value >>>= 7;\n        break;\n      }\n    default:\n      throw new Error('unreachable');\n  }\n  return buf;\n}\nexport function encodeUint8ArrayList(value, buf, offset = 0) {\n  switch (encodingLength(value)) {\n    case 8:\n      {\n        buf.set(offset++, value & 0xFF | MSB);\n        value /= 128;\n      }\n    case 7:\n      {\n        buf.set(offset++, value & 0xFF | MSB);\n        value /= 128;\n      }\n    case 6:\n      {\n        buf.set(offset++, value & 0xFF | MSB);\n        value /= 128;\n      }\n    case 5:\n      {\n        buf.set(offset++, value & 0xFF | MSB);\n        value /= 128;\n      }\n    case 4:\n      {\n        buf.set(offset++, value & 0xFF | MSB);\n        value >>>= 7;\n      }\n    case 3:\n      {\n        buf.set(offset++, value & 0xFF | MSB);\n        value >>>= 7;\n      }\n    case 2:\n      {\n        buf.set(offset++, value & 0xFF | MSB);\n        value >>>= 7;\n      }\n    case 1:\n      {\n        buf.set(offset++, value & 0xFF);\n        value >>>= 7;\n        break;\n      }\n    default:\n      throw new Error('unreachable');\n  }\n  return buf;\n}\nexport function decodeUint8Array(buf, offset) {\n  let b = buf[offset];\n  let res = 0;\n  res += b & REST;\n  if (b < MSB) {\n    return res;\n  }\n  b = buf[offset + 1];\n  res += (b & REST) << 7;\n  if (b < MSB) {\n    return res;\n  }\n  b = buf[offset + 2];\n  res += (b & REST) << 14;\n  if (b < MSB) {\n    return res;\n  }\n  b = buf[offset + 3];\n  res += (b & REST) << 21;\n  if (b < MSB) {\n    return res;\n  }\n  b = buf[offset + 4];\n  res += (b & REST) * N4;\n  if (b < MSB) {\n    return res;\n  }\n  b = buf[offset + 5];\n  res += (b & REST) * N5;\n  if (b < MSB) {\n    return res;\n  }\n  b = buf[offset + 6];\n  res += (b & REST) * N6;\n  if (b < MSB) {\n    return res;\n  }\n  b = buf[offset + 7];\n  res += (b & REST) * N7;\n  if (b < MSB) {\n    return res;\n  }\n  throw new RangeError('Could not decode varint');\n}\nexport function decodeUint8ArrayList(buf, offset) {\n  let b = buf.get(offset);\n  let res = 0;\n  res += b & REST;\n  if (b < MSB) {\n    return res;\n  }\n  b = buf.get(offset + 1);\n  res += (b & REST) << 7;\n  if (b < MSB) {\n    return res;\n  }\n  b = buf.get(offset + 2);\n  res += (b & REST) << 14;\n  if (b < MSB) {\n    return res;\n  }\n  b = buf.get(offset + 3);\n  res += (b & REST) << 21;\n  if (b < MSB) {\n    return res;\n  }\n  b = buf.get(offset + 4);\n  res += (b & REST) * N4;\n  if (b < MSB) {\n    return res;\n  }\n  b = buf.get(offset + 5);\n  res += (b & REST) * N5;\n  if (b < MSB) {\n    return res;\n  }\n  b = buf.get(offset + 6);\n  res += (b & REST) * N6;\n  if (b < MSB) {\n    return res;\n  }\n  b = buf.get(offset + 7);\n  res += (b & REST) * N7;\n  if (b < MSB) {\n    return res;\n  }\n  throw new RangeError('Could not decode varint');\n}\nexport function encode(value, buf, offset = 0) {\n  if (buf == null) {\n    buf = allocUnsafe(encodingLength(value));\n  }\n  if (buf instanceof Uint8Array) {\n    return encodeUint8Array(value, buf, offset);\n  } else {\n    return encodeUint8ArrayList(value, buf, offset);\n  }\n}\nexport function decode(buf, offset = 0) {\n  if (buf instanceof Uint8Array) {\n    return decodeUint8Array(buf, offset);\n  } else {\n    return decodeUint8ArrayList(buf, offset);\n  }\n}","map":{"version":3,"names":["allocUnsafe","N1","Math","pow","N2","N3","N4","N5","N6","N7","MSB","REST","encodingLength","value","Number","MAX_SAFE_INTEGER","RangeError","encodeUint8Array","buf","offset","Error","encodeUint8ArrayList","set","decodeUint8Array","b","res","decodeUint8ArrayList","get","encode","Uint8Array","decode"],"sources":["C:\\Users\\yassi\\OneDrive\\Desktop\\tp_9\\Certification-de-Diplomes\\node_modules\\uint8-varint\\src\\index.ts"],"sourcesContent":["/* eslint-disable no-fallthrough */\nimport { allocUnsafe } from 'uint8arrays/alloc'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nconst N1 = Math.pow(2, 7)\nconst N2 = Math.pow(2, 14)\nconst N3 = Math.pow(2, 21)\nconst N4 = Math.pow(2, 28)\nconst N5 = Math.pow(2, 35)\nconst N6 = Math.pow(2, 42)\nconst N7 = Math.pow(2, 49)\n\n/** Most significant bit of a byte */\nconst MSB = 0x80\n/** Rest of the bits in a byte */\nconst REST = 0x7f\n\nexport function encodingLength (value: number): number {\n  if (value < N1) {\n    return 1\n  }\n\n  if (value < N2) {\n    return 2\n  }\n\n  if (value < N3) {\n    return 3\n  }\n\n  if (value < N4) {\n    return 4\n  }\n\n  if (value < N5) {\n    return 5\n  }\n\n  if (value < N6) {\n    return 6\n  }\n\n  if (value < N7) {\n    return 7\n  }\n\n  if (Number.MAX_SAFE_INTEGER != null && value > Number.MAX_SAFE_INTEGER) {\n    throw new RangeError('Could not encode varint')\n  }\n\n  return 8\n}\n\nexport function encodeUint8Array (value: number, buf: Uint8Array, offset: number = 0): Uint8Array {\n  switch (encodingLength(value)) {\n    case 8: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 7: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 6: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 5: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value /= 128\n    }\n    case 4: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value >>>= 7\n    }\n    case 3: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value >>>= 7\n    }\n    case 2: {\n      buf[offset++] = (value & 0xFF) | MSB\n      value >>>= 7\n    }\n    case 1: {\n      buf[offset++] = (value & 0xFF)\n      value >>>= 7\n      break\n    }\n    default: throw new Error('unreachable')\n  }\n  return buf\n}\n\nexport function encodeUint8ArrayList (value: number, buf: Uint8ArrayList, offset: number = 0): Uint8ArrayList {\n  switch (encodingLength(value)) {\n    case 8: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 7: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 6: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 5: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value /= 128\n    }\n    case 4: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value >>>= 7\n    }\n    case 3: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value >>>= 7\n    }\n    case 2: {\n      buf.set(offset++, (value & 0xFF) | MSB)\n      value >>>= 7\n    }\n    case 1: {\n      buf.set(offset++, (value & 0xFF))\n      value >>>= 7\n      break\n    }\n    default: throw new Error('unreachable')\n  }\n  return buf\n}\n\nexport function decodeUint8Array (buf: Uint8Array, offset: number): number {\n  let b = buf[offset]\n  let res = 0\n\n  res += b & REST\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 1]\n  res += (b & REST) << 7\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 2]\n  res += (b & REST) << 14\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 3]\n  res += (b & REST) << 21\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 4]\n  res += (b & REST) * N4\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 5]\n  res += (b & REST) * N5\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 6]\n  res += (b & REST) * N6\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf[offset + 7]\n  res += (b & REST) * N7\n  if (b < MSB) {\n    return res\n  }\n\n  throw new RangeError('Could not decode varint')\n}\n\nexport function decodeUint8ArrayList (buf: Uint8ArrayList, offset: number): number {\n  let b = buf.get(offset)\n  let res = 0\n\n  res += b & REST\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 1)\n  res += (b & REST) << 7\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 2)\n  res += (b & REST) << 14\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 3)\n  res += (b & REST) << 21\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 4)\n  res += (b & REST) * N4\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 5)\n  res += (b & REST) * N5\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 6)\n  res += (b & REST) * N6\n  if (b < MSB) {\n    return res\n  }\n\n  b = buf.get(offset + 7)\n  res += (b & REST) * N7\n  if (b < MSB) {\n    return res\n  }\n\n  throw new RangeError('Could not decode varint')\n}\n\nexport function encode (value: number): Uint8Array\nexport function encode (value: number, buf: Uint8Array, offset?: number): Uint8Array\nexport function encode (value: number, buf: Uint8ArrayList, offset?: number): Uint8ArrayList\nexport function encode <T extends Uint8Array | Uint8ArrayList = Uint8Array> (value: number, buf?: T, offset: number = 0): T {\n  if (buf == null) {\n    buf = allocUnsafe(encodingLength(value)) as T\n  }\n  if (buf instanceof Uint8Array) {\n    return encodeUint8Array(value, buf, offset) as T\n  } else {\n    return encodeUint8ArrayList(value, buf, offset) as T\n  }\n}\n\nexport function decode (buf: Uint8ArrayList | Uint8Array, offset: number = 0): number {\n  if (buf instanceof Uint8Array) {\n    return decodeUint8Array(buf, offset)\n  } else {\n    return decodeUint8ArrayList(buf, offset)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}