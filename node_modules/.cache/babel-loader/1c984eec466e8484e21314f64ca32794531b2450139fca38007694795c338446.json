{"ast":null,"code":"import bases from './util/bases.js';\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function toString(array, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`);\n  }\n  // strip multibase prefix\n  return base.encoder.encode(array).substring(1);\n}","map":{"version":3,"names":["bases","toString","array","encoding","base","Error","encoder","encode","substring"],"sources":["C:\\Users\\yassi\\OneDrive\\Desktop\\tp_9\\Certification-de-Diplomes\\node_modules\\@multiformats\\multiaddr-to-uri\\node_modules\\uint8arrays\\src\\to-string.ts"],"sourcesContent":["import bases, { type SupportedEncodings } from './util/bases.js'\n\nexport type { SupportedEncodings }\n\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function toString (array: Uint8Array, encoding: SupportedEncodings = 'utf8'): string {\n  const base = bases[encoding]\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  // strip multibase prefix\n  return base.encoder.encode(array).substring(1)\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAmC,iBAAiB;AAIhE;;;;;;;AAOA,OAAM,SAAUC,QAAQA,CAAEC,KAAiB,EAAEC,QAAA,GAA+B,MAAM;EAChF,MAAMC,IAAI,GAAGJ,KAAK,CAACG,QAAQ,CAAC;EAE5B,IAAIC,IAAI,IAAI,IAAI,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyBF,QAAQ,GAAG,CAAC;EACvD;EAEA;EACA,OAAOC,IAAI,CAACE,OAAO,CAACC,MAAM,CAACL,KAAK,CAAC,CAACM,SAAS,CAAC,CAAC,CAAC;AAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}