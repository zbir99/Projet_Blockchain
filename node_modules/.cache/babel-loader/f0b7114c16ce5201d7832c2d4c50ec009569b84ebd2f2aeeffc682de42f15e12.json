{"ast":null,"code":"import { asUint8Array } from './util/as-uint8array.js';\nimport bases from './util/bases.js';\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function fromString(string, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\n  }\n  // add multibase prefix\n  return base.decoder.decode(`${base.prefix}${string}`); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n}","map":{"version":3,"names":["asUint8Array","bases","fromString","string","encoding","base","Error","globalThis","Buffer","from","decoder","decode","prefix"],"sources":["C:\\Users\\yassi\\OneDrive\\Desktop\\tp_9\\Certification-de-Diplomes\\node_modules\\uint8arrays\\src\\from-string.ts"],"sourcesContent":["import { asUint8Array } from './util/as-uint8array.js'\nimport bases, { type SupportedEncodings } from './util/bases.js'\n\nexport type { SupportedEncodings }\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8`, `hex`, and any encoding supported by the multiformats module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function fromString (string: string, encoding: SupportedEncodings = 'utf8'): Uint8Array {\n  const base = bases[encoding]\n\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`)\n  }\n\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return asUint8Array(globalThis.Buffer.from(string, 'utf-8'))\n  }\n\n  // add multibase prefix\n  return base.decoder.decode(`${base.prefix}${string}`) // eslint-disable-line @typescript-eslint/restrict-template-expressions\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,yBAAyB;AACtD,OAAOC,KAAK,MAAmC,iBAAiB;AAIhE;;;;;;;AAOA,OAAM,SAAUC,UAAUA,CAAEC,MAAc,EAAEC,QAAA,GAA+B,MAAM;EAC/E,MAAMC,IAAI,GAAGJ,KAAK,CAACG,QAAQ,CAAC;EAE5B,IAAIC,IAAI,IAAI,IAAI,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyBF,QAAQ,GAAG,CAAC;EACvD;EAEA,IAAI,CAACA,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,OAAO,KAAKG,UAAU,CAACC,MAAM,IAAI,IAAI,IAAID,UAAU,CAACC,MAAM,CAACC,IAAI,IAAI,IAAI,EAAE;IAChH,OAAOT,YAAY,CAACO,UAAU,CAACC,MAAM,CAACC,IAAI,CAACN,MAAM,EAAE,OAAO,CAAC,CAAC;EAC9D;EAEA;EACA,OAAOE,IAAI,CAACK,OAAO,CAACC,MAAM,CAAC,GAAGN,IAAI,CAACO,MAAM,GAAGT,MAAM,EAAE,CAAC,EAAC;AACxD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}