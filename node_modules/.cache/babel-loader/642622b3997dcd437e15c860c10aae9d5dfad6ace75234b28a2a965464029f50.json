{"ast":null,"code":"import { Interface, Typed } from \"../abi/index.js\";\nimport { resolveAddress } from \"../address/index.js\";\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { copyRequest, Log } from \"../providers/provider.js\";\nimport { defineProperties, isCallException, isHexString, resolveProperties, makeError, assert, assertArgument } from \"../utils/index.js\";\nimport { ContractEventPayload, ContractUnknownEventPayload, ContractTransactionResponse, EventLog } from \"./wrappers.js\";\nconst BN_0 = BigInt(0);\nfunction canCall(value) {\n  return value && typeof value.call === \"function\";\n}\nfunction canEstimate(value) {\n  return value && typeof value.estimateGas === \"function\";\n}\nfunction canResolve(value) {\n  return value && typeof value.resolveName === \"function\";\n}\nfunction canSend(value) {\n  return value && typeof value.sendTransaction === \"function\";\n}\nclass PreparedTopicFilter {\n  #filter;\n  fragment;\n  constructor(contract, fragment, args) {\n    defineProperties(this, {\n      fragment\n    });\n    if (fragment.inputs.length < args.length) {\n      throw new Error(\"too many arguments\");\n    }\n    // Recursively descend into args and resolve any addresses\n    const runner = getRunner(contract.runner, \"resolveName\");\n    const resolver = canResolve(runner) ? runner : null;\n    this.#filter = async function () {\n      const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {\n        const arg = args[index];\n        if (arg == null) {\n          return null;\n        }\n        return param.walkAsync(args[index], (type, value) => {\n          if (type === \"address\") {\n            return resolveAddress(value, resolver);\n          }\n          return value;\n        });\n      }));\n      return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\n    }();\n  }\n  getTopicFilter() {\n    return this.#filter;\n  }\n}\n// A = Arguments passed in as a tuple\n// R = The result type of the call (i.e. if only one return type,\n//     the qualified type, otherwise Result)\n// D = The type the default call will return (i.e. R for view/pure,\n//     TransactionResponse otherwise)\n//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {\nfunction _WrappedMethodBase() {\n  return Function;\n}\nfunction getRunner(value, feature) {\n  if (value == null) {\n    return null;\n  }\n  if (typeof value[feature] === \"function\") {\n    return value;\n  }\n  if (value.provider && typeof value.provider[feature] === \"function\") {\n    return value.provider;\n  }\n  return null;\n}\nfunction getProvider(value) {\n  if (value == null) {\n    return null;\n  }\n  return value.provider || null;\n}\n/**\n *  @_ignore:\n */\nexport async function copyOverrides(arg, allowed) {\n  // Create a shallow copy (we'll deep-ify anything needed during normalizing)\n  const overrides = copyRequest(Typed.dereference(arg, \"overrides\"));\n  assertArgument(overrides.to == null || (allowed || []).indexOf(\"to\") >= 0, \"cannot override to\", \"overrides.to\", overrides.to);\n  assertArgument(overrides.data == null || (allowed || []).indexOf(\"data\") >= 0, \"cannot override data\", \"overrides.data\", overrides.data);\n  // Resolve any from\n  if (overrides.from) {\n    overrides.from = await resolveAddress(overrides.from);\n  }\n  return overrides;\n}\n/**\n *  @_ignore:\n */\nexport async function resolveArgs(_runner, inputs, args) {\n  // Recursively descend into args and resolve any addresses\n  const runner = getRunner(_runner, \"resolveName\");\n  const resolver = canResolve(runner) ? runner : null;\n  return await Promise.all(inputs.map((param, index) => {\n    return param.walkAsync(args[index], (type, value) => {\n      value = Typed.dereference(value, type);\n      if (type === \"address\") {\n        return resolveAddress(value, resolver);\n      }\n      return value;\n    });\n  }));\n}\nclass WrappedFallback {\n  _contract;\n  constructor(contract) {\n    defineProperties(this, {\n      _contract: contract\n    });\n    const proxy = new Proxy(this, {\n      // Perform send when called\n      apply: async (target, thisArg, args) => {\n        return await target.send(...args);\n      }\n    });\n    return proxy;\n  }\n  async populateTransaction(overrides) {\n    // If an overrides was passed in, copy it and normalize the values\n    const tx = await copyOverrides(overrides, [\"data\"]);\n    tx.to = await this._contract.getAddress();\n    const iface = this._contract.interface;\n    // Only allow payable contracts to set non-zero value\n    const payable = iface.receive || iface.fallback && iface.fallback.payable;\n    assertArgument(payable || (tx.value || BN_0) === BN_0, \"cannot send value to non-payable contract\", \"overrides.value\", tx.value);\n    // Only allow fallback contracts to set non-empty data\n    assertArgument(iface.fallback || (tx.data || \"0x\") === \"0x\", \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n    return tx;\n  }\n  async staticCall(overrides) {\n    const runner = getRunner(this._contract.runner, \"call\");\n    assert(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"call\"\n    });\n    const tx = await this.populateTransaction(overrides);\n    try {\n      return await runner.call(tx);\n    } catch (error) {\n      if (isCallException(error) && error.data) {\n        throw this._contract.interface.makeError(error.data, tx);\n      }\n      throw error;\n    }\n  }\n  async send(overrides) {\n    const runner = this._contract.runner;\n    assert(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"sendTransaction\"\n    });\n    const tx = await runner.sendTransaction(await this.populateTransaction(overrides));\n    const provider = getProvider(this._contract.runner);\n    // @TODO: the provider can be null; make a custom dummy provider that will throw a\n    // meaningful error\n    return new ContractTransactionResponse(this._contract.interface, provider, tx);\n  }\n  async estimateGas(overrides) {\n    const runner = getRunner(this._contract.runner, \"estimateGas\");\n    assert(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"estimateGas\"\n    });\n    return await runner.estimateGas(await this.populateTransaction(overrides));\n  }\n}\nclass WrappedMethod extends _WrappedMethodBase() {\n  name = \"\"; // Investigate!\n  _contract;\n  _key;\n  constructor(contract, key) {\n    super();\n    defineProperties(this, {\n      name: contract.interface.getFunctionName(key),\n      _contract: contract,\n      _key: key\n    });\n    const proxy = new Proxy(this, {\n      // Perform the default operation for this fragment type\n      apply: async (target, thisArg, args) => {\n        const fragment = target.getFragment(...args);\n        if (fragment.constant) {\n          return await target.staticCall(...args);\n        }\n        return await target.send(...args);\n      }\n    });\n    return proxy;\n  }\n  // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n  get fragment() {\n    const fragment = this._contract.interface.getFunction(this._key);\n    assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fragment\"\n    });\n    return fragment;\n  }\n  getFragment(...args) {\n    const fragment = this._contract.interface.getFunction(this._key, args);\n    assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fragment\"\n    });\n    return fragment;\n  }\n  async populateTransaction(...args) {\n    const fragment = this.getFragment(...args);\n    // If an overrides was passed in, copy it and normalize the values\n    let overrides = {};\n    if (fragment.inputs.length + 1 === args.length) {\n      overrides = await copyOverrides(args.pop());\n    }\n    if (fragment.inputs.length !== args.length) {\n      throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\n    }\n    const resolvedArgs = await resolveArgs(this._contract.runner, fragment.inputs, args);\n    return Object.assign({}, overrides, await resolveProperties({\n      to: this._contract.getAddress(),\n      data: this._contract.interface.encodeFunctionData(fragment, resolvedArgs)\n    }));\n  }\n  async staticCall(...args) {\n    const result = await this.staticCallResult(...args);\n    if (result.length === 1) {\n      return result[0];\n    }\n    return result;\n  }\n  async send(...args) {\n    const runner = this._contract.runner;\n    assert(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"sendTransaction\"\n    });\n    const tx = await runner.sendTransaction(await this.populateTransaction(...args));\n    const provider = getProvider(this._contract.runner);\n    // @TODO: the provider can be null; make a custom dummy provider that will throw a\n    // meaningful error\n    return new ContractTransactionResponse(this._contract.interface, provider, tx);\n  }\n  async estimateGas(...args) {\n    const runner = getRunner(this._contract.runner, \"estimateGas\");\n    assert(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"estimateGas\"\n    });\n    return await runner.estimateGas(await this.populateTransaction(...args));\n  }\n  async staticCallResult(...args) {\n    const runner = getRunner(this._contract.runner, \"call\");\n    assert(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"call\"\n    });\n    const tx = await this.populateTransaction(...args);\n    let result = \"0x\";\n    try {\n      result = await runner.call(tx);\n    } catch (error) {\n      if (isCallException(error) && error.data) {\n        throw this._contract.interface.makeError(error.data, tx);\n      }\n      throw error;\n    }\n    const fragment = this.getFragment(...args);\n    return this._contract.interface.decodeFunctionResult(fragment, result);\n  }\n}\nfunction _WrappedEventBase() {\n  return Function;\n}\nclass WrappedEvent extends _WrappedEventBase() {\n  name = \"\"; // @TODO: investigate \n  _contract;\n  _key;\n  constructor(contract, key) {\n    super();\n    defineProperties(this, {\n      name: contract.interface.getEventName(key),\n      _contract: contract,\n      _key: key\n    });\n    return new Proxy(this, {\n      // Perform the default operation for this fragment type\n      apply: (target, thisArg, args) => {\n        return new PreparedTopicFilter(contract, target.getFragment(...args), args);\n      }\n    });\n  }\n  // Only works on non-ambiguous keys\n  get fragment() {\n    const fragment = this._contract.interface.getEvent(this._key);\n    assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fragment\"\n    });\n    return fragment;\n  }\n  getFragment(...args) {\n    const fragment = this._contract.interface.getEvent(this._key, args);\n    assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fragment\"\n    });\n    return fragment;\n  }\n}\n;\n// The combination of TypeScrype, Private Fields and Proxies makes\n// the world go boom; so we hide variables with some trickery keeping\n// a symbol attached to each BaseContract which its sub-class (even\n// via a Proxy) can reach and use to look up its internal values.\nconst internal = Symbol.for(\"_ethersInternal_contract\");\nconst internalValues = new WeakMap();\nfunction setInternal(contract, values) {\n  internalValues.set(contract[internal], values);\n}\nfunction getInternal(contract) {\n  return internalValues.get(contract[internal]);\n}\nfunction isDeferred(value) {\n  return value && typeof value === \"object\" && \"getTopicFilter\" in value && typeof value.getTopicFilter === \"function\" && value.fragment;\n}\nasync function getSubInfo(contract, event) {\n  let topics;\n  let fragment = null;\n  // Convert named events to topicHash and get the fragment for\n  // events which need deconstructing.\n  if (Array.isArray(event)) {\n    const topicHashify = function (name) {\n      if (isHexString(name, 32)) {\n        return name;\n      }\n      const fragment = contract.interface.getEvent(name);\n      assertArgument(fragment, \"unknown fragment\", \"name\", name);\n      return fragment.topicHash;\n    };\n    // Array of Topics and Names; e.g. `[ \"0x1234...89ab\", \"Transfer(address)\" ]`\n    topics = event.map(e => {\n      if (e == null) {\n        return null;\n      }\n      if (Array.isArray(e)) {\n        return e.map(topicHashify);\n      }\n      return topicHashify(e);\n    });\n  } else if (event === \"*\") {\n    topics = [null];\n  } else if (typeof event === \"string\") {\n    if (isHexString(event, 32)) {\n      // Topic Hash\n      topics = [event];\n    } else {\n      // Name or Signature; e.g. `\"Transfer\", `\"Transfer(address)\"`\n      fragment = contract.interface.getEvent(event);\n      assertArgument(fragment, \"unknown fragment\", \"event\", event);\n      topics = [fragment.topicHash];\n    }\n  } else if (isDeferred(event)) {\n    // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`\n    topics = await event.getTopicFilter();\n  } else if (\"fragment\" in event) {\n    // ContractEvent; e.g. `contract.filter.Transfer`\n    fragment = event.fragment;\n    topics = [fragment.topicHash];\n  } else {\n    assertArgument(false, \"unknown event name\", \"event\", event);\n  }\n  // Normalize topics and sort TopicSets\n  topics = topics.map(t => {\n    if (t == null) {\n      return null;\n    }\n    if (Array.isArray(t)) {\n      const items = Array.from(new Set(t.map(t => t.toLowerCase())).values());\n      if (items.length === 1) {\n        return items[0];\n      }\n      items.sort();\n      return items;\n    }\n    return t.toLowerCase();\n  });\n  const tag = topics.map(t => {\n    if (t == null) {\n      return \"null\";\n    }\n    if (Array.isArray(t)) {\n      return t.join(\"|\");\n    }\n    return t;\n  }).join(\"&\");\n  return {\n    fragment,\n    tag,\n    topics\n  };\n}\nasync function hasSub(contract, event) {\n  const {\n    subs\n  } = getInternal(contract);\n  return subs.get((await getSubInfo(contract, event)).tag) || null;\n}\nasync function getSub(contract, operation, event) {\n  // Make sure our runner can actually subscribe to events\n  const provider = getProvider(contract.runner);\n  assert(provider, \"contract runner does not support subscribing\", \"UNSUPPORTED_OPERATION\", {\n    operation\n  });\n  const {\n    fragment,\n    tag,\n    topics\n  } = await getSubInfo(contract, event);\n  const {\n    addr,\n    subs\n  } = getInternal(contract);\n  let sub = subs.get(tag);\n  if (!sub) {\n    const address = addr ? addr : contract;\n    const filter = {\n      address,\n      topics\n    };\n    const listener = log => {\n      let foundFragment = fragment;\n      if (foundFragment == null) {\n        try {\n          foundFragment = contract.interface.getEvent(log.topics[0]);\n        } catch (error) {}\n      }\n      // If fragment is null, we do not deconstruct the args to emit\n      if (foundFragment) {\n        const _foundFragment = foundFragment;\n        const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];\n        emit(contract, event, args, listener => {\n          return new ContractEventPayload(contract, listener, event, _foundFragment, log);\n        });\n      } else {\n        emit(contract, event, [], listener => {\n          return new ContractUnknownEventPayload(contract, listener, event, log);\n        });\n      }\n    };\n    let starting = [];\n    const start = () => {\n      if (starting.length) {\n        return;\n      }\n      starting.push(provider.on(filter, listener));\n    };\n    const stop = async () => {\n      if (starting.length == 0) {\n        return;\n      }\n      let started = starting;\n      starting = [];\n      await Promise.all(started);\n      provider.off(filter, listener);\n    };\n    sub = {\n      tag,\n      listeners: [],\n      start,\n      stop\n    };\n    subs.set(tag, sub);\n  }\n  return sub;\n}\n// We use this to ensure one emit resolves before firing the next to\n// ensure correct ordering (note this cannot throw and just adds the\n// notice to the event queu using setTimeout).\nlet lastEmit = Promise.resolve();\nasync function _emit(contract, event, args, payloadFunc) {\n  await lastEmit;\n  const sub = await hasSub(contract, event);\n  if (!sub) {\n    return false;\n  }\n  const count = sub.listeners.length;\n  sub.listeners = sub.listeners.filter(({\n    listener,\n    once\n  }) => {\n    const passArgs = args.slice();\n    if (payloadFunc) {\n      passArgs.push(payloadFunc(once ? null : listener));\n    }\n    try {\n      listener.call(contract, ...passArgs);\n    } catch (error) {}\n    return !once;\n  });\n  return count > 0;\n}\nasync function emit(contract, event, args, payloadFunc) {\n  try {\n    await lastEmit;\n  } catch (error) {}\n  const resultPromise = _emit(contract, event, args, payloadFunc);\n  lastEmit = resultPromise;\n  return await resultPromise;\n}\nconst passProperties = [\"then\"];\nexport class BaseContract {\n  target;\n  interface;\n  runner;\n  filters;\n  [internal];\n  fallback;\n  constructor(target, abi, runner, _deployTx) {\n    if (runner == null) {\n      runner = null;\n    }\n    const iface = Interface.from(abi);\n    defineProperties(this, {\n      target,\n      runner,\n      interface: iface\n    });\n    Object.defineProperty(this, internal, {\n      value: {}\n    });\n    let addrPromise;\n    let addr = null;\n    let deployTx = null;\n    if (_deployTx) {\n      const provider = getProvider(runner);\n      // @TODO: the provider can be null; make a custom dummy provider that will throw a\n      // meaningful error\n      deployTx = new ContractTransactionResponse(this.interface, provider, _deployTx);\n    }\n    let subs = new Map();\n    // Resolve the target as the address\n    if (typeof target === \"string\") {\n      if (isHexString(target)) {\n        addr = target;\n        addrPromise = Promise.resolve(target);\n      } else {\n        const resolver = getRunner(runner, \"resolveName\");\n        if (!canResolve(resolver)) {\n          throw makeError(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"resolveName\"\n          });\n        }\n        addrPromise = resolver.resolveName(target).then(addr => {\n          if (addr == null) {\n            throw new Error(\"TODO\");\n          }\n          getInternal(this).addr = addr;\n          return addr;\n        });\n      }\n    } else {\n      addrPromise = target.getAddress().then(addr => {\n        if (addr == null) {\n          throw new Error(\"TODO\");\n        }\n        getInternal(this).addr = addr;\n        return addr;\n      });\n    }\n    // Set our private values\n    setInternal(this, {\n      addrPromise,\n      addr,\n      deployTx,\n      subs\n    });\n    // Add the event filters\n    const filters = new Proxy({}, {\n      get: (target, _prop, receiver) => {\n        // Pass important checks (like `then` for Promise) through\n        if (passProperties.indexOf(_prop) >= 0) {\n          return Reflect.get(target, _prop, receiver);\n        }\n        const prop = String(_prop);\n        const result = this.getEvent(prop);\n        if (result) {\n          return result;\n        }\n        throw new Error(`unknown contract event: ${prop}`);\n      }\n    });\n    defineProperties(this, {\n      filters\n    });\n    defineProperties(this, {\n      fallback: iface.receive || iface.fallback ? new WrappedFallback(this) : null\n    });\n    // Return a Proxy that will respond to functions\n    return new Proxy(this, {\n      get: (target, _prop, receiver) => {\n        if (_prop in target || passProperties.indexOf(_prop) >= 0) {\n          return Reflect.get(target, _prop, receiver);\n        }\n        const prop = String(_prop);\n        const result = target.getFunction(prop);\n        if (result) {\n          return result;\n        }\n        throw new Error(`unknown contract method: ${prop}`);\n      }\n    });\n  }\n  connect(runner) {\n    return new BaseContract(this.target, this.interface, runner);\n  }\n  async getAddress() {\n    return await getInternal(this).addrPromise;\n  }\n  async getDeployedCode() {\n    const provider = getProvider(this.runner);\n    assert(provider, \"runner does not support .provider\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"getDeployedCode\"\n    });\n    const code = await provider.getCode(await this.getAddress());\n    if (code === \"0x\") {\n      return null;\n    }\n    return code;\n  }\n  async waitForDeployment() {\n    // We have the deployement transaction; just use that (throws if deployement fails)\n    const deployTx = this.deploymentTransaction();\n    if (deployTx) {\n      await deployTx.wait();\n      return this;\n    }\n    // Check for code\n    const code = await this.getDeployedCode();\n    if (code != null) {\n      return this;\n    }\n    // Make sure we can subscribe to a provider event\n    const provider = getProvider(this.runner);\n    assert(provider != null, \"contract runner does not support .provider\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"waitForDeployment\"\n    });\n    return new Promise((resolve, reject) => {\n      const checkCode = async () => {\n        try {\n          const code = await this.getDeployedCode();\n          if (code != null) {\n            return resolve(this);\n          }\n          provider.once(\"block\", checkCode);\n        } catch (error) {\n          reject(error);\n        }\n      };\n      checkCode();\n    });\n  }\n  deploymentTransaction() {\n    return getInternal(this).deployTx;\n  }\n  getFunction(key) {\n    if (typeof key !== \"string\") {\n      key = key.format();\n    }\n    return new WrappedMethod(this, key);\n  }\n  getEvent(key) {\n    if (typeof key !== \"string\") {\n      key = key.format();\n    }\n    return new WrappedEvent(this, key);\n  }\n  async queryTransaction(hash) {\n    // Is this useful?\n    throw new Error(\"@TODO\");\n  }\n  async queryFilter(event, fromBlock, toBlock) {\n    if (fromBlock == null) {\n      fromBlock = 0;\n    }\n    if (toBlock == null) {\n      toBlock = \"latest\";\n    }\n    const {\n      addr,\n      addrPromise\n    } = getInternal(this);\n    const address = addr ? addr : await addrPromise;\n    const {\n      fragment,\n      topics\n    } = await getSubInfo(this, event);\n    const filter = {\n      address,\n      topics,\n      fromBlock,\n      toBlock\n    };\n    const provider = getProvider(this.runner);\n    assert(provider, \"contract runner does not have a provider\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"queryFilter\"\n    });\n    return (await provider.getLogs(filter)).map(log => {\n      let foundFragment = fragment;\n      if (foundFragment == null) {\n        try {\n          foundFragment = this.interface.getEvent(log.topics[0]);\n        } catch (error) {}\n      }\n      if (foundFragment) {\n        return new EventLog(log, this.interface, foundFragment);\n      } else {\n        return new Log(log, provider);\n      }\n    });\n  }\n  async on(event, listener) {\n    const sub = await getSub(this, \"on\", event);\n    sub.listeners.push({\n      listener,\n      once: false\n    });\n    sub.start();\n    return this;\n  }\n  async once(event, listener) {\n    const sub = await getSub(this, \"once\", event);\n    sub.listeners.push({\n      listener,\n      once: true\n    });\n    sub.start();\n    return this;\n  }\n  async emit(event, ...args) {\n    return await emit(this, event, args, null);\n  }\n  async listenerCount(event) {\n    if (event) {\n      const sub = await hasSub(this, event);\n      if (!sub) {\n        return 0;\n      }\n      return sub.listeners.length;\n    }\n    const {\n      subs\n    } = getInternal(this);\n    let total = 0;\n    for (const {\n      listeners\n    } of subs.values()) {\n      total += listeners.length;\n    }\n    return total;\n  }\n  async listeners(event) {\n    if (event) {\n      const sub = await hasSub(this, event);\n      if (!sub) {\n        return [];\n      }\n      return sub.listeners.map(({\n        listener\n      }) => listener);\n    }\n    const {\n      subs\n    } = getInternal(this);\n    let result = [];\n    for (const {\n      listeners\n    } of subs.values()) {\n      result = result.concat(listeners.map(({\n        listener\n      }) => listener));\n    }\n    return result;\n  }\n  async off(event, listener) {\n    const sub = await hasSub(this, event);\n    if (!sub) {\n      return this;\n    }\n    if (listener) {\n      const index = sub.listeners.map(({\n        listener\n      }) => listener).indexOf(listener);\n      if (index >= 0) {\n        sub.listeners.splice(index, 1);\n      }\n    }\n    if (listener == null || sub.listeners.length === 0) {\n      sub.stop();\n      getInternal(this).subs.delete(sub.tag);\n    }\n    return this;\n  }\n  async removeAllListeners(event) {\n    if (event) {\n      const sub = await hasSub(this, event);\n      if (!sub) {\n        return this;\n      }\n      sub.stop();\n      getInternal(this).subs.delete(sub.tag);\n    } else {\n      const {\n        subs\n      } = getInternal(this);\n      for (const {\n        tag,\n        stop\n      } of subs.values()) {\n        stop();\n        subs.delete(tag);\n      }\n    }\n    return this;\n  }\n  // Alias for \"on\"\n  async addListener(event, listener) {\n    return await this.on(event, listener);\n  }\n  // Alias for \"off\"\n  async removeListener(event, listener) {\n    return await this.off(event, listener);\n  }\n  static buildClass(abi) {\n    class CustomContract extends BaseContract {\n      constructor(address, runner = null) {\n        super(address, abi, runner);\n      }\n    }\n    return CustomContract;\n  }\n  static from(target, abi, runner) {\n    if (runner == null) {\n      runner = null;\n    }\n    const contract = new this(target, abi, runner);\n    return contract;\n  }\n}\nfunction _ContractBase() {\n  return BaseContract;\n}\nexport class Contract extends _ContractBase() {}","map":{"version":3,"names":["Interface","Typed","resolveAddress","copyRequest","Log","defineProperties","isCallException","isHexString","resolveProperties","makeError","assert","assertArgument","ContractEventPayload","ContractUnknownEventPayload","ContractTransactionResponse","EventLog","BN_0","BigInt","canCall","value","call","canEstimate","estimateGas","canResolve","resolveName","canSend","sendTransaction","PreparedTopicFilter","filter","fragment","constructor","contract","args","inputs","length","Error","runner","getRunner","resolver","resolvedArgs","Promise","all","map","param","index","arg","walkAsync","type","interface","encodeFilterTopics","getTopicFilter","_WrappedMethodBase","Function","feature","provider","getProvider","copyOverrides","allowed","overrides","dereference","to","indexOf","data","from","resolveArgs","_runner","WrappedFallback","_contract","proxy","Proxy","apply","target","thisArg","send","populateTransaction","tx","getAddress","iface","payable","receive","fallback","staticCall","operation","error","WrappedMethod","name","_key","key","getFunctionName","getFragment","constant","getFunction","pop","Object","assign","encodeFunctionData","result","staticCallResult","decodeFunctionResult","_WrappedEventBase","WrappedEvent","getEventName","getEvent","internal","Symbol","for","internalValues","WeakMap","setInternal","values","set","getInternal","get","isDeferred","getSubInfo","event","topics","Array","isArray","topicHashify","topicHash","e","t","items","Set","toLowerCase","sort","tag","join","hasSub","subs","getSub","addr","sub","address","listener","log","foundFragment","_foundFragment","decodeEventLog","emit","starting","start","push","on","stop","started","off","listeners","lastEmit","resolve","_emit","payloadFunc","count","once","passArgs","slice","resultPromise","passProperties","BaseContract","filters","abi","_deployTx","defineProperty","addrPromise","deployTx","Map","then","_prop","receiver","Reflect","prop","String","connect","getDeployedCode","code","getCode","waitForDeployment","deploymentTransaction","wait","reject","checkCode","format","queryTransaction","hash","queryFilter","fromBlock","toBlock","getLogs","listenerCount","total","concat","splice","delete","removeAllListeners","addListener","removeListener","buildClass","CustomContract","_ContractBase","Contract"],"sources":["C:\\Users\\yassi\\OneDrive\\Desktop\\tp_9\\Certification-de-Diplomes\\node_modules\\ethers\\src.ts\\contract\\contract.ts"],"sourcesContent":["import { Interface, Typed } from \"../abi/index.js\";\nimport { resolveAddress } from \"../address/index.js\";\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { copyRequest, Log, TransactionResponse } from \"../providers/provider.js\";\nimport {\n    defineProperties, isCallException, isHexString, resolveProperties,\n    makeError, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport {\n    ContractEventPayload, ContractUnknownEventPayload,\n    ContractTransactionResponse,\n    EventLog\n} from \"./wrappers.js\";\n\nimport type { EventFragment, FunctionFragment, InterfaceAbi, ParamType, Result } from \"../abi/index.js\";\nimport type { Addressable } from \"../address/index.js\";\nimport type { EventEmitterable, Listener } from \"../utils/index.js\";\nimport type {\n    BlockTag, ContractRunner, Provider, TransactionRequest, TopicFilter\n} from \"../providers/index.js\";\n\nimport type {\n    ContractEventName,\n    ContractInterface,\n    ContractMethodArgs,\n    BaseContractMethod,\n    ContractMethod,\n    ContractEventArgs,\n    ContractEvent,\n    ContractTransaction,\n    DeferredTopicFilter\n} from \"./types.js\";\n\nconst BN_0 = BigInt(0);\n\ninterface ContractRunnerCaller extends ContractRunner {\n    call: (tx: TransactionRequest) => Promise<string>;\n}\n\ninterface ContractRunnerEstimater extends ContractRunner {\n    estimateGas: (tx: TransactionRequest) => Promise<bigint>;\n}\n\ninterface ContractRunnerSender extends ContractRunner {\n    sendTransaction: (tx: TransactionRequest) => Promise<TransactionResponse>;\n}\n\ninterface ContractRunnerResolver extends ContractRunner {\n    resolveName: (name: string | Addressable) => Promise<null | string>;\n}\n\nfunction canCall(value: any): value is ContractRunnerCaller {\n    return (value && typeof(value.call) === \"function\");\n}\n\nfunction canEstimate(value: any): value is ContractRunnerEstimater {\n    return (value && typeof(value.estimateGas) === \"function\");\n}\n\nfunction canResolve(value: any): value is ContractRunnerResolver {\n    return (value && typeof(value.resolveName) === \"function\");\n}\n\nfunction canSend(value: any): value is ContractRunnerSender {\n    return (value && typeof(value.sendTransaction) === \"function\");\n}\n\nclass PreparedTopicFilter implements DeferredTopicFilter {\n    #filter: Promise<TopicFilter>;\n    readonly fragment!: EventFragment;\n\n    constructor(contract: BaseContract, fragment: EventFragment, args: Array<any>) {\n        defineProperties<PreparedTopicFilter>(this, { fragment });\n        if (fragment.inputs.length < args.length) {\n            throw new Error(\"too many arguments\");\n        }\n\n        // Recursively descend into args and resolve any addresses\n        const runner = getRunner(contract.runner, \"resolveName\");\n        const resolver = canResolve(runner) ? runner: null;\n        this.#filter = (async function() {\n            const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {\n                const arg = args[index];\n                if (arg == null) { return null; }\n\n                return param.walkAsync(args[index], (type, value) => {\n                    if (type === \"address\") {\n                        return resolveAddress(value, resolver);\n                    }\n                    return value;\n                });\n            }));\n\n            return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\n        })();\n    }\n\n    getTopicFilter(): Promise<TopicFilter> {\n        return this.#filter;\n    }\n}\n\n\n// A = Arguments passed in as a tuple\n// R = The result type of the call (i.e. if only one return type,\n//     the qualified type, otherwise Result)\n// D = The type the default call will return (i.e. R for view/pure,\n//     TransactionResponse otherwise)\n//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {\n\nfunction _WrappedMethodBase(): new () => Function & BaseContractMethod {\n    return Function as any;\n}\n\nfunction getRunner<T extends ContractRunner>(value: any, feature: keyof ContractRunner): null | T {\n    if (value == null) { return null; }\n    if (typeof(value[feature]) === \"function\") { return value; }\n    if (value.provider && typeof(value.provider[feature]) === \"function\") {\n        return value.provider;\n    }\n    return null;\n}\n\nfunction getProvider(value: null | ContractRunner): null | Provider {\n    if (value == null) { return null; }\n    return value.provider || null;\n}\n\n/**\n *  @_ignore:\n */\nexport async function copyOverrides<O extends string = \"data\" | \"to\">(arg: any, allowed?: Array<string>): Promise<Omit<ContractTransaction, O>> {\n\n    // Create a shallow copy (we'll deep-ify anything needed during normalizing)\n    const overrides = copyRequest(Typed.dereference(arg, \"overrides\"));\n\n    assertArgument(overrides.to == null || (allowed || [ ]).indexOf(\"to\") >= 0,\n      \"cannot override to\", \"overrides.to\", overrides.to);\n    assertArgument(overrides.data == null || (allowed || [ ]).indexOf(\"data\") >= 0,\n      \"cannot override data\", \"overrides.data\", overrides.data);\n\n    // Resolve any from\n    if (overrides.from) {\n        overrides.from = await resolveAddress(overrides.from);\n    }\n\n    return <Omit<ContractTransaction, O>>overrides;\n}\n\n/**\n *  @_ignore:\n */\nexport async function resolveArgs(_runner: null | ContractRunner, inputs: ReadonlyArray<ParamType>, args: Array<any>): Promise<Array<any>> {\n    // Recursively descend into args and resolve any addresses\n    const runner = getRunner(_runner, \"resolveName\");\n    const resolver = canResolve(runner) ? runner: null;\n    return await Promise.all(inputs.map((param, index) => {\n        return param.walkAsync(args[index], (type, value) => {\n            value = Typed.dereference(value, type);\n            if (type === \"address\") { return resolveAddress(value, resolver); }\n            return value;\n        });\n    }));\n}\n\nclass WrappedFallback {\n    readonly _contract!: BaseContract;\n\n    constructor (contract: BaseContract) {\n        defineProperties<WrappedFallback>(this, { _contract: contract });\n\n        const proxy = new Proxy(this, {\n            // Perform send when called\n            apply: async (target, thisArg, args: Array<any>) => {\n                return await target.send(...args);\n            },\n        });\n\n        return proxy;\n    }\n\n    async populateTransaction(overrides?: Omit<TransactionRequest, \"to\">): Promise<ContractTransaction> {\n        // If an overrides was passed in, copy it and normalize the values\n\n        const tx: ContractTransaction = <any>(await copyOverrides<\"data\">(overrides, [ \"data\" ]));\n        tx.to = await this._contract.getAddress();\n\n        const iface = this._contract.interface;\n\n        // Only allow payable contracts to set non-zero value\n        const payable = iface.receive || (iface.fallback && iface.fallback.payable);\n        assertArgument(payable || (tx.value || BN_0) === BN_0,\n          \"cannot send value to non-payable contract\", \"overrides.value\", tx.value);\n\n        // Only allow fallback contracts to set non-empty data\n        assertArgument(iface.fallback || (tx.data || \"0x\") === \"0x\",\n          \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n\n        return tx;\n    }\n\n    async staticCall(overrides?: Omit<TransactionRequest, \"to\">): Promise<string> {\n        const runner = getRunner(this._contract.runner, \"call\");\n        assert(canCall(runner), \"contract runner does not support calling\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n\n        const tx = await this.populateTransaction(overrides);\n\n        try {\n            return await runner.call(tx);\n        } catch (error: any) {\n            if (isCallException(error) && error.data) {\n                throw this._contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n    }\n\n    async send(overrides?: Omit<TransactionRequest, \"to\">): Promise<ContractTransactionResponse> {\n        const runner = this._contract.runner;\n        assert(canSend(runner), \"contract runner does not support sending transactions\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n\n        const tx = await runner.sendTransaction(await this.populateTransaction(overrides));\n        const provider = getProvider(this._contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new ContractTransactionResponse(this._contract.interface, <Provider>provider, tx);\n    }\n\n    async estimateGas(overrides?: Omit<TransactionRequest, \"to\">): Promise<bigint> {\n        const runner = getRunner(this._contract.runner, \"estimateGas\");\n        assert(canEstimate(runner), \"contract runner does not support gas estimation\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n\n        return await runner.estimateGas(await this.populateTransaction(overrides));\n    }\n}\n\nclass WrappedMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse>\n  extends _WrappedMethodBase() implements BaseContractMethod<A, R, D> {\n\n    readonly name: string = \"\";   // Investigate!\n    readonly _contract!: BaseContract;\n    readonly _key!: string;\n\n    constructor (contract: BaseContract, key: string) {\n        super();\n\n        defineProperties<WrappedMethod>(this, {\n            name: contract.interface.getFunctionName(key),\n            _contract: contract, _key: key\n        });\n\n        const proxy = new Proxy(this, {\n            // Perform the default operation for this fragment type\n            apply: async (target, thisArg, args: ContractMethodArgs<A>) => {\n                const fragment = target.getFragment(...args);\n                if (fragment.constant) { return await target.staticCall(...args); }\n                return await target.send(...args);\n            },\n        });\n\n        return proxy;\n    }\n\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    get fragment(): FunctionFragment {\n        const fragment = this._contract.interface.getFunction(this._key);\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\"\n        });\n        return fragment;\n    }\n\n    getFragment(...args: ContractMethodArgs<A>): FunctionFragment {\n        const fragment = this._contract.interface.getFunction(this._key, args);\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\"\n        });\n        return fragment;\n    }\n\n    async populateTransaction(...args: ContractMethodArgs<A>): Promise<ContractTransaction> {\n        const fragment = this.getFragment(...args);\n\n        // If an overrides was passed in, copy it and normalize the values\n        let overrides: Omit<ContractTransaction, \"data\" | \"to\"> = { };\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n        }\n\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\n        }\n\n        const resolvedArgs = await resolveArgs(this._contract.runner, fragment.inputs, args);\n\n        return Object.assign({ }, overrides, await resolveProperties({\n            to: this._contract.getAddress(),\n            data: this._contract.interface.encodeFunctionData(fragment, resolvedArgs)\n        }));\n    }\n\n    async staticCall(...args: ContractMethodArgs<A>): Promise<R> {\n        const result = await this.staticCallResult(...args);\n        if (result.length === 1) { return result[0]; }\n        return <R><unknown>result;\n    }\n\n    async send(...args: ContractMethodArgs<A>): Promise<ContractTransactionResponse> {\n        const runner = this._contract.runner;\n        assert(canSend(runner), \"contract runner does not support sending transactions\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n\n        const tx = await runner.sendTransaction(await this.populateTransaction(...args));\n        const provider = getProvider(this._contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new ContractTransactionResponse(this._contract.interface, <Provider>provider, tx);\n    }\n\n    async estimateGas(...args: ContractMethodArgs<A>): Promise<bigint> {\n        const runner = getRunner(this._contract.runner, \"estimateGas\");\n        assert(canEstimate(runner), \"contract runner does not support gas estimation\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n\n        return await runner.estimateGas(await this.populateTransaction(...args));\n    }\n\n    async staticCallResult(...args: ContractMethodArgs<A>): Promise<Result> {\n        const runner = getRunner(this._contract.runner, \"call\");\n        assert(canCall(runner), \"contract runner does not support calling\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n\n        const tx = await this.populateTransaction(...args);\n\n        let result = \"0x\";\n        try {\n            result = await runner.call(tx);\n        } catch (error: any) {\n            if (isCallException(error) && error.data) {\n                throw this._contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n\n        const fragment = this.getFragment(...args);\n        return this._contract.interface.decodeFunctionResult(fragment, result);\n    }\n}\n\nfunction _WrappedEventBase(): new () => Function & ContractEvent {\n    return Function as any;\n}\n\nclass WrappedEvent<A extends Array<any> = Array<any>> extends _WrappedEventBase() implements ContractEvent<A> {\n    readonly name: string = \"\";  // @TODO: investigate \n\n    readonly _contract!: BaseContract;\n    readonly _key!: string;\n\n    constructor (contract: BaseContract, key: string) {\n        super();\n\n        defineProperties<WrappedEvent>(this, {\n            name: contract.interface.getEventName(key),\n            _contract: contract, _key: key\n        });\n\n        return new Proxy(this, {\n            // Perform the default operation for this fragment type\n            apply: (target, thisArg, args: ContractEventArgs<A>) => {\n                return new PreparedTopicFilter(contract, target.getFragment(...args), args);\n            },\n        });\n    }\n\n    // Only works on non-ambiguous keys\n    get fragment(): EventFragment {\n        const fragment = this._contract.interface.getEvent(this._key);\n\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\"\n        });\n\n        return fragment;\n    }\n\n    getFragment(...args: ContractEventArgs<A>): EventFragment {\n        const fragment = this._contract.interface.getEvent(this._key, args);\n\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\"\n        });\n\n        return fragment;\n    }\n};\n\ntype Sub = {\n    tag: string;\n    listeners: Array<{ listener: Listener, once: boolean }>,\n    start: () => void;\n    stop: () => void;\n};\n\n\n// The combination of TypeScrype, Private Fields and Proxies makes\n// the world go boom; so we hide variables with some trickery keeping\n// a symbol attached to each BaseContract which its sub-class (even\n// via a Proxy) can reach and use to look up its internal values.\n\nconst internal = Symbol.for(\"_ethersInternal_contract\");\ntype Internal = {\n    addrPromise: Promise<string>;\n    addr: null | string;\n\n    deployTx: null | ContractTransactionResponse;\n\n    subs: Map<string, Sub>;\n};\n\nconst internalValues: WeakMap<BaseContract, Internal> = new WeakMap();\n\nfunction setInternal(contract: BaseContract, values: Internal): void {\n    internalValues.set(contract[internal], values);\n}\n\nfunction getInternal(contract: BaseContract): Internal {\n    return internalValues.get(contract[internal]) as Internal;\n}\n\nfunction isDeferred(value: any): value is DeferredTopicFilter {\n    return (value && typeof(value) === \"object\" && (\"getTopicFilter\" in value) &&\n      (typeof(value.getTopicFilter) === \"function\") && value.fragment);\n}\n\nasync function getSubInfo(contract: BaseContract, event: ContractEventName): Promise<{ fragment: null | EventFragment, tag: string, topics: TopicFilter }> {\n    let topics: Array<null | string | Array<string>>;\n    let fragment: null | EventFragment = null;\n\n    // Convert named events to topicHash and get the fragment for\n    // events which need deconstructing.\n\n    if (Array.isArray(event)) {\n        const topicHashify = function(name: string): string {\n            if (isHexString(name, 32)) { return name; }\n            const fragment = contract.interface.getEvent(name);\n            assertArgument(fragment, \"unknown fragment\", \"name\", name);\n            return fragment.topicHash;\n        }\n\n        // Array of Topics and Names; e.g. `[ \"0x1234...89ab\", \"Transfer(address)\" ]`\n        topics = event.map((e) => {\n            if (e == null) { return null; }\n            if (Array.isArray(e)) { return e.map(topicHashify); }\n            return topicHashify(e);\n        });\n\n    } else if (event === \"*\") {\n        topics = [ null ];\n\n    } else if (typeof(event) === \"string\") {\n        if (isHexString(event, 32)) {\n            // Topic Hash\n            topics = [ event ];\n        } else {\n           // Name or Signature; e.g. `\"Transfer\", `\"Transfer(address)\"`\n            fragment = contract.interface.getEvent(event);\n            assertArgument(fragment, \"unknown fragment\", \"event\", event);\n            topics = [ fragment.topicHash ];\n        }\n\n    } else if (isDeferred(event)) {\n        // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`\n        topics = await event.getTopicFilter();\n\n    } else if (\"fragment\" in event) {\n        // ContractEvent; e.g. `contract.filter.Transfer`\n        fragment = event.fragment;\n        topics = [ fragment.topicHash ];\n\n    } else {\n        assertArgument(false, \"unknown event name\", \"event\", event);\n    }\n\n    // Normalize topics and sort TopicSets\n    topics = topics.map((t) => {\n        if (t == null) { return null; }\n        if (Array.isArray(t)) {\n            const items = Array.from(new Set(t.map((t) => t.toLowerCase())).values());\n            if (items.length === 1) { return items[0]; }\n            items.sort();\n            return items;\n        }\n        return t.toLowerCase();\n    });\n\n    const tag = topics.map((t) => {\n        if (t == null) { return \"null\"; }\n        if (Array.isArray(t)) { return t.join(\"|\"); }\n        return t;\n    }).join(\"&\");\n\n    return { fragment, tag, topics }\n}\n\nasync function hasSub(contract: BaseContract, event: ContractEventName): Promise<null | Sub> {\n    const { subs } = getInternal(contract);\n    return subs.get((await getSubInfo(contract, event)).tag) || null;\n}\n\nasync function getSub(contract: BaseContract, operation: string, event: ContractEventName): Promise<Sub> {\n    // Make sure our runner can actually subscribe to events\n    const provider = getProvider(contract.runner);\n    assert(provider, \"contract runner does not support subscribing\",\n        \"UNSUPPORTED_OPERATION\", { operation });\n\n    const { fragment, tag, topics } = await getSubInfo(contract, event);\n\n    const { addr, subs } = getInternal(contract);\n\n    let sub = subs.get(tag);\n    if (!sub) {\n        const address: string | Addressable = (addr ? addr: contract);\n        const filter = { address, topics };\n        const listener = (log: Log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = contract.interface.getEvent(log.topics[0]);\n                } catch (error) { }\n            }\n\n            // If fragment is null, we do not deconstruct the args to emit\n\n            if (foundFragment) {\n                const _foundFragment = foundFragment;\n                const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics): [ ];\n                emit(contract, event, args, (listener: null | Listener) => {\n                    return new ContractEventPayload(contract, listener, event, _foundFragment, log);\n                });\n            } else {\n                emit(contract, event, [ ], (listener: null | Listener) => {\n                    return new ContractUnknownEventPayload(contract, listener, event, log);\n                });\n            }\n        };\n\n        let starting: Array<Promise<any>> = [ ];\n        const start = () => {\n            if (starting.length) { return; }\n            starting.push(provider.on(filter, listener));\n        };\n\n        const stop = async () => {\n            if (starting.length == 0) { return; }\n\n            let started = starting;\n            starting = [ ];\n            await Promise.all(started);\n            provider.off(filter, listener);\n        };\n\n        sub = { tag, listeners: [ ], start, stop };\n        subs.set(tag, sub);\n    }\n    return sub;\n}\n\n// We use this to ensure one emit resolves before firing the next to\n// ensure correct ordering (note this cannot throw and just adds the\n// notice to the event queu using setTimeout).\nlet lastEmit: Promise<any> = Promise.resolve();\n\ntype PayloadFunc = (listener: null | Listener) => ContractUnknownEventPayload;\n\nasync function _emit(contract: BaseContract, event: ContractEventName, args: Array<any>, payloadFunc: null | PayloadFunc): Promise<boolean> {\n    await lastEmit;\n\n    const sub = await hasSub(contract, event);\n    if (!sub) { return false; }\n\n    const count = sub.listeners.length;\n    sub.listeners = sub.listeners.filter(({ listener, once }) => {\n        const passArgs = args.slice();\n        if (payloadFunc) {\n            passArgs.push(payloadFunc(once ? null: listener));\n        }\n        try {\n            listener.call(contract, ...passArgs);\n        } catch (error) { }\n        return !once;\n    });\n    return (count > 0);\n}\n\nasync function emit(contract: BaseContract, event: ContractEventName, args: Array<any>, payloadFunc: null | PayloadFunc): Promise<boolean> {\n    try {\n        await lastEmit;\n    } catch (error) { }\n\n    const resultPromise = _emit(contract, event, args, payloadFunc);\n    lastEmit = resultPromise;\n    return await resultPromise;\n}\n\nconst passProperties = [ \"then\" ];\nexport class BaseContract implements Addressable, EventEmitterable<ContractEventName> {\n    readonly target!: string | Addressable;\n    readonly interface!: Interface;\n    readonly runner!: null | ContractRunner;\n\n    readonly filters!: Record<string, ContractEvent>;\n\n    readonly [internal]: any;\n\n    readonly fallback!: null | WrappedFallback;\n\n    constructor(target: string | Addressable, abi: Interface | InterfaceAbi, runner?: null | ContractRunner, _deployTx?: null | TransactionResponse) {\n        if (runner == null) { runner = null; }\n        const iface = Interface.from(abi);\n        defineProperties<BaseContract>(this, { target, runner, interface: iface });\n\n        Object.defineProperty(this, internal, { value: { } });\n\n        let addrPromise;\n        let addr = null;\n\n        let deployTx: null | ContractTransactionResponse = null;\n        if (_deployTx) {\n            const provider = getProvider(runner);\n            // @TODO: the provider can be null; make a custom dummy provider that will throw a\n            // meaningful error\n            deployTx = new ContractTransactionResponse(this.interface, <Provider>provider, _deployTx);\n        }\n\n        let subs = new Map();\n\n        // Resolve the target as the address\n        if (typeof(target) === \"string\") {\n            if (isHexString(target)) {\n                addr = target;\n                addrPromise = Promise.resolve(target);\n\n            } else {\n                const resolver = getRunner(runner, \"resolveName\");\n                if (!canResolve(resolver)) {\n                    throw makeError(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"resolveName\"\n                    });\n                }\n\n                addrPromise = resolver.resolveName(target).then((addr) => {\n                    if (addr == null) { throw new Error(\"TODO\"); }\n                    getInternal(this).addr = addr;\n                    return addr;\n                });\n            }\n        } else {\n            addrPromise = target.getAddress().then((addr) => {\n                if (addr == null) { throw new Error(\"TODO\"); }\n                getInternal(this).addr = addr;\n                return addr;\n            });\n        }\n\n        // Set our private values\n        setInternal(this, { addrPromise, addr, deployTx, subs });\n\n        // Add the event filters\n        const filters = new Proxy({ }, {\n            get: (target, _prop, receiver) => {\n                // Pass important checks (like `then` for Promise) through\n                if (passProperties.indexOf(<string>_prop) >= 0) {\n                    return Reflect.get(target, _prop, receiver);\n                }\n\n                const prop = String(_prop);\n\n                const result = this.getEvent(prop);\n                if (result) { return result; }\n\n                throw new Error(`unknown contract event: ${ prop }`);\n            }\n        });\n        defineProperties<BaseContract>(this, { filters });\n\n        defineProperties<BaseContract>(this, {\n            fallback: ((iface.receive || iface.fallback) ? (new WrappedFallback(this)): null)\n        });\n\n        // Return a Proxy that will respond to functions\n        return new Proxy(this, {\n            get: (target, _prop, receiver) => {\n                if (_prop in target || passProperties.indexOf(<string>_prop) >= 0) {\n                    return Reflect.get(target, _prop, receiver);\n                }\n\n                const prop = String(_prop);\n\n                const result = target.getFunction(prop);\n                if (result) { return result; }\n\n                throw new Error(`unknown contract method: ${ prop }`);\n            }\n        });\n\n    }\n\n    connect(runner: null | ContractRunner): BaseContract {\n        return new BaseContract(this.target, this.interface, runner);\n    }\n\n    async getAddress(): Promise<string> { return await getInternal(this).addrPromise; }\n\n    async getDeployedCode(): Promise<null | string> {\n        const provider = getProvider(this.runner);\n        assert(provider, \"runner does not support .provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"getDeployedCode\" });\n\n        const code = await provider.getCode(await this.getAddress());\n        if (code === \"0x\") { return null; }\n        return code;\n    }\n\n    async waitForDeployment(): Promise<this> {\n        // We have the deployement transaction; just use that (throws if deployement fails)\n        const deployTx = this.deploymentTransaction();\n        if (deployTx) {\n            await deployTx.wait();\n            return this;\n        }\n\n        // Check for code\n        const code = await this.getDeployedCode();\n        if (code != null) { return this; }\n\n        // Make sure we can subscribe to a provider event\n        const provider = getProvider(this.runner);\n        assert(provider != null, \"contract runner does not support .provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"waitForDeployment\" });\n\n        return new Promise((resolve, reject) => {\n            const checkCode = async () => {\n                try {\n                    const code = await this.getDeployedCode();\n                    if (code != null) { return resolve(this); }\n                    provider.once(\"block\", checkCode);\n                } catch (error) {\n                    reject(error);\n                }\n            };\n            checkCode();\n        });\n    }\n\n    deploymentTransaction(): null | ContractTransactionResponse {\n        return getInternal(this).deployTx;\n    }\n\n    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T {\n        if (typeof(key) !== \"string\") { key = key.format(); }\n        return <T><unknown>(new WrappedMethod(this, key));\n    }\n\n    getEvent(key: string | EventFragment): ContractEvent {\n        if (typeof(key) !== \"string\") { key = key.format(); }\n        return <ContractEvent><unknown>(new WrappedEvent(this, key));\n    }\n\n    async queryTransaction(hash: string): Promise<Array<EventLog>> {\n        // Is this useful?\n        throw new Error(\"@TODO\");\n    }\n\n    async queryFilter(event: ContractEventName, fromBlock?: BlockTag, toBlock?: BlockTag): Promise<Array<EventLog | Log>> {\n        if (fromBlock == null) { fromBlock = 0; }\n        if (toBlock == null) { toBlock = \"latest\"; }\n        const { addr, addrPromise } = getInternal(this);\n        const address = (addr ? addr: (await addrPromise));\n        const { fragment, topics } = await getSubInfo(this, event);\n        const filter = { address, topics, fromBlock, toBlock };\n\n        const provider = getProvider(this.runner);\n        assert(provider, \"contract runner does not have a provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"queryFilter\" });\n\n        return (await provider.getLogs(filter)).map((log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = this.interface.getEvent(log.topics[0]);\n                } catch (error) { }\n            }\n\n            if (foundFragment) {\n                return new EventLog(log, this.interface, foundFragment);\n            } else {\n                return new Log(log, provider);\n            }\n        });\n    }\n\n    async on(event: ContractEventName, listener: Listener): Promise<this> {\n        const sub = await getSub(this, \"on\", event);\n        sub.listeners.push({ listener, once: false });\n        sub.start();\n        return this;\n    }\n\n    async once(event: ContractEventName, listener: Listener): Promise<this> {\n        const sub = await getSub(this, \"once\", event);\n        sub.listeners.push({ listener, once: true });\n        sub.start();\n        return this;\n    }\n\n    async emit(event: ContractEventName, ...args: Array<any>): Promise<boolean> {\n        return await emit(this, event, args, null);\n    }\n\n    async listenerCount(event?: ContractEventName): Promise<number> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return 0; }\n            return sub.listeners.length;\n        }\n\n        const { subs } = getInternal(this);\n\n        let total = 0;\n        for (const { listeners } of subs.values()) {\n            total += listeners.length;\n        }\n        return total;\n    }\n\n    async listeners(event?: ContractEventName): Promise<Array<Listener>> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return [ ]; }\n            return sub.listeners.map(({ listener }) => listener);\n        }\n\n        const { subs } = getInternal(this);\n\n        let result: Array<Listener> = [ ];\n        for (const { listeners } of subs.values()) {\n            result = result.concat(listeners.map(({ listener }) => listener));\n        }\n        return result;\n    }\n\n    async off(event: ContractEventName, listener?: Listener): Promise<this> {\n        const sub = await hasSub(this, event);\n        if (!sub) { return this; }\n\n        if (listener) {\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\n            if (index >= 0) { sub.listeners.splice(index, 1); }\n        }\n\n        if (listener == null || sub.listeners.length === 0) {\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        }\n\n        return this;\n    }\n\n    async removeAllListeners(event?: ContractEventName): Promise<this> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return this; }\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        } else {\n            const { subs } = getInternal(this);\n            for (const { tag, stop } of subs.values()) {\n                stop();\n                subs.delete(tag);\n            }\n        }\n\n        return this;\n    }\n\n    // Alias for \"on\"\n    async addListener(event: ContractEventName, listener: Listener): Promise<this> {\n        return await this.on(event, listener);\n    }\n\n    // Alias for \"off\"\n    async removeListener(event: ContractEventName, listener: Listener): Promise<this> {\n        return await this.off(event, listener);\n    }\n\n    static buildClass<T = ContractInterface>(abi: InterfaceAbi): new (target: string, runner?: null | ContractRunner) => BaseContract & Omit<T, keyof BaseContract> {\n        class CustomContract extends BaseContract {\n            constructor(address: string, runner: null | ContractRunner = null) {\n                super(address, abi, runner);\n            }\n        }\n        return CustomContract as any;\n    };\n\n    static from<T = ContractInterface>(target: string, abi: InterfaceAbi, runner?: null | ContractRunner): BaseContract & Omit<T, keyof BaseContract> {\n        if (runner == null) { runner = null; }\n        const contract = new this(target, abi, runner );\n        return contract as any;\n    }\n}\n\nfunction _ContractBase(): new (target: string, abi: InterfaceAbi, runner?: null | ContractRunner) => BaseContract & Omit<ContractInterface, keyof BaseContract> {\n    return BaseContract as any;\n}\n\nexport class Contract extends _ContractBase() { }\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,KAAK,QAAQ,iBAAiB;AAClD,SAASC,cAAc,QAAQ,qBAAqB;AACpD;AACA;AACA,SAASC,WAAW,EAAEC,GAAG,QAA6B,0BAA0B;AAChF,SACIC,gBAAgB,EAAEC,eAAe,EAAEC,WAAW,EAAEC,iBAAiB,EACjEC,SAAS,EAAEC,MAAM,EAAEC,cAAc,QAC9B,mBAAmB;AAE1B,SACIC,oBAAoB,EAAEC,2BAA2B,EACjDC,2BAA2B,EAC3BC,QAAQ,QACL,eAAe;AAqBtB,MAAMC,IAAI,GAAGC,MAAM,CAAC,CAAC,CAAC;AAkBtB,SAASC,OAAOA,CAACC,KAAU;EACvB,OAAQA,KAAK,IAAI,OAAOA,KAAK,CAACC,IAAK,KAAK,UAAU;AACtD;AAEA,SAASC,WAAWA,CAACF,KAAU;EAC3B,OAAQA,KAAK,IAAI,OAAOA,KAAK,CAACG,WAAY,KAAK,UAAU;AAC7D;AAEA,SAASC,UAAUA,CAACJ,KAAU;EAC1B,OAAQA,KAAK,IAAI,OAAOA,KAAK,CAACK,WAAY,KAAK,UAAU;AAC7D;AAEA,SAASC,OAAOA,CAACN,KAAU;EACvB,OAAQA,KAAK,IAAI,OAAOA,KAAK,CAACO,eAAgB,KAAK,UAAU;AACjE;AAEA,MAAMC,mBAAmB;EACrB,CAAAC,MAAO;EACEC,QAAQ;EAEjBC,YAAYC,QAAsB,EAAEF,QAAuB,EAAEG,IAAgB;IACzE3B,gBAAgB,CAAsB,IAAI,EAAE;MAAEwB;IAAQ,CAAE,CAAC;IACzD,IAAIA,QAAQ,CAACI,MAAM,CAACC,MAAM,GAAGF,IAAI,CAACE,MAAM,EAAE;MACtC,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;;IAGzC;IACA,MAAMC,MAAM,GAAGC,SAAS,CAACN,QAAQ,CAACK,MAAM,EAAE,aAAa,CAAC;IACxD,MAAME,QAAQ,GAAGf,UAAU,CAACa,MAAM,CAAC,GAAGA,MAAM,GAAE,IAAI;IAClD,IAAI,CAAC,CAAAR,MAAO,GAAI,kBAAK;MACjB,MAAMW,YAAY,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACZ,QAAQ,CAACI,MAAM,CAACS,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAI;QACxE,MAAMC,GAAG,GAAGb,IAAI,CAACY,KAAK,CAAC;QACvB,IAAIC,GAAG,IAAI,IAAI,EAAE;UAAE,OAAO,IAAI;;QAE9B,OAAOF,KAAK,CAACG,SAAS,CAACd,IAAI,CAACY,KAAK,CAAC,EAAE,CAACG,IAAI,EAAE5B,KAAK,KAAI;UAChD,IAAI4B,IAAI,KAAK,SAAS,EAAE;YACpB,OAAO7C,cAAc,CAACiB,KAAK,EAAEmB,QAAQ,CAAC;;UAE1C,OAAOnB,KAAK;QAChB,CAAC,CAAC;MACN,CAAC,CAAC,CAAC;MAEH,OAAOY,QAAQ,CAACiB,SAAS,CAACC,kBAAkB,CAACpB,QAAQ,EAAEU,YAAY,CAAC;IACxE,CAAC,CAAC,CAAE;EACR;EAEAW,cAAcA,CAAA;IACV,OAAO,IAAI,CAAC,CAAAtB,MAAO;EACvB;;AAIJ;AACA;AACA;AACA;AACA;AACA;AAEA,SAASuB,kBAAkBA,CAAA;EACvB,OAAOC,QAAe;AAC1B;AAEA,SAASf,SAASA,CAA2BlB,KAAU,EAAEkC,OAA6B;EAClF,IAAIlC,KAAK,IAAI,IAAI,EAAE;IAAE,OAAO,IAAI;;EAChC,IAAI,OAAOA,KAAK,CAACkC,OAAO,CAAE,KAAK,UAAU,EAAE;IAAE,OAAOlC,KAAK;;EACzD,IAAIA,KAAK,CAACmC,QAAQ,IAAI,OAAOnC,KAAK,CAACmC,QAAQ,CAACD,OAAO,CAAE,KAAK,UAAU,EAAE;IAClE,OAAOlC,KAAK,CAACmC,QAAQ;;EAEzB,OAAO,IAAI;AACf;AAEA,SAASC,WAAWA,CAACpC,KAA4B;EAC7C,IAAIA,KAAK,IAAI,IAAI,EAAE;IAAE,OAAO,IAAI;;EAChC,OAAOA,KAAK,CAACmC,QAAQ,IAAI,IAAI;AACjC;AAEA;;;AAGA,OAAO,eAAeE,aAAaA,CAAmCX,GAAQ,EAAEY,OAAuB;EAEnG;EACA,MAAMC,SAAS,GAAGvD,WAAW,CAACF,KAAK,CAAC0D,WAAW,CAACd,GAAG,EAAE,WAAW,CAAC,CAAC;EAElElC,cAAc,CAAC+C,SAAS,CAACE,EAAE,IAAI,IAAI,IAAI,CAACH,OAAO,IAAI,EAAG,EAAEI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EACxE,oBAAoB,EAAE,cAAc,EAAEH,SAAS,CAACE,EAAE,CAAC;EACrDjD,cAAc,CAAC+C,SAAS,CAACI,IAAI,IAAI,IAAI,IAAI,CAACL,OAAO,IAAI,EAAG,EAAEI,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAC5E,sBAAsB,EAAE,gBAAgB,EAAEH,SAAS,CAACI,IAAI,CAAC;EAE3D;EACA,IAAIJ,SAAS,CAACK,IAAI,EAAE;IAChBL,SAAS,CAACK,IAAI,GAAG,MAAM7D,cAAc,CAACwD,SAAS,CAACK,IAAI,CAAC;;EAGzD,OAAqCL,SAAS;AAClD;AAEA;;;AAGA,OAAO,eAAeM,WAAWA,CAACC,OAA8B,EAAEhC,MAAgC,EAAED,IAAgB;EAChH;EACA,MAAMI,MAAM,GAAGC,SAAS,CAAC4B,OAAO,EAAE,aAAa,CAAC;EAChD,MAAM3B,QAAQ,GAAGf,UAAU,CAACa,MAAM,CAAC,GAAGA,MAAM,GAAE,IAAI;EAClD,OAAO,MAAMI,OAAO,CAACC,GAAG,CAACR,MAAM,CAACS,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAI;IACjD,OAAOD,KAAK,CAACG,SAAS,CAACd,IAAI,CAACY,KAAK,CAAC,EAAE,CAACG,IAAI,EAAE5B,KAAK,KAAI;MAChDA,KAAK,GAAGlB,KAAK,CAAC0D,WAAW,CAACxC,KAAK,EAAE4B,IAAI,CAAC;MACtC,IAAIA,IAAI,KAAK,SAAS,EAAE;QAAE,OAAO7C,cAAc,CAACiB,KAAK,EAAEmB,QAAQ,CAAC;;MAChE,OAAOnB,KAAK;IAChB,CAAC,CAAC;EACN,CAAC,CAAC,CAAC;AACP;AAEA,MAAM+C,eAAe;EACRC,SAAS;EAElBrC,YAAaC,QAAsB;IAC/B1B,gBAAgB,CAAkB,IAAI,EAAE;MAAE8D,SAAS,EAAEpC;IAAQ,CAAE,CAAC;IAEhE,MAAMqC,KAAK,GAAG,IAAIC,KAAK,CAAC,IAAI,EAAE;MAC1B;MACAC,KAAK,EAAE,MAAAA,CAAOC,MAAM,EAAEC,OAAO,EAAExC,IAAgB,KAAI;QAC/C,OAAO,MAAMuC,MAAM,CAACE,IAAI,CAAC,GAAGzC,IAAI,CAAC;MACrC;KACH,CAAC;IAEF,OAAOoC,KAAK;EAChB;EAEA,MAAMM,mBAAmBA,CAAChB,SAA0C;IAChE;IAEA,MAAMiB,EAAE,GAA8B,MAAMnB,aAAa,CAASE,SAAS,EAAE,CAAE,MAAM,CAAE,CAAE;IACzFiB,EAAE,CAACf,EAAE,GAAG,MAAM,IAAI,CAACO,SAAS,CAACS,UAAU,EAAE;IAEzC,MAAMC,KAAK,GAAG,IAAI,CAACV,SAAS,CAACnB,SAAS;IAEtC;IACA,MAAM8B,OAAO,GAAGD,KAAK,CAACE,OAAO,IAAKF,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACF,OAAQ;IAC3EnE,cAAc,CAACmE,OAAO,IAAI,CAACH,EAAE,CAACxD,KAAK,IAAIH,IAAI,MAAMA,IAAI,EACnD,2CAA2C,EAAE,iBAAiB,EAAE2D,EAAE,CAACxD,KAAK,CAAC;IAE3E;IACAR,cAAc,CAACkE,KAAK,CAACG,QAAQ,IAAI,CAACL,EAAE,CAACb,IAAI,IAAI,IAAI,MAAM,IAAI,EACzD,2CAA2C,EAAE,gBAAgB,EAAEa,EAAE,CAACb,IAAI,CAAC;IAEzE,OAAOa,EAAE;EACb;EAEA,MAAMM,UAAUA,CAACvB,SAA0C;IACvD,MAAMtB,MAAM,GAAGC,SAAS,CAAC,IAAI,CAAC8B,SAAS,CAAC/B,MAAM,EAAE,MAAM,CAAC;IACvD1B,MAAM,CAACQ,OAAO,CAACkB,MAAM,CAAC,EAAE,0CAA0C,EAC9D,uBAAuB,EAAE;MAAE8C,SAAS,EAAE;IAAM,CAAE,CAAC;IAEnD,MAAMP,EAAE,GAAG,MAAM,IAAI,CAACD,mBAAmB,CAAChB,SAAS,CAAC;IAEpD,IAAI;MACA,OAAO,MAAMtB,MAAM,CAAChB,IAAI,CAACuD,EAAE,CAAC;KAC/B,CAAC,OAAOQ,KAAU,EAAE;MACjB,IAAI7E,eAAe,CAAC6E,KAAK,CAAC,IAAIA,KAAK,CAACrB,IAAI,EAAE;QACtC,MAAM,IAAI,CAACK,SAAS,CAACnB,SAAS,CAACvC,SAAS,CAAC0E,KAAK,CAACrB,IAAI,EAAEa,EAAE,CAAC;;MAE5D,MAAMQ,KAAK;;EAEnB;EAEA,MAAMV,IAAIA,CAACf,SAA0C;IACjD,MAAMtB,MAAM,GAAG,IAAI,CAAC+B,SAAS,CAAC/B,MAAM;IACpC1B,MAAM,CAACe,OAAO,CAACW,MAAM,CAAC,EAAE,uDAAuD,EAC3E,uBAAuB,EAAE;MAAE8C,SAAS,EAAE;IAAiB,CAAE,CAAC;IAE9D,MAAMP,EAAE,GAAG,MAAMvC,MAAM,CAACV,eAAe,CAAC,MAAM,IAAI,CAACgD,mBAAmB,CAAChB,SAAS,CAAC,CAAC;IAClF,MAAMJ,QAAQ,GAAGC,WAAW,CAAC,IAAI,CAACY,SAAS,CAAC/B,MAAM,CAAC;IACnD;IACA;IACA,OAAO,IAAItB,2BAA2B,CAAC,IAAI,CAACqD,SAAS,CAACnB,SAAS,EAAYM,QAAQ,EAAEqB,EAAE,CAAC;EAC5F;EAEA,MAAMrD,WAAWA,CAACoC,SAA0C;IACxD,MAAMtB,MAAM,GAAGC,SAAS,CAAC,IAAI,CAAC8B,SAAS,CAAC/B,MAAM,EAAE,aAAa,CAAC;IAC9D1B,MAAM,CAACW,WAAW,CAACe,MAAM,CAAC,EAAE,iDAAiD,EACzE,uBAAuB,EAAE;MAAE8C,SAAS,EAAE;IAAa,CAAE,CAAC;IAE1D,OAAO,MAAM9C,MAAM,CAACd,WAAW,CAAC,MAAM,IAAI,CAACoD,mBAAmB,CAAChB,SAAS,CAAC,CAAC;EAC9E;;AAGJ,MAAM0B,aACJ,SAAQjC,kBAAkB,EAAE;EAEjBkC,IAAI,GAAW,EAAE,CAAC,CAAG;EACrBlB,SAAS;EACTmB,IAAI;EAEbxD,YAAaC,QAAsB,EAAEwD,GAAW;IAC5C,KAAK,EAAE;IAEPlF,gBAAgB,CAAgB,IAAI,EAAE;MAClCgF,IAAI,EAAEtD,QAAQ,CAACiB,SAAS,CAACwC,eAAe,CAACD,GAAG,CAAC;MAC7CpB,SAAS,EAAEpC,QAAQ;MAAEuD,IAAI,EAAEC;KAC9B,CAAC;IAEF,MAAMnB,KAAK,GAAG,IAAIC,KAAK,CAAC,IAAI,EAAE;MAC1B;MACAC,KAAK,EAAE,MAAAA,CAAOC,MAAM,EAAEC,OAAO,EAAExC,IAA2B,KAAI;QAC1D,MAAMH,QAAQ,GAAG0C,MAAM,CAACkB,WAAW,CAAC,GAAGzD,IAAI,CAAC;QAC5C,IAAIH,QAAQ,CAAC6D,QAAQ,EAAE;UAAE,OAAO,MAAMnB,MAAM,CAACU,UAAU,CAAC,GAAGjD,IAAI,CAAC;;QAChE,OAAO,MAAMuC,MAAM,CAACE,IAAI,CAAC,GAAGzC,IAAI,CAAC;MACrC;KACH,CAAC;IAEF,OAAOoC,KAAK;EAChB;EAEA;EACA,IAAIvC,QAAQA,CAAA;IACR,MAAMA,QAAQ,GAAG,IAAI,CAACsC,SAAS,CAACnB,SAAS,CAAC2C,WAAW,CAAC,IAAI,CAACL,IAAI,CAAC;IAChE5E,MAAM,CAACmB,QAAQ,EAAE,sBAAsB,EAAE,uBAAuB,EAAE;MAC9DqD,SAAS,EAAE;KACd,CAAC;IACF,OAAOrD,QAAQ;EACnB;EAEA4D,WAAWA,CAAC,GAAGzD,IAA2B;IACtC,MAAMH,QAAQ,GAAG,IAAI,CAACsC,SAAS,CAACnB,SAAS,CAAC2C,WAAW,CAAC,IAAI,CAACL,IAAI,EAAEtD,IAAI,CAAC;IACtEtB,MAAM,CAACmB,QAAQ,EAAE,sBAAsB,EAAE,uBAAuB,EAAE;MAC9DqD,SAAS,EAAE;KACd,CAAC;IACF,OAAOrD,QAAQ;EACnB;EAEA,MAAM6C,mBAAmBA,CAAC,GAAG1C,IAA2B;IACpD,MAAMH,QAAQ,GAAG,IAAI,CAAC4D,WAAW,CAAC,GAAGzD,IAAI,CAAC;IAE1C;IACA,IAAI0B,SAAS,GAA6C,EAAG;IAC7D,IAAI7B,QAAQ,CAACI,MAAM,CAACC,MAAM,GAAG,CAAC,KAAKF,IAAI,CAACE,MAAM,EAAE;MAC5CwB,SAAS,GAAG,MAAMF,aAAa,CAACxB,IAAI,CAAC4D,GAAG,EAAE,CAAC;;IAG/C,IAAI/D,QAAQ,CAACI,MAAM,CAACC,MAAM,KAAKF,IAAI,CAACE,MAAM,EAAE;MACxC,MAAM,IAAIC,KAAK,CAAC,4EAA4E,CAAC;;IAGjG,MAAMI,YAAY,GAAG,MAAMyB,WAAW,CAAC,IAAI,CAACG,SAAS,CAAC/B,MAAM,EAAEP,QAAQ,CAACI,MAAM,EAAED,IAAI,CAAC;IAEpF,OAAO6D,MAAM,CAACC,MAAM,CAAC,EAAG,EAAEpC,SAAS,EAAE,MAAMlD,iBAAiB,CAAC;MACzDoD,EAAE,EAAE,IAAI,CAACO,SAAS,CAACS,UAAU,EAAE;MAC/Bd,IAAI,EAAE,IAAI,CAACK,SAAS,CAACnB,SAAS,CAAC+C,kBAAkB,CAAClE,QAAQ,EAAEU,YAAY;KAC3E,CAAC,CAAC;EACP;EAEA,MAAM0C,UAAUA,CAAC,GAAGjD,IAA2B;IAC3C,MAAMgE,MAAM,GAAG,MAAM,IAAI,CAACC,gBAAgB,CAAC,GAAGjE,IAAI,CAAC;IACnD,IAAIgE,MAAM,CAAC9D,MAAM,KAAK,CAAC,EAAE;MAAE,OAAO8D,MAAM,CAAC,CAAC,CAAC;;IAC3C,OAAmBA,MAAM;EAC7B;EAEA,MAAMvB,IAAIA,CAAC,GAAGzC,IAA2B;IACrC,MAAMI,MAAM,GAAG,IAAI,CAAC+B,SAAS,CAAC/B,MAAM;IACpC1B,MAAM,CAACe,OAAO,CAACW,MAAM,CAAC,EAAE,uDAAuD,EAC3E,uBAAuB,EAAE;MAAE8C,SAAS,EAAE;IAAiB,CAAE,CAAC;IAE9D,MAAMP,EAAE,GAAG,MAAMvC,MAAM,CAACV,eAAe,CAAC,MAAM,IAAI,CAACgD,mBAAmB,CAAC,GAAG1C,IAAI,CAAC,CAAC;IAChF,MAAMsB,QAAQ,GAAGC,WAAW,CAAC,IAAI,CAACY,SAAS,CAAC/B,MAAM,CAAC;IACnD;IACA;IACA,OAAO,IAAItB,2BAA2B,CAAC,IAAI,CAACqD,SAAS,CAACnB,SAAS,EAAYM,QAAQ,EAAEqB,EAAE,CAAC;EAC5F;EAEA,MAAMrD,WAAWA,CAAC,GAAGU,IAA2B;IAC5C,MAAMI,MAAM,GAAGC,SAAS,CAAC,IAAI,CAAC8B,SAAS,CAAC/B,MAAM,EAAE,aAAa,CAAC;IAC9D1B,MAAM,CAACW,WAAW,CAACe,MAAM,CAAC,EAAE,iDAAiD,EACzE,uBAAuB,EAAE;MAAE8C,SAAS,EAAE;IAAa,CAAE,CAAC;IAE1D,OAAO,MAAM9C,MAAM,CAACd,WAAW,CAAC,MAAM,IAAI,CAACoD,mBAAmB,CAAC,GAAG1C,IAAI,CAAC,CAAC;EAC5E;EAEA,MAAMiE,gBAAgBA,CAAC,GAAGjE,IAA2B;IACjD,MAAMI,MAAM,GAAGC,SAAS,CAAC,IAAI,CAAC8B,SAAS,CAAC/B,MAAM,EAAE,MAAM,CAAC;IACvD1B,MAAM,CAACQ,OAAO,CAACkB,MAAM,CAAC,EAAE,0CAA0C,EAC9D,uBAAuB,EAAE;MAAE8C,SAAS,EAAE;IAAM,CAAE,CAAC;IAEnD,MAAMP,EAAE,GAAG,MAAM,IAAI,CAACD,mBAAmB,CAAC,GAAG1C,IAAI,CAAC;IAElD,IAAIgE,MAAM,GAAG,IAAI;IACjB,IAAI;MACAA,MAAM,GAAG,MAAM5D,MAAM,CAAChB,IAAI,CAACuD,EAAE,CAAC;KACjC,CAAC,OAAOQ,KAAU,EAAE;MACjB,IAAI7E,eAAe,CAAC6E,KAAK,CAAC,IAAIA,KAAK,CAACrB,IAAI,EAAE;QACtC,MAAM,IAAI,CAACK,SAAS,CAACnB,SAAS,CAACvC,SAAS,CAAC0E,KAAK,CAACrB,IAAI,EAAEa,EAAE,CAAC;;MAE5D,MAAMQ,KAAK;;IAGf,MAAMtD,QAAQ,GAAG,IAAI,CAAC4D,WAAW,CAAC,GAAGzD,IAAI,CAAC;IAC1C,OAAO,IAAI,CAACmC,SAAS,CAACnB,SAAS,CAACkD,oBAAoB,CAACrE,QAAQ,EAAEmE,MAAM,CAAC;EAC1E;;AAGJ,SAASG,iBAAiBA,CAAA;EACtB,OAAO/C,QAAe;AAC1B;AAEA,MAAMgD,YAAgD,SAAQD,iBAAiB,EAAE;EACpEd,IAAI,GAAW,EAAE,CAAC,CAAE;EAEpBlB,SAAS;EACTmB,IAAI;EAEbxD,YAAaC,QAAsB,EAAEwD,GAAW;IAC5C,KAAK,EAAE;IAEPlF,gBAAgB,CAAe,IAAI,EAAE;MACjCgF,IAAI,EAAEtD,QAAQ,CAACiB,SAAS,CAACqD,YAAY,CAACd,GAAG,CAAC;MAC1CpB,SAAS,EAAEpC,QAAQ;MAAEuD,IAAI,EAAEC;KAC9B,CAAC;IAEF,OAAO,IAAIlB,KAAK,CAAC,IAAI,EAAE;MACnB;MACAC,KAAK,EAAEA,CAACC,MAAM,EAAEC,OAAO,EAAExC,IAA0B,KAAI;QACnD,OAAO,IAAIL,mBAAmB,CAACI,QAAQ,EAAEwC,MAAM,CAACkB,WAAW,CAAC,GAAGzD,IAAI,CAAC,EAAEA,IAAI,CAAC;MAC/E;KACH,CAAC;EACN;EAEA;EACA,IAAIH,QAAQA,CAAA;IACR,MAAMA,QAAQ,GAAG,IAAI,CAACsC,SAAS,CAACnB,SAAS,CAACsD,QAAQ,CAAC,IAAI,CAAChB,IAAI,CAAC;IAE7D5E,MAAM,CAACmB,QAAQ,EAAE,sBAAsB,EAAE,uBAAuB,EAAE;MAC9DqD,SAAS,EAAE;KACd,CAAC;IAEF,OAAOrD,QAAQ;EACnB;EAEA4D,WAAWA,CAAC,GAAGzD,IAA0B;IACrC,MAAMH,QAAQ,GAAG,IAAI,CAACsC,SAAS,CAACnB,SAAS,CAACsD,QAAQ,CAAC,IAAI,CAAChB,IAAI,EAAEtD,IAAI,CAAC;IAEnEtB,MAAM,CAACmB,QAAQ,EAAE,sBAAsB,EAAE,uBAAuB,EAAE;MAC9DqD,SAAS,EAAE;KACd,CAAC;IAEF,OAAOrD,QAAQ;EACnB;;AACH;AAUD;AACA;AACA;AACA;AAEA,MAAM0E,QAAQ,GAAGC,MAAM,CAACC,GAAG,CAAC,0BAA0B,CAAC;AAUvD,MAAMC,cAAc,GAAoC,IAAIC,OAAO,EAAE;AAErE,SAASC,WAAWA,CAAC7E,QAAsB,EAAE8E,MAAgB;EACzDH,cAAc,CAACI,GAAG,CAAC/E,QAAQ,CAACwE,QAAQ,CAAC,EAAEM,MAAM,CAAC;AAClD;AAEA,SAASE,WAAWA,CAAChF,QAAsB;EACvC,OAAO2E,cAAc,CAACM,GAAG,CAACjF,QAAQ,CAACwE,QAAQ,CAAC,CAAa;AAC7D;AAEA,SAASU,UAAUA,CAAC9F,KAAU;EAC1B,OAAQA,KAAK,IAAI,OAAOA,KAAM,KAAK,QAAQ,IAAK,gBAAgB,IAAIA,KAAM,IACvE,OAAOA,KAAK,CAAC+B,cAAe,KAAK,UAAW,IAAI/B,KAAK,CAACU,QAAQ;AACrE;AAEA,eAAeqF,UAAUA,CAACnF,QAAsB,EAAEoF,KAAwB;EACtE,IAAIC,MAA4C;EAChD,IAAIvF,QAAQ,GAAyB,IAAI;EAEzC;EACA;EAEA,IAAIwF,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;IACtB,MAAMI,YAAY,GAAG,SAAAA,CAASlC,IAAY;MACtC,IAAI9E,WAAW,CAAC8E,IAAI,EAAE,EAAE,CAAC,EAAE;QAAE,OAAOA,IAAI;;MACxC,MAAMxD,QAAQ,GAAGE,QAAQ,CAACiB,SAAS,CAACsD,QAAQ,CAACjB,IAAI,CAAC;MAClD1E,cAAc,CAACkB,QAAQ,EAAE,kBAAkB,EAAE,MAAM,EAAEwD,IAAI,CAAC;MAC1D,OAAOxD,QAAQ,CAAC2F,SAAS;IAC7B,CAAC;IAED;IACAJ,MAAM,GAAGD,KAAK,CAACzE,GAAG,CAAE+E,CAAC,IAAI;MACrB,IAAIA,CAAC,IAAI,IAAI,EAAE;QAAE,OAAO,IAAI;;MAC5B,IAAIJ,KAAK,CAACC,OAAO,CAACG,CAAC,CAAC,EAAE;QAAE,OAAOA,CAAC,CAAC/E,GAAG,CAAC6E,YAAY,CAAC;;MAClD,OAAOA,YAAY,CAACE,CAAC,CAAC;IAC1B,CAAC,CAAC;GAEL,MAAM,IAAIN,KAAK,KAAK,GAAG,EAAE;IACtBC,MAAM,GAAG,CAAE,IAAI,CAAE;GAEpB,MAAM,IAAI,OAAOD,KAAM,KAAK,QAAQ,EAAE;IACnC,IAAI5G,WAAW,CAAC4G,KAAK,EAAE,EAAE,CAAC,EAAE;MACxB;MACAC,MAAM,GAAG,CAAED,KAAK,CAAE;KACrB,MAAM;MACJ;MACCtF,QAAQ,GAAGE,QAAQ,CAACiB,SAAS,CAACsD,QAAQ,CAACa,KAAK,CAAC;MAC7CxG,cAAc,CAACkB,QAAQ,EAAE,kBAAkB,EAAE,OAAO,EAAEsF,KAAK,CAAC;MAC5DC,MAAM,GAAG,CAAEvF,QAAQ,CAAC2F,SAAS,CAAE;;GAGtC,MAAM,IAAIP,UAAU,CAACE,KAAK,CAAC,EAAE;IAC1B;IACAC,MAAM,GAAG,MAAMD,KAAK,CAACjE,cAAc,EAAE;GAExC,MAAM,IAAI,UAAU,IAAIiE,KAAK,EAAE;IAC5B;IACAtF,QAAQ,GAAGsF,KAAK,CAACtF,QAAQ;IACzBuF,MAAM,GAAG,CAAEvF,QAAQ,CAAC2F,SAAS,CAAE;GAElC,MAAM;IACH7G,cAAc,CAAC,KAAK,EAAE,oBAAoB,EAAE,OAAO,EAAEwG,KAAK,CAAC;;EAG/D;EACAC,MAAM,GAAGA,MAAM,CAAC1E,GAAG,CAAEgF,CAAC,IAAI;IACtB,IAAIA,CAAC,IAAI,IAAI,EAAE;MAAE,OAAO,IAAI;;IAC5B,IAAIL,KAAK,CAACC,OAAO,CAACI,CAAC,CAAC,EAAE;MAClB,MAAMC,KAAK,GAAGN,KAAK,CAACtD,IAAI,CAAC,IAAI6D,GAAG,CAACF,CAAC,CAAChF,GAAG,CAAEgF,CAAC,IAAKA,CAAC,CAACG,WAAW,EAAE,CAAC,CAAC,CAAChB,MAAM,EAAE,CAAC;MACzE,IAAIc,KAAK,CAACzF,MAAM,KAAK,CAAC,EAAE;QAAE,OAAOyF,KAAK,CAAC,CAAC,CAAC;;MACzCA,KAAK,CAACG,IAAI,EAAE;MACZ,OAAOH,KAAK;;IAEhB,OAAOD,CAAC,CAACG,WAAW,EAAE;EAC1B,CAAC,CAAC;EAEF,MAAME,GAAG,GAAGX,MAAM,CAAC1E,GAAG,CAAEgF,CAAC,IAAI;IACzB,IAAIA,CAAC,IAAI,IAAI,EAAE;MAAE,OAAO,MAAM;;IAC9B,IAAIL,KAAK,CAACC,OAAO,CAACI,CAAC,CAAC,EAAE;MAAE,OAAOA,CAAC,CAACM,IAAI,CAAC,GAAG,CAAC;;IAC1C,OAAON,CAAC;EACZ,CAAC,CAAC,CAACM,IAAI,CAAC,GAAG,CAAC;EAEZ,OAAO;IAAEnG,QAAQ;IAAEkG,GAAG;IAAEX;EAAM,CAAE;AACpC;AAEA,eAAea,MAAMA,CAAClG,QAAsB,EAAEoF,KAAwB;EAClE,MAAM;IAAEe;EAAI,CAAE,GAAGnB,WAAW,CAAChF,QAAQ,CAAC;EACtC,OAAOmG,IAAI,CAAClB,GAAG,CAAC,CAAC,MAAME,UAAU,CAACnF,QAAQ,EAAEoF,KAAK,CAAC,EAAEY,GAAG,CAAC,IAAI,IAAI;AACpE;AAEA,eAAeI,MAAMA,CAACpG,QAAsB,EAAEmD,SAAiB,EAAEiC,KAAwB;EACrF;EACA,MAAM7D,QAAQ,GAAGC,WAAW,CAACxB,QAAQ,CAACK,MAAM,CAAC;EAC7C1B,MAAM,CAAC4C,QAAQ,EAAE,8CAA8C,EAC3D,uBAAuB,EAAE;IAAE4B;EAAS,CAAE,CAAC;EAE3C,MAAM;IAAErD,QAAQ;IAAEkG,GAAG;IAAEX;EAAM,CAAE,GAAG,MAAMF,UAAU,CAACnF,QAAQ,EAAEoF,KAAK,CAAC;EAEnE,MAAM;IAAEiB,IAAI;IAAEF;EAAI,CAAE,GAAGnB,WAAW,CAAChF,QAAQ,CAAC;EAE5C,IAAIsG,GAAG,GAAGH,IAAI,CAAClB,GAAG,CAACe,GAAG,CAAC;EACvB,IAAI,CAACM,GAAG,EAAE;IACN,MAAMC,OAAO,GAA0BF,IAAI,GAAGA,IAAI,GAAErG,QAAS;IAC7D,MAAMH,MAAM,GAAG;MAAE0G,OAAO;MAAElB;IAAM,CAAE;IAClC,MAAMmB,QAAQ,GAAIC,GAAQ,IAAI;MAC1B,IAAIC,aAAa,GAAG5G,QAAQ;MAC5B,IAAI4G,aAAa,IAAI,IAAI,EAAE;QACvB,IAAI;UACAA,aAAa,GAAG1G,QAAQ,CAACiB,SAAS,CAACsD,QAAQ,CAACkC,GAAG,CAACpB,MAAM,CAAC,CAAC,CAAC,CAAC;SAC7D,CAAC,OAAOjC,KAAK,EAAE;;MAGpB;MAEA,IAAIsD,aAAa,EAAE;QACf,MAAMC,cAAc,GAAGD,aAAa;QACpC,MAAMzG,IAAI,GAAGH,QAAQ,GAAGE,QAAQ,CAACiB,SAAS,CAAC2F,cAAc,CAAC9G,QAAQ,EAAE2G,GAAG,CAAC1E,IAAI,EAAE0E,GAAG,CAACpB,MAAM,CAAC,GAAE,EAAG;QAC9FwB,IAAI,CAAC7G,QAAQ,EAAEoF,KAAK,EAAEnF,IAAI,EAAGuG,QAAyB,IAAI;UACtD,OAAO,IAAI3H,oBAAoB,CAACmB,QAAQ,EAAEwG,QAAQ,EAAEpB,KAAK,EAAEuB,cAAc,EAAEF,GAAG,CAAC;QACnF,CAAC,CAAC;OACL,MAAM;QACHI,IAAI,CAAC7G,QAAQ,EAAEoF,KAAK,EAAE,EAAG,EAAGoB,QAAyB,IAAI;UACrD,OAAO,IAAI1H,2BAA2B,CAACkB,QAAQ,EAAEwG,QAAQ,EAAEpB,KAAK,EAAEqB,GAAG,CAAC;QAC1E,CAAC,CAAC;;IAEV,CAAC;IAED,IAAIK,QAAQ,GAAwB,EAAG;IACvC,MAAMC,KAAK,GAAGA,CAAA,KAAK;MACf,IAAID,QAAQ,CAAC3G,MAAM,EAAE;QAAE;;MACvB2G,QAAQ,CAACE,IAAI,CAACzF,QAAQ,CAAC0F,EAAE,CAACpH,MAAM,EAAE2G,QAAQ,CAAC,CAAC;IAChD,CAAC;IAED,MAAMU,IAAI,GAAG,MAAAA,CAAA,KAAW;MACpB,IAAIJ,QAAQ,CAAC3G,MAAM,IAAI,CAAC,EAAE;QAAE;;MAE5B,IAAIgH,OAAO,GAAGL,QAAQ;MACtBA,QAAQ,GAAG,EAAG;MACd,MAAMrG,OAAO,CAACC,GAAG,CAACyG,OAAO,CAAC;MAC1B5F,QAAQ,CAAC6F,GAAG,CAACvH,MAAM,EAAE2G,QAAQ,CAAC;IAClC,CAAC;IAEDF,GAAG,GAAG;MAAEN,GAAG;MAAEqB,SAAS,EAAE,EAAG;MAAEN,KAAK;MAAEG;IAAI,CAAE;IAC1Cf,IAAI,CAACpB,GAAG,CAACiB,GAAG,EAAEM,GAAG,CAAC;;EAEtB,OAAOA,GAAG;AACd;AAEA;AACA;AACA;AACA,IAAIgB,QAAQ,GAAiB7G,OAAO,CAAC8G,OAAO,EAAE;AAI9C,eAAeC,KAAKA,CAACxH,QAAsB,EAAEoF,KAAwB,EAAEnF,IAAgB,EAAEwH,WAA+B;EACpH,MAAMH,QAAQ;EAEd,MAAMhB,GAAG,GAAG,MAAMJ,MAAM,CAAClG,QAAQ,EAAEoF,KAAK,CAAC;EACzC,IAAI,CAACkB,GAAG,EAAE;IAAE,OAAO,KAAK;;EAExB,MAAMoB,KAAK,GAAGpB,GAAG,CAACe,SAAS,CAAClH,MAAM;EAClCmG,GAAG,CAACe,SAAS,GAAGf,GAAG,CAACe,SAAS,CAACxH,MAAM,CAAC,CAAC;IAAE2G,QAAQ;IAAEmB;EAAI,CAAE,KAAI;IACxD,MAAMC,QAAQ,GAAG3H,IAAI,CAAC4H,KAAK,EAAE;IAC7B,IAAIJ,WAAW,EAAE;MACbG,QAAQ,CAACZ,IAAI,CAACS,WAAW,CAACE,IAAI,GAAG,IAAI,GAAEnB,QAAQ,CAAC,CAAC;;IAErD,IAAI;MACAA,QAAQ,CAACnH,IAAI,CAACW,QAAQ,EAAE,GAAG4H,QAAQ,CAAC;KACvC,CAAC,OAAOxE,KAAK,EAAE;IAChB,OAAO,CAACuE,IAAI;EAChB,CAAC,CAAC;EACF,OAAQD,KAAK,GAAG,CAAC;AACrB;AAEA,eAAeb,IAAIA,CAAC7G,QAAsB,EAAEoF,KAAwB,EAAEnF,IAAgB,EAAEwH,WAA+B;EACnH,IAAI;IACA,MAAMH,QAAQ;GACjB,CAAC,OAAOlE,KAAK,EAAE;EAEhB,MAAM0E,aAAa,GAAGN,KAAK,CAACxH,QAAQ,EAAEoF,KAAK,EAAEnF,IAAI,EAAEwH,WAAW,CAAC;EAC/DH,QAAQ,GAAGQ,aAAa;EACxB,OAAO,MAAMA,aAAa;AAC9B;AAEA,MAAMC,cAAc,GAAG,CAAE,MAAM,CAAE;AACjC,OAAM,MAAOC,YAAY;EACZxF,MAAM;EACNvB,SAAS;EACTZ,MAAM;EAEN4H,OAAO;EAEP,CAACzD,QAAQ;EAETvB,QAAQ;EAEjBlD,YAAYyC,MAA4B,EAAE0F,GAA6B,EAAE7H,MAA8B,EAAE8H,SAAsC;IAC3I,IAAI9H,MAAM,IAAI,IAAI,EAAE;MAAEA,MAAM,GAAG,IAAI;;IACnC,MAAMyC,KAAK,GAAG7E,SAAS,CAAC+D,IAAI,CAACkG,GAAG,CAAC;IACjC5J,gBAAgB,CAAe,IAAI,EAAE;MAAEkE,MAAM;MAAEnC,MAAM;MAAEY,SAAS,EAAE6B;IAAK,CAAE,CAAC;IAE1EgB,MAAM,CAACsE,cAAc,CAAC,IAAI,EAAE5D,QAAQ,EAAE;MAAEpF,KAAK,EAAE;IAAG,CAAE,CAAC;IAErD,IAAIiJ,WAAW;IACf,IAAIhC,IAAI,GAAG,IAAI;IAEf,IAAIiC,QAAQ,GAAuC,IAAI;IACvD,IAAIH,SAAS,EAAE;MACX,MAAM5G,QAAQ,GAAGC,WAAW,CAACnB,MAAM,CAAC;MACpC;MACA;MACAiI,QAAQ,GAAG,IAAIvJ,2BAA2B,CAAC,IAAI,CAACkC,SAAS,EAAYM,QAAQ,EAAE4G,SAAS,CAAC;;IAG7F,IAAIhC,IAAI,GAAG,IAAIoC,GAAG,EAAE;IAEpB;IACA,IAAI,OAAO/F,MAAO,KAAK,QAAQ,EAAE;MAC7B,IAAIhE,WAAW,CAACgE,MAAM,CAAC,EAAE;QACrB6D,IAAI,GAAG7D,MAAM;QACb6F,WAAW,GAAG5H,OAAO,CAAC8G,OAAO,CAAC/E,MAAM,CAAC;OAExC,MAAM;QACH,MAAMjC,QAAQ,GAAGD,SAAS,CAACD,MAAM,EAAE,aAAa,CAAC;QACjD,IAAI,CAACb,UAAU,CAACe,QAAQ,CAAC,EAAE;UACvB,MAAM7B,SAAS,CAAC,kDAAkD,EAAE,uBAAuB,EAAE;YACzFyE,SAAS,EAAE;WACd,CAAC;;QAGNkF,WAAW,GAAG9H,QAAQ,CAACd,WAAW,CAAC+C,MAAM,CAAC,CAACgG,IAAI,CAAEnC,IAAI,IAAI;UACrD,IAAIA,IAAI,IAAI,IAAI,EAAE;YAAE,MAAM,IAAIjG,KAAK,CAAC,MAAM,CAAC;;UAC3C4E,WAAW,CAAC,IAAI,CAAC,CAACqB,IAAI,GAAGA,IAAI;UAC7B,OAAOA,IAAI;QACf,CAAC,CAAC;;KAET,MAAM;MACHgC,WAAW,GAAG7F,MAAM,CAACK,UAAU,EAAE,CAAC2F,IAAI,CAAEnC,IAAI,IAAI;QAC5C,IAAIA,IAAI,IAAI,IAAI,EAAE;UAAE,MAAM,IAAIjG,KAAK,CAAC,MAAM,CAAC;;QAC3C4E,WAAW,CAAC,IAAI,CAAC,CAACqB,IAAI,GAAGA,IAAI;QAC7B,OAAOA,IAAI;MACf,CAAC,CAAC;;IAGN;IACAxB,WAAW,CAAC,IAAI,EAAE;MAAEwD,WAAW;MAAEhC,IAAI;MAAEiC,QAAQ;MAAEnC;IAAI,CAAE,CAAC;IAExD;IACA,MAAM8B,OAAO,GAAG,IAAI3F,KAAK,CAAC,EAAG,EAAE;MAC3B2C,GAAG,EAAEA,CAACzC,MAAM,EAAEiG,KAAK,EAAEC,QAAQ,KAAI;QAC7B;QACA,IAAIX,cAAc,CAACjG,OAAO,CAAS2G,KAAK,CAAC,IAAI,CAAC,EAAE;UAC5C,OAAOE,OAAO,CAAC1D,GAAG,CAACzC,MAAM,EAAEiG,KAAK,EAAEC,QAAQ,CAAC;;QAG/C,MAAME,IAAI,GAAGC,MAAM,CAACJ,KAAK,CAAC;QAE1B,MAAMxE,MAAM,GAAG,IAAI,CAACM,QAAQ,CAACqE,IAAI,CAAC;QAClC,IAAI3E,MAAM,EAAE;UAAE,OAAOA,MAAM;;QAE3B,MAAM,IAAI7D,KAAK,CAAC,2BAA4BwI,IAAK,EAAE,CAAC;MACxD;KACH,CAAC;IACFtK,gBAAgB,CAAe,IAAI,EAAE;MAAE2J;IAAO,CAAE,CAAC;IAEjD3J,gBAAgB,CAAe,IAAI,EAAE;MACjC2E,QAAQ,EAAIH,KAAK,CAACE,OAAO,IAAIF,KAAK,CAACG,QAAQ,GAAK,IAAId,eAAe,CAAC,IAAI,CAAC,GAAG;KAC/E,CAAC;IAEF;IACA,OAAO,IAAIG,KAAK,CAAC,IAAI,EAAE;MACnB2C,GAAG,EAAEA,CAACzC,MAAM,EAAEiG,KAAK,EAAEC,QAAQ,KAAI;QAC7B,IAAID,KAAK,IAAIjG,MAAM,IAAIuF,cAAc,CAACjG,OAAO,CAAS2G,KAAK,CAAC,IAAI,CAAC,EAAE;UAC/D,OAAOE,OAAO,CAAC1D,GAAG,CAACzC,MAAM,EAAEiG,KAAK,EAAEC,QAAQ,CAAC;;QAG/C,MAAME,IAAI,GAAGC,MAAM,CAACJ,KAAK,CAAC;QAE1B,MAAMxE,MAAM,GAAGzB,MAAM,CAACoB,WAAW,CAACgF,IAAI,CAAC;QACvC,IAAI3E,MAAM,EAAE;UAAE,OAAOA,MAAM;;QAE3B,MAAM,IAAI7D,KAAK,CAAC,4BAA6BwI,IAAK,EAAE,CAAC;MACzD;KACH,CAAC;EAEN;EAEAE,OAAOA,CAACzI,MAA6B;IACjC,OAAO,IAAI2H,YAAY,CAAC,IAAI,CAACxF,MAAM,EAAE,IAAI,CAACvB,SAAS,EAAEZ,MAAM,CAAC;EAChE;EAEA,MAAMwC,UAAUA,CAAA;IAAsB,OAAO,MAAMmC,WAAW,CAAC,IAAI,CAAC,CAACqD,WAAW;EAAE;EAElF,MAAMU,eAAeA,CAAA;IACjB,MAAMxH,QAAQ,GAAGC,WAAW,CAAC,IAAI,CAACnB,MAAM,CAAC;IACzC1B,MAAM,CAAC4C,QAAQ,EAAE,mCAAmC,EAChD,uBAAuB,EAAE;MAAE4B,SAAS,EAAE;IAAiB,CAAE,CAAC;IAE9D,MAAM6F,IAAI,GAAG,MAAMzH,QAAQ,CAAC0H,OAAO,CAAC,MAAM,IAAI,CAACpG,UAAU,EAAE,CAAC;IAC5D,IAAImG,IAAI,KAAK,IAAI,EAAE;MAAE,OAAO,IAAI;;IAChC,OAAOA,IAAI;EACf;EAEA,MAAME,iBAAiBA,CAAA;IACnB;IACA,MAAMZ,QAAQ,GAAG,IAAI,CAACa,qBAAqB,EAAE;IAC7C,IAAIb,QAAQ,EAAE;MACV,MAAMA,QAAQ,CAACc,IAAI,EAAE;MACrB,OAAO,IAAI;;IAGf;IACA,MAAMJ,IAAI,GAAG,MAAM,IAAI,CAACD,eAAe,EAAE;IACzC,IAAIC,IAAI,IAAI,IAAI,EAAE;MAAE,OAAO,IAAI;;IAE/B;IACA,MAAMzH,QAAQ,GAAGC,WAAW,CAAC,IAAI,CAACnB,MAAM,CAAC;IACzC1B,MAAM,CAAC4C,QAAQ,IAAI,IAAI,EAAE,4CAA4C,EACjE,uBAAuB,EAAE;MAAE4B,SAAS,EAAE;IAAmB,CAAE,CAAC;IAEhE,OAAO,IAAI1C,OAAO,CAAC,CAAC8G,OAAO,EAAE8B,MAAM,KAAI;MACnC,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAW;QACzB,IAAI;UACA,MAAMN,IAAI,GAAG,MAAM,IAAI,CAACD,eAAe,EAAE;UACzC,IAAIC,IAAI,IAAI,IAAI,EAAE;YAAE,OAAOzB,OAAO,CAAC,IAAI,CAAC;;UACxChG,QAAQ,CAACoG,IAAI,CAAC,OAAO,EAAE2B,SAAS,CAAC;SACpC,CAAC,OAAOlG,KAAK,EAAE;UACZiG,MAAM,CAACjG,KAAK,CAAC;;MAErB,CAAC;MACDkG,SAAS,EAAE;IACf,CAAC,CAAC;EACN;EAEAH,qBAAqBA,CAAA;IACjB,OAAOnE,WAAW,CAAC,IAAI,CAAC,CAACsD,QAAQ;EACrC;EAEA1E,WAAWA,CAA4CJ,GAA8B;IACjF,IAAI,OAAOA,GAAI,KAAK,QAAQ,EAAE;MAAEA,GAAG,GAAGA,GAAG,CAAC+F,MAAM,EAAE;;IAClD,OAAoB,IAAIlG,aAAa,CAAC,IAAI,EAAEG,GAAG,CAAC;EACpD;EAEAe,QAAQA,CAACf,GAA2B;IAChC,IAAI,OAAOA,GAAI,KAAK,QAAQ,EAAE;MAAEA,GAAG,GAAGA,GAAG,CAAC+F,MAAM,EAAE;;IAClD,OAAgC,IAAIlF,YAAY,CAAC,IAAI,EAAEb,GAAG,CAAC;EAC/D;EAEA,MAAMgG,gBAAgBA,CAACC,IAAY;IAC/B;IACA,MAAM,IAAIrJ,KAAK,CAAC,OAAO,CAAC;EAC5B;EAEA,MAAMsJ,WAAWA,CAACtE,KAAwB,EAAEuE,SAAoB,EAAEC,OAAkB;IAChF,IAAID,SAAS,IAAI,IAAI,EAAE;MAAEA,SAAS,GAAG,CAAC;;IACtC,IAAIC,OAAO,IAAI,IAAI,EAAE;MAAEA,OAAO,GAAG,QAAQ;;IACzC,MAAM;MAAEvD,IAAI;MAAEgC;IAAW,CAAE,GAAGrD,WAAW,CAAC,IAAI,CAAC;IAC/C,MAAMuB,OAAO,GAAIF,IAAI,GAAGA,IAAI,GAAG,MAAMgC,WAAa;IAClD,MAAM;MAAEvI,QAAQ;MAAEuF;IAAM,CAAE,GAAG,MAAMF,UAAU,CAAC,IAAI,EAAEC,KAAK,CAAC;IAC1D,MAAMvF,MAAM,GAAG;MAAE0G,OAAO;MAAElB,MAAM;MAAEsE,SAAS;MAAEC;IAAO,CAAE;IAEtD,MAAMrI,QAAQ,GAAGC,WAAW,CAAC,IAAI,CAACnB,MAAM,CAAC;IACzC1B,MAAM,CAAC4C,QAAQ,EAAE,0CAA0C,EACvD,uBAAuB,EAAE;MAAE4B,SAAS,EAAE;IAAa,CAAE,CAAC;IAE1D,OAAO,CAAC,MAAM5B,QAAQ,CAACsI,OAAO,CAAChK,MAAM,CAAC,EAAEc,GAAG,CAAE8F,GAAG,IAAI;MAChD,IAAIC,aAAa,GAAG5G,QAAQ;MAC5B,IAAI4G,aAAa,IAAI,IAAI,EAAE;QACvB,IAAI;UACAA,aAAa,GAAG,IAAI,CAACzF,SAAS,CAACsD,QAAQ,CAACkC,GAAG,CAACpB,MAAM,CAAC,CAAC,CAAC,CAAC;SACzD,CAAC,OAAOjC,KAAK,EAAE;;MAGpB,IAAIsD,aAAa,EAAE;QACf,OAAO,IAAI1H,QAAQ,CAACyH,GAAG,EAAE,IAAI,CAACxF,SAAS,EAAEyF,aAAa,CAAC;OAC1D,MAAM;QACH,OAAO,IAAIrI,GAAG,CAACoI,GAAG,EAAElF,QAAQ,CAAC;;IAErC,CAAC,CAAC;EACN;EAEA,MAAM0F,EAAEA,CAAC7B,KAAwB,EAAEoB,QAAkB;IACjD,MAAMF,GAAG,GAAG,MAAMF,MAAM,CAAC,IAAI,EAAE,IAAI,EAAEhB,KAAK,CAAC;IAC3CkB,GAAG,CAACe,SAAS,CAACL,IAAI,CAAC;MAAER,QAAQ;MAAEmB,IAAI,EAAE;IAAK,CAAE,CAAC;IAC7CrB,GAAG,CAACS,KAAK,EAAE;IACX,OAAO,IAAI;EACf;EAEA,MAAMY,IAAIA,CAACvC,KAAwB,EAAEoB,QAAkB;IACnD,MAAMF,GAAG,GAAG,MAAMF,MAAM,CAAC,IAAI,EAAE,MAAM,EAAEhB,KAAK,CAAC;IAC7CkB,GAAG,CAACe,SAAS,CAACL,IAAI,CAAC;MAAER,QAAQ;MAAEmB,IAAI,EAAE;IAAI,CAAE,CAAC;IAC5CrB,GAAG,CAACS,KAAK,EAAE;IACX,OAAO,IAAI;EACf;EAEA,MAAMF,IAAIA,CAACzB,KAAwB,EAAE,GAAGnF,IAAgB;IACpD,OAAO,MAAM4G,IAAI,CAAC,IAAI,EAAEzB,KAAK,EAAEnF,IAAI,EAAE,IAAI,CAAC;EAC9C;EAEA,MAAM6J,aAAaA,CAAC1E,KAAyB;IACzC,IAAIA,KAAK,EAAE;MACP,MAAMkB,GAAG,GAAG,MAAMJ,MAAM,CAAC,IAAI,EAAEd,KAAK,CAAC;MACrC,IAAI,CAACkB,GAAG,EAAE;QAAE,OAAO,CAAC;;MACpB,OAAOA,GAAG,CAACe,SAAS,CAAClH,MAAM;;IAG/B,MAAM;MAAEgG;IAAI,CAAE,GAAGnB,WAAW,CAAC,IAAI,CAAC;IAElC,IAAI+E,KAAK,GAAG,CAAC;IACb,KAAK,MAAM;MAAE1C;IAAS,CAAE,IAAIlB,IAAI,CAACrB,MAAM,EAAE,EAAE;MACvCiF,KAAK,IAAI1C,SAAS,CAAClH,MAAM;;IAE7B,OAAO4J,KAAK;EAChB;EAEA,MAAM1C,SAASA,CAACjC,KAAyB;IACrC,IAAIA,KAAK,EAAE;MACP,MAAMkB,GAAG,GAAG,MAAMJ,MAAM,CAAC,IAAI,EAAEd,KAAK,CAAC;MACrC,IAAI,CAACkB,GAAG,EAAE;QAAE,OAAO,EAAG;;MACtB,OAAOA,GAAG,CAACe,SAAS,CAAC1G,GAAG,CAAC,CAAC;QAAE6F;MAAQ,CAAE,KAAKA,QAAQ,CAAC;;IAGxD,MAAM;MAAEL;IAAI,CAAE,GAAGnB,WAAW,CAAC,IAAI,CAAC;IAElC,IAAIf,MAAM,GAAoB,EAAG;IACjC,KAAK,MAAM;MAAEoD;IAAS,CAAE,IAAIlB,IAAI,CAACrB,MAAM,EAAE,EAAE;MACvCb,MAAM,GAAGA,MAAM,CAAC+F,MAAM,CAAC3C,SAAS,CAAC1G,GAAG,CAAC,CAAC;QAAE6F;MAAQ,CAAE,KAAKA,QAAQ,CAAC,CAAC;;IAErE,OAAOvC,MAAM;EACjB;EAEA,MAAMmD,GAAGA,CAAChC,KAAwB,EAAEoB,QAAmB;IACnD,MAAMF,GAAG,GAAG,MAAMJ,MAAM,CAAC,IAAI,EAAEd,KAAK,CAAC;IACrC,IAAI,CAACkB,GAAG,EAAE;MAAE,OAAO,IAAI;;IAEvB,IAAIE,QAAQ,EAAE;MACV,MAAM3F,KAAK,GAAGyF,GAAG,CAACe,SAAS,CAAC1G,GAAG,CAAC,CAAC;QAAE6F;MAAQ,CAAE,KAAKA,QAAQ,CAAC,CAAC1E,OAAO,CAAC0E,QAAQ,CAAC;MAC7E,IAAI3F,KAAK,IAAI,CAAC,EAAE;QAAEyF,GAAG,CAACe,SAAS,CAAC4C,MAAM,CAACpJ,KAAK,EAAE,CAAC,CAAC;;;IAGpD,IAAI2F,QAAQ,IAAI,IAAI,IAAIF,GAAG,CAACe,SAAS,CAAClH,MAAM,KAAK,CAAC,EAAE;MAChDmG,GAAG,CAACY,IAAI,EAAE;MACVlC,WAAW,CAAC,IAAI,CAAC,CAACmB,IAAI,CAAC+D,MAAM,CAAC5D,GAAG,CAACN,GAAG,CAAC;;IAG1C,OAAO,IAAI;EACf;EAEA,MAAMmE,kBAAkBA,CAAC/E,KAAyB;IAC9C,IAAIA,KAAK,EAAE;MACP,MAAMkB,GAAG,GAAG,MAAMJ,MAAM,CAAC,IAAI,EAAEd,KAAK,CAAC;MACrC,IAAI,CAACkB,GAAG,EAAE;QAAE,OAAO,IAAI;;MACvBA,GAAG,CAACY,IAAI,EAAE;MACVlC,WAAW,CAAC,IAAI,CAAC,CAACmB,IAAI,CAAC+D,MAAM,CAAC5D,GAAG,CAACN,GAAG,CAAC;KACzC,MAAM;MACH,MAAM;QAAEG;MAAI,CAAE,GAAGnB,WAAW,CAAC,IAAI,CAAC;MAClC,KAAK,MAAM;QAAEgB,GAAG;QAAEkB;MAAI,CAAE,IAAIf,IAAI,CAACrB,MAAM,EAAE,EAAE;QACvCoC,IAAI,EAAE;QACNf,IAAI,CAAC+D,MAAM,CAAClE,GAAG,CAAC;;;IAIxB,OAAO,IAAI;EACf;EAEA;EACA,MAAMoE,WAAWA,CAAChF,KAAwB,EAAEoB,QAAkB;IAC1D,OAAO,MAAM,IAAI,CAACS,EAAE,CAAC7B,KAAK,EAAEoB,QAAQ,CAAC;EACzC;EAEA;EACA,MAAM6D,cAAcA,CAACjF,KAAwB,EAAEoB,QAAkB;IAC7D,OAAO,MAAM,IAAI,CAACY,GAAG,CAAChC,KAAK,EAAEoB,QAAQ,CAAC;EAC1C;EAEA,OAAO8D,UAAUA,CAAwBpC,GAAiB;IACtD,MAAMqC,cAAe,SAAQvC,YAAY;MACrCjI,YAAYwG,OAAe,EAAElG,MAAA,GAAgC,IAAI;QAC7D,KAAK,CAACkG,OAAO,EAAE2B,GAAG,EAAE7H,MAAM,CAAC;MAC/B;;IAEJ,OAAOkK,cAAqB;EAChC;EAEA,OAAOvI,IAAIA,CAAwBQ,MAAc,EAAE0F,GAAiB,EAAE7H,MAA8B;IAChG,IAAIA,MAAM,IAAI,IAAI,EAAE;MAAEA,MAAM,GAAG,IAAI;;IACnC,MAAML,QAAQ,GAAG,IAAI,IAAI,CAACwC,MAAM,EAAE0F,GAAG,EAAE7H,MAAM,CAAE;IAC/C,OAAOL,QAAe;EAC1B;;AAGJ,SAASwK,aAAaA,CAAA;EAClB,OAAOxC,YAAmB;AAC9B;AAEA,OAAM,MAAOyC,QAAS,SAAQD,aAAa,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}