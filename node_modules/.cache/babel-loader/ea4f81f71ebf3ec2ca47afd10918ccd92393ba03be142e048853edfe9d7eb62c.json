{"ast":null,"code":"/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst POW_2_256 = _2n ** BigInt(256);\nconst CURVE = {\n  a: _0n,\n  b: BigInt(7),\n  P: POW_2_256 - _2n ** BigInt(32) - BigInt(977),\n  n: POW_2_256 - BigInt('432420386565659656852420866394968145599'),\n  h: _1n,\n  Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n  Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n  beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee')\n};\nexport { CURVE };\nfunction weistrass(x) {\n  const {\n    a,\n    b\n  } = CURVE;\n  const x2 = mod(x * x);\n  const x3 = mod(x2 * x);\n  return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass JacobianPoint {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  static fromAffine(p) {\n    if (!(p instanceof Point)) {\n      throw new TypeError('JacobianPoint#fromAffine: expected Point');\n    }\n    return new JacobianPoint(p.x, p.y, _1n);\n  }\n  static toAffineBatch(points) {\n    const toInv = invertBatch(points.map(p => p.z));\n    return points.map((p, i) => p.toAffine(toInv[i]));\n  }\n  static normalizeZ(points) {\n    return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n  }\n  equals(other) {\n    if (!(other instanceof JacobianPoint)) throw new TypeError('JacobianPoint expected');\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const {\n      x: X2,\n      y: Y2,\n      z: Z2\n    } = other;\n    const Z1Z1 = mod(Z1 ** _2n);\n    const Z2Z2 = mod(Z2 ** _2n);\n    const U1 = mod(X1 * Z2Z2);\n    const U2 = mod(X2 * Z1Z1);\n    const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n    const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n    return U1 === U2 && S1 === S2;\n  }\n  negate() {\n    return new JacobianPoint(this.x, mod(-this.y), this.z);\n  }\n  double() {\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const A = mod(X1 ** _2n);\n    const B = mod(Y1 ** _2n);\n    const C = mod(B ** _2n);\n    const D = mod(_2n * (mod((X1 + B) ** _2n) - A - C));\n    const E = mod(_3n * A);\n    const F = mod(E ** _2n);\n    const X3 = mod(F - _2n * D);\n    const Y3 = mod(E * (D - X3) - _8n * C);\n    const Z3 = mod(_2n * Y1 * Z1);\n    return new JacobianPoint(X3, Y3, Z3);\n  }\n  add(other) {\n    if (!(other instanceof JacobianPoint)) throw new TypeError('JacobianPoint expected');\n    const {\n      x: X1,\n      y: Y1,\n      z: Z1\n    } = this;\n    const {\n      x: X2,\n      y: Y2,\n      z: Z2\n    } = other;\n    if (X2 === _0n || Y2 === _0n) return this;\n    if (X1 === _0n || Y1 === _0n) return other;\n    const Z1Z1 = mod(Z1 ** _2n);\n    const Z2Z2 = mod(Z2 ** _2n);\n    const U1 = mod(X1 * Z2Z2);\n    const U2 = mod(X2 * Z1Z1);\n    const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n    const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n    const H = mod(U2 - U1);\n    const r = mod(S2 - S1);\n    if (H === _0n) {\n      if (r === _0n) {\n        return this.double();\n      } else {\n        return JacobianPoint.ZERO;\n      }\n    }\n    const HH = mod(H ** _2n);\n    const HHH = mod(H * HH);\n    const V = mod(U1 * HH);\n    const X3 = mod(r ** _2n - HHH - _2n * V);\n    const Y3 = mod(r * (V - X3) - S1 * HHH);\n    const Z3 = mod(Z1 * Z2 * H);\n    return new JacobianPoint(X3, Y3, Z3);\n  }\n  subtract(other) {\n    return this.add(other.negate());\n  }\n  multiplyUnsafe(scalar) {\n    const P0 = JacobianPoint.ZERO;\n    if (typeof scalar === 'bigint' && scalar === _0n) return P0;\n    let n = normalizeScalar(scalar);\n    if (n === _1n) return this;\n    if (!USE_ENDOMORPHISM) {\n      let p = P0;\n      let d = this;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    }\n    let {\n      k1neg,\n      k1,\n      k2neg,\n      k2\n    } = splitScalarEndo(n);\n    let k1p = P0;\n    let k2p = P0;\n    let d = this;\n    while (k1 > _0n || k2 > _0n) {\n      if (k1 & _1n) k1p = k1p.add(d);\n      if (k2 & _1n) k2p = k2p.add(d);\n      d = d.double();\n      k1 >>= _1n;\n      k2 >>= _1n;\n    }\n    if (k1neg) k1p = k1p.negate();\n    if (k2neg) k2p = k2p.negate();\n    k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n    return k1p.add(k2p);\n  }\n  precomputeWindow(W) {\n    const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n    const points = [];\n    let p = this;\n    let base = p;\n    for (let window = 0; window < windows; window++) {\n      base = p;\n      points.push(base);\n      for (let i = 1; i < 2 ** (W - 1); i++) {\n        base = base.add(p);\n        points.push(base);\n      }\n      p = base.double();\n    }\n    return points;\n  }\n  wNAF(n, affinePoint) {\n    if (!affinePoint && this.equals(JacobianPoint.BASE)) affinePoint = Point.BASE;\n    const W = affinePoint && affinePoint._WINDOW_SIZE || 1;\n    if (256 % W) {\n      throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n    }\n    let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n    if (!precomputes) {\n      precomputes = this.precomputeWindow(W);\n      if (affinePoint && W !== 1) {\n        precomputes = JacobianPoint.normalizeZ(precomputes);\n        pointPrecomputes.set(affinePoint, precomputes);\n      }\n    }\n    let p = JacobianPoint.ZERO;\n    let f = JacobianPoint.ZERO;\n    const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n    const windowSize = 2 ** (W - 1);\n    const mask = BigInt(2 ** W - 1);\n    const maxNumber = 2 ** W;\n    const shiftBy = BigInt(W);\n    for (let window = 0; window < windows; window++) {\n      const offset = window * windowSize;\n      let wbits = Number(n & mask);\n      n >>= shiftBy;\n      if (wbits > windowSize) {\n        wbits -= maxNumber;\n        n += _1n;\n      }\n      if (wbits === 0) {\n        let pr = precomputes[offset];\n        if (window % 2) pr = pr.negate();\n        f = f.add(pr);\n      } else {\n        let cached = precomputes[offset + Math.abs(wbits) - 1];\n        if (wbits < 0) cached = cached.negate();\n        p = p.add(cached);\n      }\n    }\n    return {\n      p,\n      f\n    };\n  }\n  multiply(scalar, affinePoint) {\n    let n = normalizeScalar(scalar);\n    let point;\n    let fake;\n    if (USE_ENDOMORPHISM) {\n      const {\n        k1neg,\n        k1,\n        k2neg,\n        k2\n      } = splitScalarEndo(n);\n      let {\n        p: k1p,\n        f: f1p\n      } = this.wNAF(k1, affinePoint);\n      let {\n        p: k2p,\n        f: f2p\n      } = this.wNAF(k2, affinePoint);\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n      point = k1p.add(k2p);\n      fake = f1p.add(f2p);\n    } else {\n      const {\n        p,\n        f\n      } = this.wNAF(n, affinePoint);\n      point = p;\n      fake = f;\n    }\n    return JacobianPoint.normalizeZ([point, fake])[0];\n  }\n  toAffine(invZ = invert(this.z)) {\n    const {\n      x,\n      y,\n      z\n    } = this;\n    const iz1 = invZ;\n    const iz2 = mod(iz1 * iz1);\n    const iz3 = mod(iz2 * iz1);\n    const ax = mod(x * iz2);\n    const ay = mod(y * iz3);\n    const zz = mod(z * iz1);\n    if (zz !== _1n) throw new Error('invZ was invalid');\n    return new Point(ax, ay);\n  }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  _setWindowSize(windowSize) {\n    this._WINDOW_SIZE = windowSize;\n    pointPrecomputes.delete(this);\n  }\n  static fromCompressedHex(bytes) {\n    const isShort = bytes.length === 32;\n    const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n    if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n    const y2 = weistrass(x);\n    let y = sqrtMod(y2);\n    const isYOdd = (y & _1n) === _1n;\n    if (isShort) {\n      if (isYOdd) y = mod(-y);\n    } else {\n      const isFirstByteOdd = (bytes[0] & 1) === 1;\n      if (isFirstByteOdd !== isYOdd) y = mod(-y);\n    }\n    const point = new Point(x, y);\n    point.assertValidity();\n    return point;\n  }\n  static fromUncompressedHex(bytes) {\n    const x = bytesToNumber(bytes.subarray(1, 33));\n    const y = bytesToNumber(bytes.subarray(33, 65));\n    const point = new Point(x, y);\n    point.assertValidity();\n    return point;\n  }\n  static fromHex(hex) {\n    const bytes = ensureBytes(hex);\n    const len = bytes.length;\n    const header = bytes[0];\n    if (len === 32 || len === 33 && (header === 0x02 || header === 0x03)) {\n      return this.fromCompressedHex(bytes);\n    }\n    if (len === 65 && header === 0x04) return this.fromUncompressedHex(bytes);\n    throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n  }\n  static fromPrivateKey(privateKey) {\n    return Point.BASE.multiply(normalizePrivateKey(privateKey));\n  }\n  static fromSignature(msgHash, signature, recovery) {\n    msgHash = ensureBytes(msgHash);\n    const h = truncateHash(msgHash);\n    const {\n      r,\n      s\n    } = normalizeSignature(signature);\n    if (recovery !== 0 && recovery !== 1) {\n      throw new Error('Cannot recover signature: invalid recovery bit');\n    }\n    const prefix = recovery & 1 ? '03' : '02';\n    const R = Point.fromHex(prefix + numTo32bStr(r));\n    const {\n      n\n    } = CURVE;\n    const rinv = invert(r, n);\n    const u1 = mod(-h * rinv, n);\n    const u2 = mod(s * rinv, n);\n    const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n    if (!Q) throw new Error('Cannot recover signature: point at infinify');\n    Q.assertValidity();\n    return Q;\n  }\n  toRawBytes(isCompressed = false) {\n    return hexToBytes(this.toHex(isCompressed));\n  }\n  toHex(isCompressed = false) {\n    const x = numTo32bStr(this.x);\n    if (isCompressed) {\n      const prefix = this.y & _1n ? '03' : '02';\n      return `${prefix}${x}`;\n    } else {\n      return `04${x}${numTo32bStr(this.y)}`;\n    }\n  }\n  toHexX() {\n    return this.toHex(true).slice(2);\n  }\n  toRawX() {\n    return this.toRawBytes(true).slice(1);\n  }\n  assertValidity() {\n    const msg = 'Point is not on elliptic curve';\n    const {\n      x,\n      y\n    } = this;\n    if (!isValidFieldElement(x) || !isValidFieldElement(y)) throw new Error(msg);\n    const left = mod(y * y);\n    const right = weistrass(x);\n    if (mod(left - right) !== _0n) throw new Error(msg);\n  }\n  equals(other) {\n    return this.x === other.x && this.y === other.y;\n  }\n  negate() {\n    return new Point(this.x, mod(-this.y));\n  }\n  double() {\n    return JacobianPoint.fromAffine(this).double().toAffine();\n  }\n  add(other) {\n    return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n  }\n  subtract(other) {\n    return this.add(other.negate());\n  }\n  multiply(scalar) {\n    return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n  }\n  multiplyAndAddUnsafe(Q, a, b) {\n    const P = JacobianPoint.fromAffine(this);\n    const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n    const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n    const sum = aP.add(bQ);\n    return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n  }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n  return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n  if (data.length < 2 || data[0] !== 0x02) {\n    throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n  }\n  const len = data[1];\n  const res = data.subarray(2, len + 2);\n  if (!len || res.length !== len) {\n    throw new Error(`Invalid signature integer: wrong length`);\n  }\n  if (res[0] === 0x00 && res[1] <= 0x7f) {\n    throw new Error('Invalid signature integer: trailing length');\n  }\n  return {\n    data: bytesToNumber(res),\n    left: data.subarray(len + 2)\n  };\n}\nfunction parseDERSignature(data) {\n  if (data.length < 2 || data[0] != 0x30) {\n    throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n  }\n  if (data[1] !== data.length - 2) {\n    throw new Error('Invalid signature: incorrect length');\n  }\n  const {\n    data: r,\n    left: sBytes\n  } = parseDERInt(data.subarray(2));\n  const {\n    data: s,\n    left: rBytesLeft\n  } = parseDERInt(sBytes);\n  if (rBytesLeft.length) {\n    throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n  }\n  return {\n    r,\n    s\n  };\n}\nexport class Signature {\n  constructor(r, s) {\n    this.r = r;\n    this.s = s;\n    this.assertValidity();\n  }\n  static fromCompact(hex) {\n    const arr = isUint8a(hex);\n    const name = 'Signature.fromCompact';\n    if (typeof hex !== 'string' && !arr) throw new TypeError(`${name}: Expected string or Uint8Array`);\n    const str = arr ? bytesToHex(hex) : hex;\n    if (str.length !== 128) throw new Error(`${name}: Expected 64-byte hex`);\n    return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n  }\n  static fromDER(hex) {\n    const arr = isUint8a(hex);\n    if (typeof hex !== 'string' && !arr) throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n    const {\n      r,\n      s\n    } = parseDERSignature(arr ? hex : hexToBytes(hex));\n    return new Signature(r, s);\n  }\n  static fromHex(hex) {\n    return this.fromDER(hex);\n  }\n  assertValidity() {\n    const {\n      r,\n      s\n    } = this;\n    if (!isWithinCurveOrder(r)) throw new Error('Invalid Signature: r must be 0 < r < n');\n    if (!isWithinCurveOrder(s)) throw new Error('Invalid Signature: s must be 0 < s < n');\n  }\n  hasHighS() {\n    const HALF = CURVE.n >> _1n;\n    return this.s > HALF;\n  }\n  normalizeS() {\n    return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n  }\n  toDERRawBytes(isCompressed = false) {\n    return hexToBytes(this.toDERHex(isCompressed));\n  }\n  toDERHex(isCompressed = false) {\n    const sHex = sliceDER(numberToHexUnpadded(this.s));\n    if (isCompressed) return sHex;\n    const rHex = sliceDER(numberToHexUnpadded(this.r));\n    const rLen = numberToHexUnpadded(rHex.length / 2);\n    const sLen = numberToHexUnpadded(sHex.length / 2);\n    const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n    return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n  }\n  toRawBytes() {\n    return this.toDERRawBytes();\n  }\n  toHex() {\n    return this.toDERHex();\n  }\n  toCompactRawBytes() {\n    return hexToBytes(this.toCompactHex());\n  }\n  toCompactHex() {\n    return numTo32bStr(this.r) + numTo32bStr(this.s);\n  }\n}\nfunction concatBytes(...arrays) {\n  if (!arrays.every(isUint8a)) throw new Error('Uint8Array list expected');\n  if (arrays.length === 1) return arrays[0];\n  const length = arrays.reduce((a, arr) => a + arr.length, 0);\n  const result = new Uint8Array(length);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const arr = arrays[i];\n    result.set(arr, pad);\n    pad += arr.length;\n  }\n  return result;\n}\nfunction isUint8a(bytes) {\n  return bytes instanceof Uint8Array;\n}\nconst hexes = Array.from({\n  length: 256\n}, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n  if (!(uint8a instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  let hex = '';\n  for (let i = 0; i < uint8a.length; i++) {\n    hex += hexes[uint8a[i]];\n  }\n  return hex;\n}\nfunction numTo32bStr(num) {\n  if (num > POW_2_256) throw new Error('Expected number < 2^256');\n  return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n  return hexToBytes(numTo32bStr(num));\n}\nfunction numberToHexUnpadded(num) {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n  }\n  return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n  if (typeof hex !== 'string') {\n    throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n  }\n  if (hex.length % 2) throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\nfunction bytesToNumber(bytes) {\n  return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n  return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n  if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0) return BigInt(num);\n  if (typeof num === 'bigint' && isWithinCurveOrder(num)) return num;\n  throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n  const {\n    P\n  } = CURVE;\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= P;\n  }\n  return res;\n}\nfunction sqrtMod(x) {\n  const {\n    P\n  } = CURVE;\n  const _6n = BigInt(6);\n  const _11n = BigInt(11);\n  const _22n = BigInt(22);\n  const _23n = BigInt(23);\n  const _44n = BigInt(44);\n  const _88n = BigInt(88);\n  const b2 = x * x * x % P;\n  const b3 = b2 * b2 * x % P;\n  const b6 = pow2(b3, _3n) * b3 % P;\n  const b9 = pow2(b6, _3n) * b3 % P;\n  const b11 = pow2(b9, _2n) * b2 % P;\n  const b22 = pow2(b11, _11n) * b11 % P;\n  const b44 = pow2(b22, _22n) * b22 % P;\n  const b88 = pow2(b44, _44n) * b44 % P;\n  const b176 = pow2(b88, _88n) * b88 % P;\n  const b220 = pow2(b176, _44n) * b44 % P;\n  const b223 = pow2(b220, _3n) * b3 % P;\n  const t1 = pow2(b223, _23n) * b22 % P;\n  const t2 = pow2(t1, _6n) * b2 % P;\n  return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  let a = mod(number, modulo);\n  let b = modulo;\n  let x = _0n,\n    y = _1n,\n    u = _1n,\n    v = _0n;\n  while (a !== _0n) {\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n  const scratch = new Array(nums.length);\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (num === _0n) return acc;\n    scratch[i] = acc;\n    return mod(acc * num, p);\n  }, _1n);\n  const inverted = invert(lastMultiplied, p);\n  nums.reduceRight((acc, num, i) => {\n    if (num === _0n) return acc;\n    scratch[i] = mod(acc * scratch[i], p);\n    return mod(acc * num, p);\n  }, inverted);\n  return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst POW_2_128 = _2n ** BigInt(128);\nfunction splitScalarEndo(k) {\n  const {\n    n\n  } = CURVE;\n  const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n  const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n  const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n  const b2 = a1;\n  const c1 = divNearest(b2 * k, n);\n  const c2 = divNearest(-b1 * k, n);\n  let k1 = mod(k - c1 * a1 - c2 * a2, n);\n  let k2 = mod(-c1 * b1 - c2 * b2, n);\n  const k1neg = k1 > POW_2_128;\n  const k2neg = k2 > POW_2_128;\n  if (k1neg) k1 = n - k1;\n  if (k2neg) k2 = n - k2;\n  if (k1 > POW_2_128 || k2 > POW_2_128) {\n    throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n  }\n  return {\n    k1neg,\n    k1,\n    k2neg,\n    k2\n  };\n}\nfunction truncateHash(hash) {\n  const {\n    n\n  } = CURVE;\n  const byteLength = hash.length;\n  const delta = byteLength * 8 - 256;\n  let h = bytesToNumber(hash);\n  if (delta > 0) h = h >> BigInt(delta);\n  if (h >= n) h -= n;\n  return h;\n}\nclass HmacDrbg {\n  constructor() {\n    this.v = new Uint8Array(32).fill(1);\n    this.k = new Uint8Array(32).fill(0);\n    this.counter = 0;\n  }\n  hmac(...values) {\n    return utils.hmacSha256(this.k, ...values);\n  }\n  hmacSync(...values) {\n    if (typeof utils.hmacSha256Sync !== 'function') throw new Error('utils.hmacSha256Sync is undefined, you need to set it');\n    const res = utils.hmacSha256Sync(this.k, ...values);\n    if (res instanceof Promise) throw new Error('To use sync sign(), ensure utils.hmacSha256 is sync');\n    return res;\n  }\n  incr() {\n    if (this.counter >= 1000) {\n      throw new Error('Tried 1,000 k values for sign(), all were invalid');\n    }\n    this.counter += 1;\n  }\n  async reseed(seed = new Uint8Array()) {\n    this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n    this.v = await this.hmac(this.v);\n    if (seed.length === 0) return;\n    this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n    this.v = await this.hmac(this.v);\n  }\n  reseedSync(seed = new Uint8Array()) {\n    this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n    this.v = this.hmacSync(this.v);\n    if (seed.length === 0) return;\n    this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n    this.v = this.hmacSync(this.v);\n  }\n  async generate() {\n    this.incr();\n    this.v = await this.hmac(this.v);\n    return this.v;\n  }\n  generateSync() {\n    this.incr();\n    this.v = this.hmacSync(this.v);\n    return this.v;\n  }\n}\nfunction isWithinCurveOrder(num) {\n  return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n  return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n  const k = bytesToNumber(kBytes);\n  if (!isWithinCurveOrder(k)) return;\n  const {\n    n\n  } = CURVE;\n  const q = Point.BASE.multiply(k);\n  const r = mod(q.x, n);\n  if (r === _0n) return;\n  const s = mod(invert(k, n) * mod(m + d * r, n), n);\n  if (s === _0n) return;\n  const sig = new Signature(r, s);\n  const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n  return {\n    sig,\n    recovery\n  };\n}\nfunction normalizePrivateKey(key) {\n  let num;\n  if (typeof key === 'bigint') {\n    num = key;\n  } else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n    num = BigInt(key);\n  } else if (typeof key === 'string') {\n    if (key.length !== 64) throw new Error('Expected 32 bytes of private key');\n    num = hexToNumber(key);\n  } else if (isUint8a(key)) {\n    if (key.length !== 32) throw new Error('Expected 32 bytes of private key');\n    num = bytesToNumber(key);\n  } else {\n    throw new TypeError('Expected valid private key');\n  }\n  if (!isWithinCurveOrder(num)) throw new Error('Expected private key: 0 < key < n');\n  return num;\n}\nfunction normalizePublicKey(publicKey) {\n  if (publicKey instanceof Point) {\n    publicKey.assertValidity();\n    return publicKey;\n  } else {\n    return Point.fromHex(publicKey);\n  }\n}\nfunction normalizeSignature(signature) {\n  if (signature instanceof Signature) {\n    signature.assertValidity();\n    return signature;\n  }\n  try {\n    return Signature.fromDER(signature);\n  } catch (error) {\n    return Signature.fromCompact(signature);\n  }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n  return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n  return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isPub(item) {\n  const arr = isUint8a(item);\n  const str = typeof item === 'string';\n  const len = (arr || str) && item.length;\n  if (arr) return len === 33 || len === 65;\n  if (str) return len === 66 || len === 130;\n  if (item instanceof Point) return true;\n  return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n  if (isPub(privateA)) throw new TypeError('getSharedSecret: first arg must be private key');\n  if (!isPub(publicB)) throw new TypeError('getSharedSecret: second arg must be public key');\n  const b = normalizePublicKey(publicB);\n  b.assertValidity();\n  return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n  const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n  return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n  const z1 = bits2int(bytes);\n  const z2 = mod(z1, CURVE.n);\n  return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n  if (typeof num !== 'bigint') throw new Error('Expected bigint');\n  const hex = numTo32bStr(num);\n  return hexToBytes(hex);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n  if (msgHash == null) throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n  const h1 = ensureBytes(msgHash);\n  const d = normalizePrivateKey(privateKey);\n  const seedArgs = [int2octets(d), bits2octets(h1)];\n  if (extraEntropy != null) {\n    if (extraEntropy === true) extraEntropy = utils.randomBytes(32);\n    const e = ensureBytes(extraEntropy);\n    if (e.length !== 32) throw new Error('sign: Expected 32 bytes of extra data');\n    seedArgs.push(e);\n  }\n  const seed = concatBytes(...seedArgs);\n  const m = bits2int(h1);\n  return {\n    seed,\n    m,\n    d\n  };\n}\nfunction finalizeSig(recSig, opts) {\n  let {\n    sig,\n    recovery\n  } = recSig;\n  const {\n    canonical,\n    der,\n    recovered\n  } = Object.assign({\n    canonical: true,\n    der: true\n  }, opts);\n  if (canonical && sig.hasHighS()) {\n    sig = sig.normalizeS();\n    recovery ^= 1;\n  }\n  const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n  return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n  const {\n    seed,\n    m,\n    d\n  } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n  let sig;\n  const drbg = new HmacDrbg();\n  await drbg.reseed(seed);\n  while (!(sig = kmdToSig(await drbg.generate(), m, d))) await drbg.reseed();\n  return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n  const {\n    seed,\n    m,\n    d\n  } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n  let sig;\n  const drbg = new HmacDrbg();\n  drbg.reseedSync(seed);\n  while (!(sig = kmdToSig(drbg.generateSync(), m, d))) drbg.reseedSync();\n  return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = {\n  strict: true\n};\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n  let sig;\n  try {\n    sig = normalizeSignature(signature);\n    msgHash = ensureBytes(msgHash);\n  } catch (error) {\n    return false;\n  }\n  const {\n    r,\n    s\n  } = sig;\n  if (opts.strict && sig.hasHighS()) return false;\n  const h = truncateHash(msgHash);\n  let P;\n  try {\n    P = normalizePublicKey(publicKey);\n  } catch (error) {\n    return false;\n  }\n  const {\n    n\n  } = CURVE;\n  const sinv = invert(s, n);\n  const u1 = mod(h * sinv, n);\n  const u2 = mod(r * sinv, n);\n  const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n  if (!R) return false;\n  const v = mod(R.x, n);\n  return v === r;\n}\nfunction finalizeSchnorrChallenge(ch) {\n  return mod(bytesToNumber(ch), CURVE.n);\n}\nfunction hasEvenY(point) {\n  return (point.y & _1n) === _0n;\n}\nclass SchnorrSignature {\n  constructor(r, s) {\n    this.r = r;\n    this.s = s;\n    this.assertValidity();\n  }\n  static fromHex(hex) {\n    const bytes = ensureBytes(hex);\n    if (bytes.length !== 64) throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n    const r = bytesToNumber(bytes.subarray(0, 32));\n    const s = bytesToNumber(bytes.subarray(32, 64));\n    return new SchnorrSignature(r, s);\n  }\n  assertValidity() {\n    const {\n      r,\n      s\n    } = this;\n    if (!isValidFieldElement(r) || !isWithinCurveOrder(s)) throw new Error('Invalid signature');\n  }\n  toHex() {\n    return numTo32bStr(this.r) + numTo32bStr(this.s);\n  }\n  toRawBytes() {\n    return hexToBytes(this.toHex());\n  }\n}\nfunction schnorrGetPublicKey(privateKey) {\n  return Point.fromPrivateKey(privateKey).toRawX();\n}\nfunction initSchnorrSigArgs(message, privateKey, auxRand) {\n  if (message == null) throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n  const m = ensureBytes(message);\n  const d0 = normalizePrivateKey(privateKey);\n  const rand = ensureBytes(auxRand);\n  if (rand.length !== 32) throw new TypeError('sign: Expected 32 bytes of aux randomness');\n  const P = Point.fromPrivateKey(d0);\n  const px = P.toRawX();\n  const d = hasEvenY(P) ? d0 : CURVE.n - d0;\n  return {\n    m,\n    P,\n    px,\n    d,\n    rand\n  };\n}\nfunction initSchnorrNonce(d, t0h) {\n  return numTo32b(d ^ bytesToNumber(t0h));\n}\nfunction finalizeSchnorrNonce(k0h) {\n  const k0 = mod(bytesToNumber(k0h), CURVE.n);\n  if (k0 === _0n) throw new Error('sign: Creation of signature failed. k is zero');\n  const R = Point.fromPrivateKey(k0);\n  const rx = R.toRawX();\n  const k = hasEvenY(R) ? k0 : CURVE.n - k0;\n  return {\n    R,\n    rx,\n    k\n  };\n}\nfunction finalizeSchnorrSig(R, k, e, d) {\n  return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n}\nasync function schnorrSign(message, privateKey, auxRand = utils.randomBytes()) {\n  const {\n    m,\n    px,\n    d,\n    rand\n  } = initSchnorrSigArgs(message, privateKey, auxRand);\n  const t = initSchnorrNonce(d, await utils.taggedHash(TAGS.aux, rand));\n  const {\n    R,\n    rx,\n    k\n  } = finalizeSchnorrNonce(await utils.taggedHash(TAGS.nonce, t, px, m));\n  const e = finalizeSchnorrChallenge(await utils.taggedHash(TAGS.challenge, rx, px, m));\n  const sig = finalizeSchnorrSig(R, k, e, d);\n  const isValid = await schnorrVerify(sig, m, px);\n  if (!isValid) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\nfunction schnorrSignSync(message, privateKey, auxRand = utils.randomBytes()) {\n  const {\n    m,\n    px,\n    d,\n    rand\n  } = initSchnorrSigArgs(message, privateKey, auxRand);\n  const t = initSchnorrNonce(d, utils.taggedHashSync(TAGS.aux, rand));\n  const {\n    R,\n    rx,\n    k\n  } = finalizeSchnorrNonce(utils.taggedHashSync(TAGS.nonce, t, px, m));\n  const e = finalizeSchnorrChallenge(utils.taggedHashSync(TAGS.challenge, rx, px, m));\n  const sig = finalizeSchnorrSig(R, k, e, d);\n  const isValid = schnorrVerifySync(sig, m, px);\n  if (!isValid) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n  const raw = signature instanceof SchnorrSignature;\n  const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n  if (raw) sig.assertValidity();\n  return {\n    ...sig,\n    m: ensureBytes(message),\n    P: normalizePublicKey(publicKey)\n  };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n  const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n  if (!R || !hasEvenY(R) || R.x !== r) return false;\n  return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n  try {\n    const {\n      r,\n      s,\n      m,\n      P\n    } = initSchnorrVerify(signature, message, publicKey);\n    const e = finalizeSchnorrChallenge(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n    return finalizeSchnorrVerify(r, P, s, e);\n  } catch (error) {\n    return false;\n  }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n  try {\n    const {\n      r,\n      s,\n      m,\n      P\n    } = initSchnorrVerify(signature, message, publicKey);\n    const e = finalizeSchnorrChallenge(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n    return finalizeSchnorrVerify(r, P, s, e);\n  } catch (error) {\n    return false;\n  }\n}\nexport const schnorr = {\n  Signature: SchnorrSignature,\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  signSync: schnorrSignSync,\n  verifySync: schnorrVerifySync\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n  node: nodeCrypto,\n  web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined\n};\nconst TAGS = {\n  challenge: 'BIP0340/challenge',\n  aux: 'BIP0340/aux',\n  nonce: 'BIP0340/nonce'\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n  isValidPrivateKey(privateKey) {\n    try {\n      normalizePrivateKey(privateKey);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  },\n  privateAdd: (privateKey, tweak) => {\n    const p = normalizePrivateKey(privateKey);\n    const t = normalizePrivateKey(tweak);\n    return numTo32b(mod(p + t, CURVE.n));\n  },\n  privateNegate: privateKey => {\n    const p = normalizePrivateKey(privateKey);\n    return numTo32b(CURVE.n - p);\n  },\n  pointAddScalar: (p, tweak, isCompressed) => {\n    const P = Point.fromHex(p);\n    const t = normalizePrivateKey(tweak);\n    const Q = Point.BASE.multiplyAndAddUnsafe(P, t, _1n);\n    if (!Q) throw new Error('Tweaked point at infinity');\n    return Q.toRawBytes(isCompressed);\n  },\n  pointMultiply: (p, tweak, isCompressed) => {\n    const P = Point.fromHex(p);\n    const t = bytesToNumber(ensureBytes(tweak));\n    return P.multiply(t).toRawBytes(isCompressed);\n  },\n  hashToPrivateKey: hash => {\n    hash = ensureBytes(hash);\n    if (hash.length < 40 || hash.length > 1024) throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n    const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n    return numTo32b(num);\n  },\n  randomBytes: (bytesLength = 32) => {\n    if (crypto.web) {\n      return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    } else if (crypto.node) {\n      const {\n        randomBytes\n      } = crypto.node;\n      return Uint8Array.from(randomBytes(bytesLength));\n    } else {\n      throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n  },\n  randomPrivateKey: () => {\n    return utils.hashToPrivateKey(utils.randomBytes(40));\n  },\n  bytesToHex,\n  hexToBytes,\n  concatBytes,\n  mod,\n  invert,\n  sha256: async (...messages) => {\n    if (crypto.web) {\n      const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n      return new Uint8Array(buffer);\n    } else if (crypto.node) {\n      const {\n        createHash\n      } = crypto.node;\n      const hash = createHash('sha256');\n      messages.forEach(m => hash.update(m));\n      return Uint8Array.from(hash.digest());\n    } else {\n      throw new Error(\"The environment doesn't have sha256 function\");\n    }\n  },\n  hmacSha256: async (key, ...messages) => {\n    if (crypto.web) {\n      const ckey = await crypto.web.subtle.importKey('raw', key, {\n        name: 'HMAC',\n        hash: {\n          name: 'SHA-256'\n        }\n      }, false, ['sign']);\n      const message = concatBytes(...messages);\n      const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n      return new Uint8Array(buffer);\n    } else if (crypto.node) {\n      const {\n        createHmac\n      } = crypto.node;\n      const hash = createHmac('sha256', key);\n      messages.forEach(m => hash.update(m));\n      return Uint8Array.from(hash.digest());\n    } else {\n      throw new Error(\"The environment doesn't have hmac-sha256 function\");\n    }\n  },\n  sha256Sync: undefined,\n  hmacSha256Sync: undefined,\n  taggedHash: async (tag, ...messages) => {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n      const tagH = await utils.sha256(Uint8Array.from(tag, c => c.charCodeAt(0)));\n      tagP = concatBytes(tagH, tagH);\n      TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return utils.sha256(tagP, ...messages);\n  },\n  taggedHashSync: (tag, ...messages) => {\n    if (typeof utils.sha256Sync !== 'function') throw new Error('utils.sha256Sync is undefined, you need to set it');\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n      const tagH = utils.sha256Sync(Uint8Array.from(tag, c => c.charCodeAt(0)));\n      tagP = concatBytes(tagH, tagH);\n      TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return utils.sha256Sync(tagP, ...messages);\n  },\n  precompute(windowSize = 8, point = Point.BASE) {\n    const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n    cached._setWindowSize(windowSize);\n    cached.multiply(_3n);\n    return cached;\n  }\n};","map":{"version":3,"names":["nodeCrypto","_0n","BigInt","_1n","_2n","_3n","_8n","POW_2_256","CURVE","a","b","P","n","h","Gx","Gy","beta","weistrass","x","x2","mod","x3","USE_ENDOMORPHISM","JacobianPoint","constructor","y","z","fromAffine","p","Point","TypeError","toAffineBatch","points","toInv","invertBatch","map","i","toAffine","normalizeZ","equals","other","X1","Y1","Z1","X2","Y2","Z2","Z1Z1","Z2Z2","U1","U2","S1","S2","negate","double","A","B","C","D","E","F","X3","Y3","Z3","add","H","r","ZERO","HH","HHH","V","subtract","multiplyUnsafe","scalar","P0","normalizeScalar","d","k1neg","k1","k2neg","k2","splitScalarEndo","k1p","k2p","precomputeWindow","W","windows","base","window","push","wNAF","affinePoint","BASE","_WINDOW_SIZE","Error","precomputes","pointPrecomputes","get","set","f","windowSize","mask","maxNumber","shiftBy","offset","wbits","Number","pr","cached","Math","abs","multiply","point","fake","f1p","f2p","invZ","invert","iz1","iz2","iz3","ax","ay","zz","WeakMap","_setWindowSize","delete","fromCompressedHex","bytes","isShort","length","bytesToNumber","subarray","isValidFieldElement","y2","sqrtMod","isYOdd","isFirstByteOdd","assertValidity","fromUncompressedHex","fromHex","hex","ensureBytes","len","header","fromPrivateKey","privateKey","normalizePrivateKey","fromSignature","msgHash","signature","recovery","truncateHash","s","normalizeSignature","prefix","R","numTo32bStr","rinv","u1","u2","Q","multiplyAndAddUnsafe","toRawBytes","isCompressed","hexToBytes","toHex","toHexX","slice","toRawX","msg","left","right","aP","bQ","sum","undefined","sliceDER","parseInt","parseDERInt","data","bytesToHex","res","parseDERSignature","sBytes","rBytesLeft","Signature","fromCompact","arr","isUint8a","name","str","hexToNumber","fromDER","isWithinCurveOrder","hasHighS","HALF","normalizeS","toDERRawBytes","toDERHex","sHex","numberToHexUnpadded","rHex","rLen","sLen","toCompactRawBytes","toCompactHex","concatBytes","arrays","every","reduce","result","Uint8Array","pad","hexes","Array","from","v","toString","padStart","uint8a","num","numTo32b","array","j","hexByte","byte","isNaN","isSafeInteger","pow2","power","_6n","_11n","_22n","_23n","_44n","_88n","b2","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","number","modulo","u","q","m","gcd","nums","scratch","lastMultiplied","acc","inverted","reduceRight","divNearest","POW_2_128","k","a1","b1","a2","c1","c2","hash","byteLength","delta","HmacDrbg","fill","counter","hmac","values","utils","hmacSha256","hmacSync","hmacSha256Sync","Promise","incr","reseed","seed","reseedSync","generate","generateSync","kmdToSig","kBytes","sig","key","normalizePublicKey","publicKey","error","getPublicKey","recoverPublicKey","isPub","item","getSharedSecret","privateA","publicB","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","randomBytes","e","finalizeSig","recSig","opts","canonical","der","recovered","Object","assign","hashed","sign","privKey","drbg","signSync","vopts","strict","verify","sinv","finalizeSchnorrChallenge","ch","hasEvenY","SchnorrSignature","schnorrGetPublicKey","initSchnorrSigArgs","message","auxRand","d0","rand","px","initSchnorrNonce","t0h","finalizeSchnorrNonce","k0h","k0","rx","finalizeSchnorrSig","schnorrSign","t","taggedHash","TAGS","aux","nonce","challenge","isValid","schnorrVerify","schnorrSignSync","taggedHashSync","schnorrVerifySync","initSchnorrVerify","raw","finalizeSchnorrVerify","schnorr","verifySync","crypto","node","web","self","TAGGED_HASH_PREFIXES","isValidPrivateKey","privateAdd","tweak","privateNegate","pointAddScalar","pointMultiply","hashToPrivateKey","bytesLength","getRandomValues","randomPrivateKey","sha256","messages","buffer","subtle","digest","createHash","forEach","update","ckey","importKey","createHmac","sha256Sync","tag","tagP","tagH","c","charCodeAt","precompute"],"sources":["C:/Users/yassi/OneDrive/Desktop/tp_9/Certification-de-Diplomes/node_modules/ethers/node_modules/@noble/secp256k1/lib/esm/index.js"],"sourcesContent":["/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst POW_2_256 = _2n ** BigInt(256);\nconst CURVE = {\n    a: _0n,\n    b: BigInt(7),\n    P: POW_2_256 - _2n ** BigInt(32) - BigInt(977),\n    n: POW_2_256 - BigInt('432420386565659656852420866394968145599'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n};\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 ** _2n);\n        const Z2Z2 = mod(Z2 ** _2n);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 ** _2n);\n        const B = mod(Y1 ** _2n);\n        const C = mod(B ** _2n);\n        const D = mod(_2n * (mod((X1 + B) ** _2n) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E ** _2n);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 ** _2n);\n        const Z2Z2 = mod(Z2 ** _2n);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H ** _2n);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r ** _2n - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.y & _1n ? '03' : '02';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = isUint8a(hex);\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = isUint8a(hex);\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every(isUint8a))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction isUint8a(bytes) {\n    return bytes instanceof Uint8Array;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction numTo32bStr(num) {\n    if (num > POW_2_256)\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    return hexToBytes(numTo32bStr(num));\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst POW_2_128 = _2n ** BigInt(128);\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n    const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n    const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n    const b2 = a1;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        if (typeof utils.hmacSha256Sync !== 'function')\n            throw new Error('utils.hmacSha256Sync is undefined, you need to set it');\n        const res = utils.hmacSha256Sync(this.k, ...values);\n        if (res instanceof Promise)\n            throw new Error('To use sync sign(), ensure utils.hmacSha256 is sync');\n        return res;\n    }\n    incr() {\n        if (this.counter >= 1000) {\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        }\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (isUint8a(key)) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isPub(item) {\n    const arr = isUint8a(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    const hex = numTo32bStr(num);\n    return hexToBytes(hex);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction finalizeSchnorrChallenge(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nfunction hasEvenY(point) {\n    return (point.y & _1n) === _0n;\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nfunction initSchnorrSigArgs(message, privateKey, auxRand) {\n    if (message == null)\n        throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n    const m = ensureBytes(message);\n    const d0 = normalizePrivateKey(privateKey);\n    const rand = ensureBytes(auxRand);\n    if (rand.length !== 32)\n        throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    const P = Point.fromPrivateKey(d0);\n    const px = P.toRawX();\n    const d = hasEvenY(P) ? d0 : CURVE.n - d0;\n    return { m, P, px, d, rand };\n}\nfunction initSchnorrNonce(d, t0h) {\n    return numTo32b(d ^ bytesToNumber(t0h));\n}\nfunction finalizeSchnorrNonce(k0h) {\n    const k0 = mod(bytesToNumber(k0h), CURVE.n);\n    if (k0 === _0n)\n        throw new Error('sign: Creation of signature failed. k is zero');\n    const R = Point.fromPrivateKey(k0);\n    const rx = R.toRawX();\n    const k = hasEvenY(R) ? k0 : CURVE.n - k0;\n    return { R, rx, k };\n}\nfunction finalizeSchnorrSig(R, k, e, d) {\n    return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n}\nasync function schnorrSign(message, privateKey, auxRand = utils.randomBytes()) {\n    const { m, px, d, rand } = initSchnorrSigArgs(message, privateKey, auxRand);\n    const t = initSchnorrNonce(d, await utils.taggedHash(TAGS.aux, rand));\n    const { R, rx, k } = finalizeSchnorrNonce(await utils.taggedHash(TAGS.nonce, t, px, m));\n    const e = finalizeSchnorrChallenge(await utils.taggedHash(TAGS.challenge, rx, px, m));\n    const sig = finalizeSchnorrSig(R, k, e, d);\n    const isValid = await schnorrVerify(sig, m, px);\n    if (!isValid)\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\nfunction schnorrSignSync(message, privateKey, auxRand = utils.randomBytes()) {\n    const { m, px, d, rand } = initSchnorrSigArgs(message, privateKey, auxRand);\n    const t = initSchnorrNonce(d, utils.taggedHashSync(TAGS.aux, rand));\n    const { R, rx, k } = finalizeSchnorrNonce(utils.taggedHashSync(TAGS.nonce, t, px, m));\n    const e = finalizeSchnorrChallenge(utils.taggedHashSync(TAGS.challenge, rx, px, m));\n    const sig = finalizeSchnorrSig(R, k, e, d);\n    const isValid = schnorrVerifySync(sig, m, px);\n    if (!isValid)\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !hasEvenY(R) || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = finalizeSchnorrChallenge(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = finalizeSchnorrChallenge(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    privateAdd: (privateKey, tweak) => {\n        const p = normalizePrivateKey(privateKey);\n        const t = normalizePrivateKey(tweak);\n        return numTo32b(mod(p + t, CURVE.n));\n    },\n    privateNegate: (privateKey) => {\n        const p = normalizePrivateKey(privateKey);\n        return numTo32b(CURVE.n - p);\n    },\n    pointAddScalar: (p, tweak, isCompressed) => {\n        const P = Point.fromHex(p);\n        const t = normalizePrivateKey(tweak);\n        const Q = Point.BASE.multiplyAndAddUnsafe(P, t, _1n);\n        if (!Q)\n            throw new Error('Tweaked point at infinity');\n        return Q.toRawBytes(isCompressed);\n    },\n    pointMultiply: (p, tweak, isCompressed) => {\n        const P = Point.fromHex(p);\n        const t = bytesToNumber(ensureBytes(tweak));\n        return P.multiply(t).toRawBytes(isCompressed);\n    },\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof utils.sha256Sync !== 'function')\n            throw new Error('utils.sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = utils.sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}