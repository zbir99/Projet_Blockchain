{"ast":null,"code":"import { coerce, equals as equalBytes } from '../bytes.js';\nimport * as varint from '../varint.js';\n/**\n * Creates a multihash digest.\n */\nexport function create(code, digest) {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n}\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode(multihash) {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n}\nexport function equals(a, b) {\n  if (a === b) {\n    return true;\n  } else {\n    const data = b;\n    return a.code === data.code && a.size === data.size && data.bytes instanceof Uint8Array && equalBytes(a.bytes, data.bytes);\n  }\n}\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest {\n  code;\n  size;\n  digest;\n  bytes;\n  /**\n   * Creates a multihash digest.\n   */\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode(digest, code) {\n  return digest.code === code;\n}","map":{"version":3,"names":["coerce","equals","equalBytes","varint","create","code","digest","size","byteLength","sizeOffset","encodingLength","digestOffset","bytes","Uint8Array","encodeTo","set","Digest","decode","multihash","subarray","Error","a","b","data","constructor","hasCode"],"sources":["C:\\Users\\yassi\\OneDrive\\Desktop\\tp_9\\Certification-de-Diplomes\\node_modules\\@ipld\\dag-pb\\node_modules\\multiformats\\src\\hashes\\digest.ts"],"sourcesContent":["import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\nimport type { MultihashDigest } from './interface.js'\n\n/**\n * Creates a multihash digest.\n */\nexport function create <Code extends number> (code: Code, digest: Uint8Array): Digest<Code, number> {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n */\nexport function decode (multihash: Uint8Array): MultihashDigest {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\nexport function equals (a: MultihashDigest, b: unknown): b is MultihashDigest {\n  if (a === b) {\n    return true\n  } else {\n    const data = b as { code?: unknown, size?: unknown, bytes?: unknown }\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n */\nexport class Digest<Code extends number, Size extends number> implements MultihashDigest {\n  readonly code: Code\n  readonly size: Size\n  readonly digest: Uint8Array\n  readonly bytes: Uint8Array\n\n  /**\n   * Creates a multihash digest.\n   */\n  constructor (code: Code, size: Size, digest: Uint8Array, bytes: Uint8Array) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n\n/**\n * Used to check that the passed multihash has the passed code\n */\nexport function hasCode <T extends number> (digest: MultihashDigest, code: T): digest is MultihashDigest<T> {\n  return digest.code === code\n}\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,MAAM,IAAIC,UAAU,QAAQ,aAAa;AAC1D,OAAO,KAAKC,MAAM,MAAM,cAAc;AAGtC;;;AAGA,OAAM,SAAUC,MAAMA,CAAwBC,IAAU,EAAEC,MAAkB;EAC1E,MAAMC,IAAI,GAAGD,MAAM,CAACE,UAAU;EAC9B,MAAMC,UAAU,GAAGN,MAAM,CAACO,cAAc,CAACL,IAAI,CAAC;EAC9C,MAAMM,YAAY,GAAGF,UAAU,GAAGN,MAAM,CAACO,cAAc,CAACH,IAAI,CAAC;EAE7D,MAAMK,KAAK,GAAG,IAAIC,UAAU,CAACF,YAAY,GAAGJ,IAAI,CAAC;EACjDJ,MAAM,CAACW,QAAQ,CAACT,IAAI,EAAEO,KAAK,EAAE,CAAC,CAAC;EAC/BT,MAAM,CAACW,QAAQ,CAACP,IAAI,EAAEK,KAAK,EAAEH,UAAU,CAAC;EACxCG,KAAK,CAACG,GAAG,CAACT,MAAM,EAAEK,YAAY,CAAC;EAE/B,OAAO,IAAIK,MAAM,CAACX,IAAI,EAAEE,IAAI,EAAED,MAAM,EAAEM,KAAK,CAAC;AAC9C;AAEA;;;AAGA,OAAM,SAAUK,MAAMA,CAAEC,SAAqB;EAC3C,MAAMN,KAAK,GAAGZ,MAAM,CAACkB,SAAS,CAAC;EAC/B,MAAM,CAACb,IAAI,EAAEI,UAAU,CAAC,GAAGN,MAAM,CAACc,MAAM,CAACL,KAAK,CAAC;EAC/C,MAAM,CAACL,IAAI,EAAEI,YAAY,CAAC,GAAGR,MAAM,CAACc,MAAM,CAACL,KAAK,CAACO,QAAQ,CAACV,UAAU,CAAC,CAAC;EACtE,MAAMH,MAAM,GAAGM,KAAK,CAACO,QAAQ,CAACV,UAAU,GAAGE,YAAY,CAAC;EAExD,IAAIL,MAAM,CAACE,UAAU,KAAKD,IAAI,EAAE;IAC9B,MAAM,IAAIa,KAAK,CAAC,kBAAkB,CAAC;EACrC;EAEA,OAAO,IAAIJ,MAAM,CAACX,IAAI,EAAEE,IAAI,EAAED,MAAM,EAAEM,KAAK,CAAC;AAC9C;AAEA,OAAM,SAAUX,MAAMA,CAAEoB,CAAkB,EAAEC,CAAU;EACpD,IAAID,CAAC,KAAKC,CAAC,EAAE;IACX,OAAO,IAAI;EACb,CAAC,MAAM;IACL,MAAMC,IAAI,GAAGD,CAAwD;IAErE,OACED,CAAC,CAAChB,IAAI,KAAKkB,IAAI,CAAClB,IAAI,IACpBgB,CAAC,CAACd,IAAI,KAAKgB,IAAI,CAAChB,IAAI,IACpBgB,IAAI,CAACX,KAAK,YAAYC,UAAU,IAChCX,UAAU,CAACmB,CAAC,CAACT,KAAK,EAAEW,IAAI,CAACX,KAAK,CAAC;EAEnC;AACF;AAEA;;;;AAIA,OAAM,MAAOI,MAAM;EACRX,IAAI;EACJE,IAAI;EACJD,MAAM;EACNM,KAAK;EAEd;;;EAGAY,YAAanB,IAAU,EAAEE,IAAU,EAAED,MAAkB,EAAEM,KAAiB;IACxE,IAAI,CAACP,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACM,KAAK,GAAGA,KAAK;EACpB;;AAGF;;;AAGA,OAAM,SAAUa,OAAOA,CAAqBnB,MAAuB,EAAED,IAAO;EAC1E,OAAOC,MAAM,CAACD,IAAI,KAAKA,IAAI;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}