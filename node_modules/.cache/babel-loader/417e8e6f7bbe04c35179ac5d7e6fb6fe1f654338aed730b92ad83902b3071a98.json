{"ast":null,"code":"import * as Digest from './digest.js';\nexport function from({\n  name,\n  code,\n  encode\n}) {\n  return new Hasher(name, code, encode);\n}\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */\nexport class Hasher {\n  name;\n  code;\n  encode;\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? Digest.create(this.code, result)\n      /* c8 ignore next 1 */ : result.then(digest => Digest.create(this.code, digest));\n    } else {\n      throw Error('Unknown type, must be binary type');\n      /* c8 ignore next 1 */\n    }\n  }\n}","map":{"version":3,"names":["Digest","from","name","code","encode","Hasher","constructor","digest","input","Uint8Array","result","create","then","Error"],"sources":["C:\\Users\\yassi\\OneDrive\\Desktop\\tp_9\\Certification-de-Diplomes\\node_modules\\@multiformats\\multiaddr-to-uri\\node_modules\\multiformats\\src\\hashes\\hasher.ts"],"sourcesContent":["import * as Digest from './digest.js'\nimport type { MultihashHasher } from './interface.js'\n\ntype Await<T> = Promise<T> | T\n\nexport function from <Name extends string, Code extends number> ({ name, code, encode }: { name: Name, code: Code, encode(input: Uint8Array): Await<Uint8Array> }): Hasher<Name, Code> {\n  return new Hasher(name, code, encode)\n}\n\n/**\n * Hasher represents a hashing algorithm implementation that produces as\n * `MultihashDigest`.\n */\nexport class Hasher<Name extends string, Code extends number> implements MultihashHasher<Code> {\n  readonly name: Name\n  readonly code: Code\n  readonly encode: (input: Uint8Array) => Await<Uint8Array>\n\n  constructor (name: Name, code: Code, encode: (input: Uint8Array) => Await<Uint8Array>) {\n    this.name = name\n    this.code = code\n    this.encode = encode\n  }\n\n  digest (input: Uint8Array): Await<Digest.Digest<Code, number>> {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input)\n      return result instanceof Uint8Array\n        ? Digest.create(this.code, result)\n        /* c8 ignore next 1 */\n        : result.then(digest => Digest.create(this.code, digest))\n    } else {\n      throw Error('Unknown type, must be binary type')\n      /* c8 ignore next 1 */\n    }\n  }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,aAAa;AAKrC,OAAM,SAAUC,IAAIA,CAA6C;EAAEC,IAAI;EAAEC,IAAI;EAAEC;AAAM,CAA4E;EAC/J,OAAO,IAAIC,MAAM,CAACH,IAAI,EAAEC,IAAI,EAAEC,MAAM,CAAC;AACvC;AAEA;;;;AAIA,OAAM,MAAOC,MAAM;EACRH,IAAI;EACJC,IAAI;EACJC,MAAM;EAEfE,YAAaJ,IAAU,EAAEC,IAAU,EAAEC,MAAgD;IACnF,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACtB;EAEAG,MAAMA,CAAEC,KAAiB;IACvB,IAAIA,KAAK,YAAYC,UAAU,EAAE;MAC/B,MAAMC,MAAM,GAAG,IAAI,CAACN,MAAM,CAACI,KAAK,CAAC;MACjC,OAAOE,MAAM,YAAYD,UAAU,GAC/BT,MAAM,CAACW,MAAM,CAAC,IAAI,CAACR,IAAI,EAAEO,MAAM;MACjC,yBACEA,MAAM,CAACE,IAAI,CAACL,MAAM,IAAIP,MAAM,CAACW,MAAM,CAAC,IAAI,CAACR,IAAI,EAAEI,MAAM,CAAC,CAAC;IAC7D,CAAC,MAAM;MACL,MAAMM,KAAK,CAAC,mCAAmC,CAAC;MAChD;IACF;EACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}