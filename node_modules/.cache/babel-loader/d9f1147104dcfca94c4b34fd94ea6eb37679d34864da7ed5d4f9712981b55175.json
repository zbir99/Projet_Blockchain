{"ast":null,"code":"/**\n * Client IPFS simple pour IPFS Desktop\n * Bas√© sur notre script de test qui fonctionne\n */\nimport { create } from 'ipfs-http-client';\n\n// Cr√©er une instance du client IPFS\nconst ipfs = create({\n  host: 'localhost',\n  port: 5001,\n  protocol: 'http'\n});\n\n// Test de la connexion imm√©diatement\nconst testConnection = async () => {\n  try {\n    const version = await ipfs.version();\n    console.log('‚úÖ IPFS Desktop connect√©, version:', version.version);\n    return true;\n  } catch (error) {\n    console.error('‚ùå Erreur de connexion √† IPFS Desktop:', error.message);\n    console.log('üîß Solutions:');\n    console.log('1. V√©rifiez que IPFS Desktop est d√©marr√©');\n    console.log('2. V√©rifiez CORS dans les param√®tres');\n    return false;\n  }\n};\n\n// Ex√©cuter le test imm√©diatement\ntestConnection();\n\n/**\n * Upload un fichier sur IPFS\n * @param {File} file - Le fichier √† uploader\n * @returns {Promise<string>} - Le CID (hash) du fichier\n */\nexport const uploadToIPFS = async file => {\n  if (!file) {\n    throw new Error('Aucun fichier fourni');\n  }\n  console.log('üì§ Upload sur IPFS Desktop...');\n  console.log('üìÑ Fichier:', file.name, '(' + (file.size / 1024).toFixed(2) + ' KB)');\n  try {\n    // Convertir en Uint8Array (n√©cessaire pour ipfs.add)\n    const arrayBuffer = await file.arrayBuffer();\n    const content = new Uint8Array(arrayBuffer);\n\n    // Upload du fichier\n    const result = await ipfs.add({\n      path: file.name,\n      content: content\n    });\n    const hash = result.cid.toString();\n    console.log('‚úÖ Upload r√©ussi:', hash);\n    return hash;\n  } catch (error) {\n    console.error('‚ùå Erreur upload:', error.message);\n    throw new Error(`Erreur upload IPFS: ${error.message}`);\n  }\n};\n\n/**\n * G√©n√®re l'URL pour acc√©der au fichier sur IPFS\n * @param {string} ipfsHash - Le hash IPFS\n * @returns {string} - L'URL compl√®te\n */\nexport const getIPFSGatewayURL = ipfsHash => {\n  if (!ipfsHash) return '';\n  return `http://localhost:8080/ipfs/${ipfsHash}`;\n};\nexport default {\n  uploadToIPFS,\n  getIPFSGatewayURL\n};","map":{"version":3,"names":["create","ipfs","host","port","protocol","testConnection","version","console","log","error","message","uploadToIPFS","file","Error","name","size","toFixed","arrayBuffer","content","Uint8Array","result","add","path","hash","cid","toString","getIPFSGatewayURL","ipfsHash"],"sources":["C:/Users/yassi/OneDrive/Desktop/tp_9/Certification-de-Diplomes/src/utils/ipfs.js"],"sourcesContent":["/**\n * Client IPFS simple pour IPFS Desktop\n * Bas√© sur notre script de test qui fonctionne\n */\nimport { create } from 'ipfs-http-client';\n\n// Cr√©er une instance du client IPFS\nconst ipfs = create({\n  host: 'localhost',\n  port: 5001,\n  protocol: 'http'\n});\n\n// Test de la connexion imm√©diatement\nconst testConnection = async () => {\n  try {\n    const version = await ipfs.version();\n    console.log('‚úÖ IPFS Desktop connect√©, version:', version.version);\n    return true;\n  } catch (error) {\n    console.error('‚ùå Erreur de connexion √† IPFS Desktop:', error.message);\n    console.log('üîß Solutions:');\n    console.log('1. V√©rifiez que IPFS Desktop est d√©marr√©');\n    console.log('2. V√©rifiez CORS dans les param√®tres');\n    return false;\n  }\n};\n\n// Ex√©cuter le test imm√©diatement\ntestConnection();\n\n/**\n * Upload un fichier sur IPFS\n * @param {File} file - Le fichier √† uploader\n * @returns {Promise<string>} - Le CID (hash) du fichier\n */\nexport const uploadToIPFS = async (file) => {\n  if (!file) {\n    throw new Error('Aucun fichier fourni');\n  }\n\n  console.log('üì§ Upload sur IPFS Desktop...');\n  console.log('üìÑ Fichier:', file.name, '(' + (file.size / 1024).toFixed(2) + ' KB)');\n\n  try {\n    // Convertir en Uint8Array (n√©cessaire pour ipfs.add)\n    const arrayBuffer = await file.arrayBuffer();\n    const content = new Uint8Array(arrayBuffer);\n\n    // Upload du fichier\n    const result = await ipfs.add({\n      path: file.name, \n      content: content\n    });\n    \n    const hash = result.cid.toString();\n    console.log('‚úÖ Upload r√©ussi:', hash);\n    return hash;\n    \n  } catch (error) {\n    console.error('‚ùå Erreur upload:', error.message);\n    throw new Error(`Erreur upload IPFS: ${error.message}`);\n  }\n};\n\n/**\n * G√©n√®re l'URL pour acc√©der au fichier sur IPFS\n * @param {string} ipfsHash - Le hash IPFS\n * @returns {string} - L'URL compl√®te\n */\nexport const getIPFSGatewayURL = (ipfsHash) => {\n  if (!ipfsHash) return '';\n  return `http://localhost:8080/ipfs/${ipfsHash}`;\n};\n\nexport default {\n  uploadToIPFS,\n  getIPFSGatewayURL\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,kBAAkB;;AAEzC;AACA,MAAMC,IAAI,GAAGD,MAAM,CAAC;EAClBE,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,IAAI;EACVC,QAAQ,EAAE;AACZ,CAAC,CAAC;;AAEF;AACA,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAI;IACF,MAAMC,OAAO,GAAG,MAAML,IAAI,CAACK,OAAO,CAAC,CAAC;IACpCC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEF,OAAO,CAACA,OAAO,CAAC;IACjE,OAAO,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAACC,OAAO,CAAC;IACrEH,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5BD,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACvDD,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;IACnD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACAH,cAAc,CAAC,CAAC;;AAEhB;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,YAAY,GAAG,MAAOC,IAAI,IAAK;EAC1C,IAAI,CAACA,IAAI,EAAE;IACT,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;EACzC;EAEAN,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;EAC5CD,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEI,IAAI,CAACE,IAAI,EAAE,GAAG,GAAG,CAACF,IAAI,CAACG,IAAI,GAAG,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;EAEnF,IAAI;IACF;IACA,MAAMC,WAAW,GAAG,MAAML,IAAI,CAACK,WAAW,CAAC,CAAC;IAC5C,MAAMC,OAAO,GAAG,IAAIC,UAAU,CAACF,WAAW,CAAC;;IAE3C;IACA,MAAMG,MAAM,GAAG,MAAMnB,IAAI,CAACoB,GAAG,CAAC;MAC5BC,IAAI,EAAEV,IAAI,CAACE,IAAI;MACfI,OAAO,EAAEA;IACX,CAAC,CAAC;IAEF,MAAMK,IAAI,GAAGH,MAAM,CAACI,GAAG,CAACC,QAAQ,CAAC,CAAC;IAClClB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEe,IAAI,CAAC;IACrC,OAAOA,IAAI;EAEb,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAACC,OAAO,CAAC;IAChD,MAAM,IAAIG,KAAK,CAAC,uBAAuBJ,KAAK,CAACC,OAAO,EAAE,CAAC;EACzD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMgB,iBAAiB,GAAIC,QAAQ,IAAK;EAC7C,IAAI,CAACA,QAAQ,EAAE,OAAO,EAAE;EACxB,OAAO,8BAA8BA,QAAQ,EAAE;AACjD,CAAC;AAED,eAAe;EACbhB,YAAY;EACZe;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}