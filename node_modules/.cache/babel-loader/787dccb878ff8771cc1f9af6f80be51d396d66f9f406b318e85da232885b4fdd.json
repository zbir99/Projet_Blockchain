{"ast":null,"code":"import { allocUnsafe } from '#alloc';\nimport { asUint8Array } from '#util/as-uint8array';\n/**\n * Returns a new Uint8Array created by concatenating the passed Uint8Arrays\n */\nexport function concat(arrays, length) {\n  if (length == null) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n  }\n  const output = allocUnsafe(length);\n  let offset = 0;\n  for (const arr of arrays) {\n    output.set(arr, offset);\n    offset += arr.length;\n  }\n  return asUint8Array(output);\n}","map":{"version":3,"names":["allocUnsafe","asUint8Array","concat","arrays","length","reduce","acc","curr","output","offset","arr","set"],"sources":["C:\\Users\\yassi\\OneDrive\\Desktop\\tp_9\\Certification-de-Diplomes\\node_modules\\@multiformats\\multiaddr-to-uri\\node_modules\\uint8arrays\\src\\concat.ts"],"sourcesContent":["import { allocUnsafe } from '#alloc'\nimport { asUint8Array } from '#util/as-uint8array'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Uint8Arrays\n */\nexport function concat (arrays: Uint8Array[], length?: number): Uint8Array {\n  if (length == null) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\n  }\n\n  const output = allocUnsafe(length)\n  let offset = 0\n\n  for (const arr of arrays) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return asUint8Array(output)\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,QAAQ;AACpC,SAASC,YAAY,QAAQ,qBAAqB;AAElD;;;AAGA,OAAM,SAAUC,MAAMA,CAAEC,MAAoB,EAAEC,MAAe;EAC3D,IAAIA,MAAM,IAAI,IAAI,EAAE;IAClBA,MAAM,GAAGD,MAAM,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACH,MAAM,EAAE,CAAC,CAAC;EAC7D;EAEA,MAAMI,MAAM,GAAGR,WAAW,CAACI,MAAM,CAAC;EAClC,IAAIK,MAAM,GAAG,CAAC;EAEd,KAAK,MAAMC,GAAG,IAAIP,MAAM,EAAE;IACxBK,MAAM,CAACG,GAAG,CAACD,GAAG,EAAED,MAAM,CAAC;IACvBA,MAAM,IAAIC,GAAG,CAACN,MAAM;EACtB;EAEA,OAAOH,YAAY,CAACO,MAAM,CAAC;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}