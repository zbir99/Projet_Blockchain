import React, { useState, useEffect } from 'react';
import { ethers } from 'ethers';
import ipfs from '../utils/ipfs';
import { useProvider } from '../utils/web3Provider';

const AddCertificate = () => {
  const { provider, contract, account } = useProvider();
  const [certificateData, setCertificateData] = useState({
    studentName: '',
    studentId: '',
    course: '',
    graduationDate: '',
    recipientAddress: '',
    file: null,
  });
  const [errorMessage, setErrorMessage] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [isDragOver, setIsDragOver] = useState(false);
  const [isFormVisible, setIsFormVisible] = useState(false);
  const [particles, setParticles] = useState([]);

  // Animation d'entrée au chargement du composant
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsFormVisible(true);
      // Générer des particules aléatoires pour l'arrière-plan
      const newParticles = Array.from({ length: 20 }, (_, i) => ({
        id: i,
        x: Math.random() * 100,
        y: Math.random() * 100,
        size: Math.random() * 10 + 2,
        speed: Math.random() * 2 + 0.5,
        color: [
          'rgba(79, 70, 229, 0.3)', // Indigo
          'rgba(6, 182, 212, 0.3)',  // Cyan
          'rgba(245, 158, 11, 0.3)', // Amber
          'rgba(16, 185, 129, 0.3)', // Emerald
        ][Math.floor(Math.random() * 4)],
      }));
      setParticles(newParticles);
    }, 300);
    return () => clearTimeout(timer);
  }, []);

  // Animer les particules de l'arrière-plan
  useEffect(() => {
    if (particles.length === 0) return;
    
    const interval = setInterval(() => {
      setParticles(prev => prev.map(particle => ({
        ...particle,
        y: (particle.y + particle.speed) % 100,
      })));
    }, 100);
    
    return () => clearInterval(interval);
  }, [particles]);

  // Simuler une progression lors de l'upload
  useEffect(() => {
    if (isLoading && uploadProgress < 90) {
      const timer = setTimeout(() => {
        setUploadProgress(prev => Math.min(prev + Math.random() * 10, 90));
      }, 300);
      return () => clearTimeout(timer);
    } else if (!isLoading) {
      setUploadProgress(0);
    }
  }, [isLoading, uploadProgress]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCertificateData({ ...certificateData, [name]: value });
  };

  const handleFileChange = (e) => {
    if (e.target.files[0]) {
      setCertificateData({ ...certificateData, file: e.target.files[0] });
    }
  };

  const handleDragEnter = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(false);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(false);
    if (e.dataTransfer.files[0]) {
      setCertificateData({ ...certificateData, file: e.dataTransfer.files[0] });
    }
  };

  const isValidEthereumAddress = (address) => {
    return /^0x[a-fA-F0-9]{40}$/.test(address);
  };

  const validateForm = () => {
    if (
      !certificateData.studentName ||
      !certificateData.studentId ||
      !certificateData.course ||
      !certificateData.graduationDate ||
      !certificateData.recipientAddress ||
      !certificateData.file
    ) {
      setErrorMessage('Tous les champs sont obligatoires');
      return false;
    }

    if (!isValidEthereumAddress(certificateData.recipientAddress)) {
      setErrorMessage("L'adresse Ethereum n'est pas valide");
      return false;
    }

    setErrorMessage('');
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) return;

    setIsLoading(true);
    setErrorMessage('');
    setSuccessMessage('');
    setUploadProgress(10); // Démarrer la progression

    try {
      // Créer le service IPFS et uploader le fichier
      const ipfsService = await ipfs.getIPFSService();
      const content = await ipfsService.uploadToIPFS(certificateData.file);
      const hash = content.path;
      setUploadProgress(95); // Presque terminé

      // Créer un timestamp pour la date de graduation
      const graduationDate = new Date(certificateData.graduationDate).getTime() / 1000;

      // Ajouter le certificat au contrat
      const tx = await contract.addCertificate(
        certificateData.recipientAddress,
        certificateData.studentName,
        certificateData.studentId,
        certificateData.course,
        Math.floor(graduationDate),
        hash
      );

      await tx.wait();
      setUploadProgress(100); // Terminé

      setSuccessMessage(
        `Certificat ajouté avec succès! Hash IPFS: ${hash}`
      );

      // Réinitialiser le formulaire
      setCertificateData({
        studentName: '',
        studentId: '',
        course: '',
        graduationDate: '',
        recipientAddress: '',
        file: null,
      });

      // Reset file input
      const fileInput = document.querySelector('input[type="file"]');
      if (fileInput) {
        fileInput.value = '';
      }
    } catch (error) {
      console.error('Erreur lors de l\'ajout du certificat:', error);
      setErrorMessage(
        `Erreur lors de l'ajout du certificat: ${error.message || error}`
      );
    } finally {
      setIsLoading(false);
    }
  };

  // Si l'utilisateur n'est pas connecté, afficher un message
  if (!account) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4">
        <div className="card glass max-w-md w-full transform transition-all duration-500 hover:scale-105 card-3d">
          <div className="text-center py-8 px-6">
            <div className="w-20 h-20 mx-auto mb-6 rounded-full bg-indigo-100 flex items-center justify-center neon">
              <svg className="w-10 h-10 text-indigo-600 bounce" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
            </div>
            <h2 className="text-3xl font-bold mb-2 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 bg-clip-text text-transparent">
              Connectez-vous d'abord
            </h2>
            <p className="text-gray-600 mb-8">
              Vous devez connecter votre portefeuille Ethereum pour pouvoir certifier des diplômes
            </p>
            <button className="btn btn-primary w-full pulse" disabled>
              Connectez votre portefeuille
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="container px-4 py-12 mx-auto relative overflow-hidden">
      {/* Particules d'arrière-plan */}
      {particles.map(particle => (
        <div 
          key={particle.id}
          className="absolute rounded-full pointer-events-none"
          style={{
            left: `${particle.x}%`,
            top: `${particle.y}%`,
            width: `${particle.size}px`,
            height: `${particle.size}px`,
            background: particle.color,
            transition: 'top 0.5s linear'
          }}
        />
      ))}
      
      <div className={`max-w-3xl mx-auto transition-all duration-700 transform ${isFormVisible ? 'translate-y-0 opacity-100' : 'translate-y-20 opacity-0'}`}>
        <div className="mb-8 text-center">
          <h1 className="text-4xl font-bold text-white mb-3 float">
            Certification de Diplômes
          </h1>
          <p className="text-xl text-white/80 max-w-2xl mx-auto pulse">
            Ajoutez un certificat sécurisé et immuable sur la blockchain
          </p>
        </div>

        <div className="card glass card-3d rainbow-border">
          <h2 className="text-3xl font-bold mb-8 text-center bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 bg-clip-text text-transparent">
            Nouveau Certificat
          </h2>

          {errorMessage && (
            <div className="mb-6 p-4 bg-red-100/80 backdrop-blur text-red-700 rounded-xl border border-red-300 transform transition-all duration-500 animate-[bounce_1s_ease-in-out]">
              <div className="flex items-center">
                <svg className="w-5 h-5 mr-2 text-red-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                </svg>
                <span>{errorMessage}</span>
              </div>
            </div>
          )}

          {successMessage && (
            <div className="mb-6 p-4 bg-green-100/80 backdrop-blur text-green-700 rounded-xl border border-green-300 transform transition-all duration-500 animate-[bounce_1s_ease-in-out]">
              <div className="flex items-center">
                <svg className="w-5 h-5 mr-2 text-green-500" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                </svg>
                <span>{successMessage}</span>
              </div>
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-2">
                <label htmlFor="studentName" className="label text-gray-800 flex items-center">
                  <svg className="w-5 h-5 mr-2 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                  Nom de l'étudiant
                </label>
                <input
                  type="text"
                  id="studentName"
                  name="studentName"
                  value={certificateData.studentName}
                  onChange={handleChange}
                  className="input"
                  placeholder="Prénom NOM"
                />
              </div>

              <div className="space-y-2">
                <label htmlFor="studentId" className="label text-gray-800 flex items-center">
                  <svg className="w-5 h-5 mr-2 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 114 0v1m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2" />
                  </svg>
                  ID de l'étudiant
                </label>
                <input
                  type="text"
                  id="studentId"
                  name="studentId"
                  value={certificateData.studentId}
                  onChange={handleChange}
                  className="input"
                  placeholder="ETU12345"
                />
              </div>

              <div className="space-y-2">
                <label htmlFor="course" className="label text-gray-800 flex items-center">
                  <svg className="w-5 h-5 mr-2 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                  </svg>
                  Formation / Diplôme
                </label>
                <input
                  type="text"
                  id="course"
                  name="course"
                  value={certificateData.course}
                  onChange={handleChange}
                  className="input"
                  placeholder="Master en Blockchain"
                />
              </div>

              <div className="space-y-2">
                <label htmlFor="graduationDate" className="label text-gray-800 flex items-center">
                  <svg className="w-5 h-5 mr-2 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  Date d'obtention
                </label>
                <input
                  type="date"
                  id="graduationDate"
                  name="graduationDate"
                  value={certificateData.graduationDate}
                  onChange={handleChange}
                  className="input"
                />
              </div>

              <div className="space-y-2 md:col-span-2">
                <label htmlFor="recipientAddress" className="label text-gray-800 flex items-center">
                  <svg className="w-5 h-5 mr-2 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                  </svg>
                  Adresse Ethereum du destinataire
                </label>
                <input
                  type="text"
                  id="recipientAddress"
                  name="recipientAddress"
                  value={certificateData.recipientAddress}
                  onChange={handleChange}
                  className="input"
                  placeholder="0x..."
                />
              </div>
            </div>

            <div className="mt-8">
              <div 
                className={`file-upload-area ${isDragOver ? 'border-indigo-500 ring-2 ring-indigo-300' : ''}`} 
                onDragEnter={handleDragEnter}
                onDragLeave={handleDragLeave}
                onDragOver={handleDragOver}
                onDrop={handleDrop}
              >
                <input
                  type="file"
                  id="file"
                  name="file"
                  onChange={handleFileChange}
                  className="hidden"
                  accept=".pdf,.jpg,.jpeg,.png"
                />
                
                <div className="flex flex-col items-center justify-center text-center">
                  <div className={`mb-4 p-4 rounded-full bg-indigo-100 text-indigo-600 ${certificateData.file ? 'neon' : 'bounce'}`}>
                    <svg className="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                  </div>
                  
                  {certificateData.file ? (
                    <>
                      <p className="text-lg font-medium text-indigo-600">{certificateData.file.name}</p>
                      <p className="text-sm text-gray-500 mt-1">{(certificateData.file.size / 1024).toFixed(1)} KB</p>
                      <button 
                        type="button" 
                        onClick={() => document.getElementById('file').click()}
                        className="mt-4 text-sm text-indigo-600 hover:text-indigo-800 font-medium"
                      >
                        Changer de fichier
                      </button>
                    </>
                  ) : (
                    <>
                      <p className="text-lg font-medium text-gray-700">Glissez-déposez votre fichier ici</p>
                      <p className="text-sm text-gray-500 mb-4">ou</p>
                      <button 
                        type="button" 
                        onClick={() => document.getElementById('file').click()}
                        className="px-4 py-2 bg-indigo-50 text-indigo-600 rounded-lg hover:bg-indigo-100 transition-colors font-medium"
                      >
                        Parcourir les fichiers
                      </button>
                      <p className="text-xs text-gray-500 mt-4">PDF ou images jusqu'à 10MB</p>
                    </>
                  )}
                </div>
              </div>
            </div>

            <div className="mt-8">
              {isLoading && (
                <div className="w-full bg-gray-200 rounded-full h-2.5 mb-6 overflow-hidden">
                  <div 
                    className="bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 h-2.5 rounded-full transition-all duration-300 ease-out"
                    style={{ width: `${uploadProgress}%` }}
                  ></div>
                </div>
              )}
              
              <button
                type="submit"
                disabled={isLoading}
                className={`relative btn btn-primary w-full font-bold overflow-hidden group ${isLoading ? 'opacity-70 cursor-not-allowed' : 'hover:scale-105'}`}
              >
                <span className="relative z-10">
                  {isLoading ? 'Création du certificat...' : 'Certifier le diplôme'}
                </span>
                <div className="absolute inset-0 h-full w-full scale-0 rounded-full transition-all duration-300 group-hover:scale-100 group-hover:bg-white/10"></div>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default AddCertificate;
