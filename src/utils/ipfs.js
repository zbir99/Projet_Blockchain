/**
 * Client IPFS simple pour IPFS Desktop
 * Bas√© sur notre script de test qui fonctionne
 */
import { create } from 'ipfs-http-client';

// Cr√©er une instance du client IPFS
const ipfs = create({
  host: 'localhost',
  port: 5001,
  protocol: 'http'
});

// Test de la connexion imm√©diatement
const testConnection = async () => {
  try {
    const version = await ipfs.version();
    console.log('‚úÖ IPFS Desktop connect√©, version:', version.version);
    return true;
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† IPFS Desktop:', error.message);
    console.log('üîß Solutions:');
    console.log('1. V√©rifiez que IPFS Desktop est d√©marr√©');
    console.log('2. V√©rifiez CORS dans les param√®tres');
    return false;
  }
};

// Ex√©cuter le test imm√©diatement
testConnection();

/**
 * Upload un fichier sur IPFS
 * @param {File} file - Le fichier √† uploader
 * @returns {Promise<string>} - Le CID (hash) du fichier
 */
export const uploadToIPFS = async (file) => {
  if (!file) {
    throw new Error('Aucun fichier fourni');
  }

  console.log('üì§ Upload sur IPFS Desktop...');
  console.log('üìÑ Fichier:', file.name, '(' + (file.size / 1024).toFixed(2) + ' KB)');

  try {
    // Convertir en Uint8Array (n√©cessaire pour ipfs.add)
    const arrayBuffer = await file.arrayBuffer();
    const content = new Uint8Array(arrayBuffer);

    // Upload du fichier
    const result = await ipfs.add({
      path: file.name, 
      content: content
    });
    
    const hash = result.cid.toString();
    console.log('‚úÖ Upload r√©ussi:', hash);
    return hash;
    
  } catch (error) {
    console.error('‚ùå Erreur upload:', error.message);
    throw new Error(`Erreur upload IPFS: ${error.message}`);
  }
};

/**
 * G√©n√®re l'URL pour acc√©der au fichier sur IPFS
 * @param {string} ipfsHash - Le hash IPFS
 * @returns {string} - L'URL compl√®te
 */
export const getIPFSGatewayURL = (ipfsHash) => {
  if (!ipfsHash) return '';
  return `http://localhost:8080/ipfs/${ipfsHash}`;
};

export default {
  uploadToIPFS,
  getIPFSGatewayURL
};
